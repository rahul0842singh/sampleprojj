define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSpinButtonStyles_unstable = exports.spinButtonClassNames = void 0;
    exports.spinButtonClassNames = {
        root: 'fui-SpinButton',
        input: 'fui-SpinButton__input',
        incrementButton: 'fui-SpinButton__incrementButton',
        decrementButton: 'fui-SpinButton__decrementButton',
    };
    var spinButtonExtraClassNames = {
        buttonActive: 'fui-SpinButton__button_active',
    };
    var fieldHeights = {
        small: '24px',
        medium: '32px',
    };
    var useRootClassName = react_1.makeResetStyles({
        display: 'inline-grid',
        gridTemplateColumns: "1fr 24px",
        gridTemplateRows: '1fr 1fr',
        columnGap: react_theme_1.tokens.spacingHorizontalXS,
        rowGap: 0,
        position: 'relative',
        isolation: 'isolate',
        backgroundColor: react_theme_1.tokens.colorNeutralBackground1,
        minHeight: fieldHeights.medium,
        padding: "0 0 0 " + react_theme_1.tokens.spacingHorizontalMNudge,
        borderRadius: react_theme_1.tokens.borderRadiusMedium,
        // Apply border styles on the ::before pseudo element.
        // We cannot use ::after since that is used for selection.
        // Using the pseudo element allows us to place the border
        // above content in the component which ensures the buttons
        // line up visually with the border as expected. Without this
        // there is a bit of a gap which can become very noticeable
        // at high zoom or when OS zoom levels are not divisible by 2
        // (e.g., 150% on Windows in Firefox)
        // This is most noticeable on the "outline" appearance which is
        // also the default so it feels worth the extra ceremony to get right.
        '::before': {
            content: '""',
            boxSizing: 'border-box',
            position: 'absolute',
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            pointerEvents: 'none',
            zIndex: 10,
            border: "1px solid " + react_theme_1.tokens.colorNeutralStroke1,
            borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible,
            borderRadius: react_theme_1.tokens.borderRadiusMedium,
        },
        '::after': {
            boxSizing: 'border-box',
            content: '""',
            position: 'absolute',
            right: 0,
            bottom: 0,
            left: 0,
            zIndex: 20,
            // Maintaining the correct corner radius:
            // Use the whole border-radius as the height and only put radii on the bottom corners.
            // (Otherwise the radius would be automatically reduced to fit available space.)
            // max() ensures the focus border still shows up even if someone sets tokens.borderRadiusMedium to 0.
            height: "max(2px, " + react_theme_1.tokens.borderRadiusMedium + ")",
            borderBottomLeftRadius: react_theme_1.tokens.borderRadiusMedium,
            borderBottomRightRadius: react_theme_1.tokens.borderRadiusMedium,
            // Flat 2px border:
            // By default borderBottom will cause little "horns" on the ends. The clipPath trims them off.
            // (This could be done without trimming using `background: linear-gradient(...)`, but using
            // borderBottom makes it easier for people to override the color if needed.)
            borderBottom: "2px solid " + react_theme_1.tokens.colorCompoundBrandStroke,
            clipPath: 'inset(calc(100% - 2px) 0 0 0)',
            // Animation for focus OUT
            transform: 'scaleX(0)',
            transitionProperty: 'transform',
            transitionDuration: react_theme_1.tokens.durationUltraFast,
            transitionDelay: react_theme_1.tokens.curveAccelerateMid,
            '@media screen and (prefers-reduced-motion: reduce)': {
                transitionDuration: '0.01ms',
                transitionDelay: '0.01ms',
            },
        },
        ':focus-within::after': {
            // Animation for focus IN
            transform: 'scaleX(1)',
            transitionProperty: 'transform',
            transitionDuration: react_theme_1.tokens.durationNormal,
            transitionDelay: react_theme_1.tokens.curveDecelerateMid,
            '@media screen and (prefers-reduced-motion: reduce)': {
                transitionDuration: '0.01ms',
                transitionDelay: '0.01ms',
            },
        },
        ':focus-within:active::after': {
            // This is if the user clicks the field again while it's already focused
            borderBottomColor: react_theme_1.tokens.colorCompoundBrandStrokePressed,
        },
        ':focus-within': {
            outline: '2px solid transparent',
        },
    });
    var useRootStyles = react_1.makeStyles({
        small: tslib_1.__assign(tslib_1.__assign({ minHeight: fieldHeights.small }, react_theme_1.typographyStyles.caption1), { paddingLeft: react_theme_1.tokens.spacingHorizontalS }),
        medium: {
        // set by useRootClassName
        },
        outline: {
        // set by useRootClassName
        },
        outlineInteractive: {
            ':hover::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Hover)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessibleHover }),
            // DO NOT add a space between the selectors! It changes the behavior of make-styles.
            ':active,:focus-within': {
                '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Pressed)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessiblePressed }),
            },
        },
        underline: {
            '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderWidth(0, 0, '1px', 0)), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusNone)),
        },
        underlineInteractive: {
            ':hover::before': {
                borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessibleHover,
            },
            // DO NOT add a space between the selectors! It changes the behavior of make-styles.
            ':active,:focus-within': {
                '::before': {
                    borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessiblePressed,
                },
            },
            '::after': react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusNone), // remove rounded corners from focus underline
        },
        filled: {
            '::before': tslib_1.__assign({}, react_1.shorthands.border('1px', 'solid', react_theme_1.tokens.colorTransparentStroke)),
        },
        'filled-darker': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground3,
        },
        'filled-lighter': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground1,
        },
        filledInteractive: {
            // DO NOT add a space between the selectors! It changes the behavior of make-styles.
            ':hover,:focus-within': {
                '::before': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStrokeInteractive)),
            },
        },
        invalid: {
            ':not(:focus-within),:hover:not(:focus-within)': {
                '::before': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteRedBorder2)),
            },
        },
        disabled: {
            cursor: 'not-allowed',
            backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            '::before': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)), { '@media (forced-colors: active)': tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')) }),
        },
    });
    var useInputClassName = react_1.makeResetStyles({
        gridColumnStart: '1',
        gridColumnEnd: '2',
        gridRowStart: '1',
        gridRowEnd: '3',
        outlineStyle: 'none',
        border: '0',
        padding: '0',
        color: react_theme_1.tokens.colorNeutralForeground1,
        // Use literal "transparent" (not from the theme) to always let the color from the root show through
        backgroundColor: 'transparent',
        fontFamily: 'inherit',
        fontSize: 'inherit',
        fontWeight: 'inherit',
        lineHeight: 'inherit',
        '::placeholder': {
            color: react_theme_1.tokens.colorNeutralForeground4,
            opacity: 1, // browser style override
        },
    });
    var useInputStyles = react_1.makeStyles({
        disabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            cursor: 'not-allowed',
            backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            '::placeholder': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
    });
    var useBaseButtonClassName = react_1.makeResetStyles({
        display: 'inline-flex',
        width: '24px',
        alignItems: 'center',
        justifyContent: 'center',
        border: '0',
        position: 'absolute',
        outlineStyle: 'none',
        height: '16px',
        // Use literal "transparent" (not from the theme) to always let the color from the root show through
        backgroundColor: 'transparent',
        color: react_theme_1.tokens.colorNeutralForeground3,
        // common button layout
        gridColumnStart: '2',
        borderRadius: '0',
        padding: '0 5px 0 5px',
        ':active': {
            outlineStyle: 'none',
        },
        ':enabled': (_a = {
                ':hover': {
                    cursor: 'pointer',
                    color: react_theme_1.tokens.colorNeutralForeground3Hover,
                    backgroundColor: react_theme_1.tokens.colorSubtleBackgroundHover,
                },
                ':active': {
                    color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                    backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
                }
            },
            _a["&." + spinButtonExtraClassNames.buttonActive] = {
                color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
            },
            _a),
        ':disabled': {
            cursor: 'not-allowed',
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
        },
    });
    var useButtonStyles = react_1.makeStyles({
        increment: {
            gridRowStart: '1',
            borderTopRightRadius: react_theme_1.tokens.borderRadiusMedium,
            paddingTop: '4px',
            paddingBottom: '1px',
        },
        decrement: {
            gridRowStart: '2',
            borderBottomRightRadius: react_theme_1.tokens.borderRadiusMedium,
            paddingTop: '1px',
            paddingBottom: '4px',
        },
        // Padding values numbers don't align with design specs
        // but visually the padding aligns.
        // The icons are set in a 16x16px square but the artwork is inset from that
        // so these padding values are computed by hand.
        // Additionally the design uses fractional values so these are
        // rounded to the nearest integer.
        incrementButtonSmall: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding('3px', '6px', '0px', '4px')), { height: '12px' }),
        decrementButtonSmall: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding('0px', '6px', '3px', '4px')), { height: '12px' }),
        outline: {
        // set by useButtonClassName
        },
        underline: {
            backgroundColor: 'transparent',
            color: react_theme_1.tokens.colorNeutralForeground3,
            ':enabled': (_b = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForeground3Hover,
                        backgroundColor: react_theme_1.tokens.colorSubtleBackgroundHover,
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                        backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
                    }
                },
                _b["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                    backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
                },
                _b),
            ':disabled': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
        'filled-darker': {
            backgroundColor: 'transparent',
            color: react_theme_1.tokens.colorNeutralForeground3,
            ':enabled': (_c = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForeground3Hover,
                        backgroundColor: react_theme_1.tokens.colorNeutralBackground3Hover,
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                        backgroundColor: react_theme_1.tokens.colorNeutralBackground3Pressed,
                    }
                },
                _c["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                    backgroundColor: react_theme_1.tokens.colorNeutralBackground3Pressed,
                },
                _c),
            ':disabled': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
        'filled-lighter': {
            backgroundColor: 'transparent',
            color: react_theme_1.tokens.colorNeutralForeground3,
            ':enabled': (_d = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForeground3Hover,
                        backgroundColor: react_theme_1.tokens.colorNeutralBackground1Hover,
                    }
                },
                _d[":active,&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForeground3Pressed,
                    backgroundColor: react_theme_1.tokens.colorNeutralBackground1Pressed,
                },
                _d),
            ':disabled': {
                color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            },
        },
    });
    // Cannot just disable button as they need to remain
    // exposed to ATs like screen readers.
    var useButtonDisabledStyles = react_1.makeStyles({
        base: {
            cursor: 'not-allowed',
            ':hover': {
                cursor: 'not-allowed',
            },
        },
        outline: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            ':enabled': (_e = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    }
                },
                _e["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                    backgroundColor: 'transparent',
                },
                _e),
        },
        underline: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            ':enabled': (_f = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    }
                },
                _f["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                    backgroundColor: 'transparent',
                },
                _f),
        },
        'filled-darker': {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            ':enabled': (_g = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    }
                },
                _g["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                    backgroundColor: 'transparent',
                },
                _g),
        },
        'filled-lighter': {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            ':enabled': (_h = {
                    ':hover': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    },
                    ':active': {
                        color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                        backgroundColor: 'transparent',
                    }
                },
                _h["&." + spinButtonExtraClassNames.buttonActive] = {
                    color: react_theme_1.tokens.colorNeutralForegroundDisabled,
                    backgroundColor: 'transparent',
                },
                _h),
        },
    });
    /**
     * Apply styling to the SpinButton slots based on the state
     */
    var useSpinButtonStyles_unstable = function (state) {
        var appearance = state.appearance, atBound = state.atBound, spinState = state.spinState, size = state.size;
        var disabled = state.input.disabled;
        var invalid = "" + state.input['aria-invalid'] === 'true';
        var filled = appearance.startsWith('filled');
        var rootStyles = useRootStyles();
        var buttonStyles = useButtonStyles();
        var buttonDisabledStyles = useButtonDisabledStyles();
        var inputStyles = useInputStyles();
        state.root.className = react_1.mergeClasses(exports.spinButtonClassNames.root, useRootClassName(), rootStyles[size], rootStyles[appearance], filled && rootStyles.filled, !disabled && appearance === 'outline' && rootStyles.outlineInteractive, !disabled && appearance === 'underline' && rootStyles.underlineInteractive, !disabled && filled && rootStyles.filledInteractive, !disabled && invalid && rootStyles.invalid, disabled && rootStyles.disabled, state.root.className);
        state.incrementButton.className = react_1.mergeClasses(exports.spinButtonClassNames.incrementButton, spinState === 'up' && "" + spinButtonExtraClassNames.buttonActive, useBaseButtonClassName(), buttonStyles.increment, buttonStyles[appearance], size === 'small' && buttonStyles.incrementButtonSmall, (atBound === 'max' || atBound === 'both') && buttonDisabledStyles.base, (atBound === 'max' || atBound === 'both') && buttonDisabledStyles[appearance], state.incrementButton.className);
        state.decrementButton.className = react_1.mergeClasses(exports.spinButtonClassNames.decrementButton, spinState === 'down' && "" + spinButtonExtraClassNames.buttonActive, useBaseButtonClassName(), buttonStyles.decrement, buttonStyles[appearance], size === 'small' && buttonStyles.decrementButtonSmall, (atBound === 'min' || atBound === 'both') && buttonDisabledStyles.base, (atBound === 'min' || atBound === 'both') && buttonDisabledStyles[appearance], state.decrementButton.className);
        state.input.className = react_1.mergeClasses(exports.spinButtonClassNames.input, useInputClassName(), disabled && inputStyles.disabled, state.input.className);
        return state;
    };
    exports.useSpinButtonStyles_unstable = useSpinButtonStyles_unstable;
});
//# sourceMappingURL=useSpinButtonStyles.js.map
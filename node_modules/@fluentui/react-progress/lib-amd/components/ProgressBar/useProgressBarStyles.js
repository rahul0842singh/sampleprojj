define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme", "@fluentui/react-shared-contexts"], function (require, exports, tslib_1, react_1, react_theme_1, react_shared_contexts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useProgressBarStyles_unstable = exports.progressBarClassNames = void 0;
    exports.progressBarClassNames = {
        root: 'fui-ProgressBar',
        bar: 'fui-ProgressBar__bar',
    };
    // If the percentComplete is near 0, don't animate it.
    // This prevents animations on reset to 0 scenarios.
    var ZERO_THRESHOLD = 0.01;
    var barThicknessValues = {
        medium: '2px',
        large: '4px',
    };
    var indeterminateProgressBar = {
        '0%': {
            left: '-100% /* @noflip */',
        },
        '100%': {
            left: '100% /* @noflip */',
        },
    };
    var indeterminateProgressBarRTL = {
        '100%': {
            right: '-100% /* @noflip */',
        },
        '0%': {
            right: '100% /* @noflip */',
        },
    };
    /**
     * Styles for the root slot
     */
    var useRootStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({ display: 'block', backgroundColor: react_theme_1.tokens.colorNeutralBackground6, justifySelf: 'stretch' }, react_1.shorthands.overflow('hidden')), { '@media screen and (forced-colors: active)': tslib_1.__assign({}, react_1.shorthands.borderBottom('1px', 'solid', 'CanvasText')) }),
        rounded: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)),
        square: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusNone)),
        medium: {
            height: barThicknessValues.medium,
        },
        large: {
            height: barThicknessValues.large,
        },
    });
    /**
     * Styles for the ProgressBar bar
     */
    var useBarStyles = react_1.makeStyles({
        base: tslib_1.__assign({}, react_1.shorthands.borderRadius('inherit')),
        medium: {
            height: barThicknessValues.medium,
        },
        large: {
            height: barThicknessValues.large,
        },
        nonZeroDeterminate: {
            transitionProperty: 'width',
            transitionDuration: '0.3s',
            transitionTimingFunction: 'ease',
        },
        indeterminate: {
            maxWidth: '33%',
            position: 'relative',
            backgroundImage: "linear-gradient(\n      to right,\n      " + react_theme_1.tokens.colorNeutralBackground6 + " 0%,\n      " + react_theme_1.tokens.colorTransparentBackground + " 50%,\n      " + react_theme_1.tokens.colorNeutralBackground6 + " 100%\n    )",
            animationName: indeterminateProgressBar,
            animationDuration: '3s',
            animationIterationCount: 'infinite',
            '@media screen and (prefers-reduced-motion: reduce)': {
                animationDuration: '0.01ms',
                animationIterationCount: '1',
            },
        },
        rtl: {
            animationName: indeterminateProgressBarRTL,
        },
        brand: {
            backgroundColor: react_theme_1.tokens.colorCompoundBrandBackground,
            '@media screen and (forced-colors: active)': {
                backgroundColor: 'Highlight',
            },
        },
        error: {
            backgroundColor: react_theme_1.tokens.colorPaletteRedBackground3,
        },
        warning: {
            backgroundColor: react_theme_1.tokens.colorPaletteDarkOrangeBackground3,
        },
        success: {
            backgroundColor: react_theme_1.tokens.colorPaletteGreenBackground3,
        },
    });
    /**
     * Apply styling to the ProgressBar slots based on the state
     */
    var useProgressBarStyles_unstable = function (state) {
        var color = state.color, max = state.max, shape = state.shape, thickness = state.thickness, value = state.value;
        var rootStyles = useRootStyles();
        var barStyles = useBarStyles();
        var dir = react_shared_contexts_1.useFluent_unstable().dir;
        state.root.className = react_1.mergeClasses(exports.progressBarClassNames.root, rootStyles.root, rootStyles[shape], rootStyles[thickness], state.root.className);
        if (state.bar) {
            state.bar.className = react_1.mergeClasses(exports.progressBarClassNames.bar, barStyles.base, barStyles.brand, value === undefined && barStyles.indeterminate, value === undefined && dir === 'rtl' && barStyles.rtl, barStyles[thickness], value !== undefined && value > ZERO_THRESHOLD && barStyles.nonZeroDeterminate, color && value !== undefined && barStyles[color], state.bar.className);
        }
        if (state.bar && value !== undefined) {
            state.bar.style = tslib_1.__assign({ width: Math.min(100, Math.max(0, (value / max) * 100)) + '%' }, state.bar.style);
        }
        return state;
    };
    exports.useProgressBarStyles_unstable = useProgressBarStyles_unstable;
});
//# sourceMappingURL=useProgressBarStyles.js.map
{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAIA;;;AAGA,SAAgBA,oBAAoB,CAACC,IAAa,EAAEC,SAA0B;EAC5E,MAAM;IAAEC;EAAkB,CAAE,GAAGC,+BAAe,EAAE;EAChD,MAAM;IAAEC;EAAc,CAAE,GAAGC,0CAAkB,EAAE;EAC/C,MAAMC,SAAS,GAAGC,KAAK,CAACC,MAAM,CAAuB,IAAI,CAAC;EAC1D,MAAMC,UAAU,GAAGF,KAAK,CAACC,MAAM,EAAe;EAE9CD,KAAK,CAACG,SAAS,CAAC,MAAK;;IACnB,IAAI,CAACV,IAAI,EAAE;MACT,OAAO,gBAAU,CAACW,OAAO,0CAAEC,KAAK,EAAE;;IAEpCH,UAAU,CAACE,OAAO,GAAGP,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAES,aAAwC;IAC7E,MAAMC,OAAO,GAAGR,SAAS,CAACK,OAAO,IAAIT,kBAAkB,CAACI,SAAS,CAACK,OAAO,CAAC;IAC1E,IAAIG,OAAO,EAAE;MACXA,OAAO,CAACF,KAAK,EAAE;KAChB,MAAM;MACL,eAAS,CAACD,OAAO,0CAAEC,KAAK,EAAE,CAAC,CAAC;MAC5B,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACzC;QACAC,OAAO,CAACC,IAAI,CACV,CACE,mGAAmG,EACnG,kGAAkG,CACnG,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;;EAGP,CAAC,EAAE,CAAClB,kBAAkB,EAAEF,IAAI,EAAEC,SAAS,EAAEG,cAAc,CAAC,CAAC;EAEzD,OAAOE,SAAS;AAClB;AA7BAe","names":["useFocusFirstElement","open","modalType","findFirstFocusable","react_tabster_1","targetDocument","react_shared_contexts_1","dialogRef","React","useRef","triggerRef","useEffect","current","focus","activeElement","element","process","env","NODE_ENV","console","warn","join","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-dialog/src/utils/useFocusFirstElement.ts"],"sourcesContent":["import * as React from 'react';\nimport { useFocusFinders } from '@fluentui/react-tabster';\nimport { useFluent_unstable } from '@fluentui/react-shared-contexts';\nimport type { DialogSurfaceElement } from '../DialogSurface';\nimport type { DialogModalType } from '../Dialog';\n\n/**\n * Focus first element on content when dialog is opened,\n */\nexport function useFocusFirstElement(open: boolean, modalType: DialogModalType) {\n  const { findFirstFocusable } = useFocusFinders();\n  const { targetDocument } = useFluent_unstable();\n  const dialogRef = React.useRef<DialogSurfaceElement>(null);\n  const triggerRef = React.useRef<HTMLElement>();\n\n  React.useEffect(() => {\n    if (!open) {\n      return triggerRef.current?.focus();\n    }\n    triggerRef.current = targetDocument?.activeElement as HTMLElement | undefined;\n    const element = dialogRef.current && findFirstFocusable(dialogRef.current);\n    if (element) {\n      element.focus();\n    } else {\n      dialogRef.current?.focus(); // https://github.com/microsoft/fluentui/issues/25150\n      if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          [\n            '@fluentui/react-dialog: a Dialog should have at least one focusable element inside DialogSurface.',\n            'Please add at least a close button either on `DialogTitle` action slot or inside `DialogActions`',\n          ].join('\\n'),\n        );\n      }\n    }\n  }, [findFirstFocusable, open, modalType, targetDocument]);\n\n  return dialogRef;\n}\n"]}
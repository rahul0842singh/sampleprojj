{"version":3,"mappings":";;;;;;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMO,MAAMA,yBAAyB,GAAIC,KAAyB,IAAwB;EACzF,MAAMC,qBAAqB,GAAGC,2CAAgC,EAAE;EAEhE,MAAM;IAAEC,QAAQ;IAAEC,wBAAwB,GAAG,KAAK;IAAEC,MAAM,GAAGJ,qBAAqB,GAAG,OAAO,GAAG;EAAM,CAAE,GAAGD,KAAK;EAE/G,MAAMM,KAAK,GAAGC,iCAAe,CAACJ,QAAQ,CAAC;EAEvC,MAAMK,iBAAiB,GAAGN,oCAAyB,CAACO,GAAG,IAAIA,GAAG,CAACD,iBAAiB,CAAC;EACjF,MAAME,IAAI,GAAGR,oCAAyB,CAACO,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC;EAEvD,MAAM;IAAEC;EAAiB,CAAE,GAAGC,kCAAkB,EAAE;EAElD,MAAMC,WAAW,GAAGN,kCAAgB,CACjCO,KAA+E,IAAI;;IAClF,WAAK,aAALR,KAAK,6BAALA,KAAK,CAAEN,KAAK,EAACe,OAAO,mDAAGD,KAAK,CAAC;IAC7B,IAAI,CAACA,KAAK,CAACE,kBAAkB,EAAE,EAAE;MAC/BR,iBAAiB,CAAC;QAChBM,KAAK;QACLG,IAAI,EAAE,cAAc;QACpBP,IAAI,EAAEL,MAAM,KAAK;OAClB,CAAC;;EAEN,CAAC,CACF;EAED,MAAMa,iBAAiB,GAAG;IACxB,IAAGZ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEN,KAAK;IACf,eAAe,EAAEU,IAAI;IACrBS,GAAG,EAAEb,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEa,GAAG;IACfJ,OAAO,EAAEF,WAAW;IACpB,GAAGF;GACK;EAEV,MAAMS,2BAA2B,GAAGC,+BAAkB,CACpD,MAAK,aAALf,KAAK,uBAALA,KAAK,CAAEW,IAAI,MAAK,QAAQ,IAAI,MAAK,aAALX,KAAK,uBAALA,KAAK,CAAEW,IAAI,MAAK,GAAG,GAAGX,KAAK,CAACW,IAAI,GAAG,KAAK,EACpE;IACE,GAAGC,iBAAiB;IACpBD,IAAI,EAAE;GACP,CACF;EAED,OAAO;IACLd,QAAQ,EAAEI,6CAA2B,CACnCJ,QAAQ,EACRC,wBAAwB,GAAGc,iBAAiB,GAAGE,2BAA2B;GAE7E;AACH,CAAC;AA/CYE,iCAAyB","names":["useDialogTrigger_unstable","props","isInsideSurfaceDialog","contexts_1","children","disableButtonEnhancement","action","child","react_utilities_1","requestOpenChange","ctx","open","triggerAttributes","react_tabster_1","handleClick","event","onClick","isDefaultPrevented","type","triggerChildProps","ref","ariaButtonTriggerChildProps","react_aria_1","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-dialog/src/components/DialogTrigger/useDialogTrigger.ts"],"sourcesContent":["import * as React from 'react';\nimport { useModalAttributes } from '@fluentui/react-tabster';\nimport { applyTriggerPropsToChildren, getTriggerChild, useEventCallback } from '@fluentui/react-utilities';\nimport type { DialogTriggerProps, DialogTriggerState } from './DialogTrigger.types';\nimport { useDialogContext_unstable, useDialogSurfaceContext_unstable } from '../../contexts';\nimport { useARIAButtonProps } from '@fluentui/react-aria';\n\n/**\n * Create the state required to render DialogTrigger.\n * Clones the only child component and adds necessary event handling behaviours to open a popup Dialog\n *\n * @param props - props from this instance of DialogTrigger\n */\nexport const useDialogTrigger_unstable = (props: DialogTriggerProps): DialogTriggerState => {\n  const isInsideSurfaceDialog = useDialogSurfaceContext_unstable();\n\n  const { children, disableButtonEnhancement = false, action = isInsideSurfaceDialog ? 'close' : 'open' } = props;\n\n  const child = getTriggerChild(children);\n\n  const requestOpenChange = useDialogContext_unstable(ctx => ctx.requestOpenChange);\n  const open = useDialogContext_unstable(ctx => ctx.open);\n\n  const { triggerAttributes } = useModalAttributes();\n\n  const handleClick = useEventCallback(\n    (event: React.MouseEvent<HTMLButtonElement & HTMLAnchorElement & HTMLDivElement>) => {\n      child?.props.onClick?.(event);\n      if (!event.isDefaultPrevented()) {\n        requestOpenChange({\n          event,\n          type: 'triggerClick',\n          open: action === 'open',\n        });\n      }\n    },\n  );\n\n  const triggerChildProps = {\n    ...child?.props,\n    'aria-expanded': open,\n    ref: child?.ref,\n    onClick: handleClick,\n    ...triggerAttributes,\n  } as const;\n\n  const ariaButtonTriggerChildProps = useARIAButtonProps(\n    child?.type === 'button' || child?.type === 'a' ? child.type : 'div',\n    {\n      ...triggerChildProps,\n      type: 'button',\n    },\n  );\n\n  return {\n    children: applyTriggerPropsToChildren(\n      children,\n      disableButtonEnhancement ? triggerChildProps : ariaButtonTriggerChildProps,\n    ),\n  };\n};\n"]}
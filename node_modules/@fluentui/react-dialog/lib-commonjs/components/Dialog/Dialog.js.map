{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAEA;AAEA;;;;;;;AAOaA,cAAM,gBAA0BC,KAAK,CAACC,IAAI,CAACC,KAAK,IAAG;EAC9D,MAAMC,KAAK,GAAGC,8BAAkB,CAACF,KAAK,CAAC;EACvC,MAAMG,aAAa,GAAGC,wDAA+B,CAACH,KAAK,CAAC;EAE5D,OAAOI,oCAAqB,CAACJ,KAAK,EAAEE,aAAa,CAAC;AACpD,CAAC,CAAC;AAEFN,cAAM,CAACS,WAAW,GAAG,QAAQ","names":["exports","React","memo","props","state","useDialog_1","contextValues","useDialogContextValues_1","renderDialog_1","displayName"],"sourceRoot":"../src/","sources":["packages/react-components/react-dialog/src/components/Dialog/Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useDialog_unstable } from './useDialog';\nimport { renderDialog_unstable } from './renderDialog';\nimport type { DialogProps } from './Dialog.types';\nimport { useDialogContextValues_unstable } from './useDialogContextValues';\n\n/**\n * The `Dialog` root level component serves as an interface for interaction with all possible behaviors exposed.\n * It provides context down the hierarchy to `children` compound components to allow functionality.\n * This component expects to receive as children either a `DialogSurface` or a `DialogTrigger`\n * and a `DialogSurface` (or some component that will eventually render one of those compound components)\n * in this specific order\n */\nexport const Dialog: React.FC<DialogProps> = React.memo(props => {\n  const state = useDialog_unstable(props);\n  const contextValues = useDialogContextValues_unstable(state);\n\n  return renderDialog_unstable(state, contextValues);\n});\n\nDialog.displayName = 'Dialog';\n"]}
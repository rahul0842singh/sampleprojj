{"version":3,"mappings":"AAAA,SAASA,kBAAkB,QAAQ,iCAAiC;AACpE,SAASC,WAAW,QAAQ,OAAO;AAEnC,MAAMC,wBAAwB,GAAG,8BAAuC;AAUxE;;;AAGA,OAAM,SAAUC,oBAAoB;EAClC,MAAM;IAAEC;EAAc,CAAE,GAAGJ,kBAAkB,EAAE;EAC/C,OAAOC,WAAW,CAAC,MAAK;IACtB,IAAIG,cAAc,EAAE;MAClB,OAAOC,aAAa,CAACD,cAAc,CAACE,IAAI,CAAC;;EAE7C,CAAC,EAAE,CAACF,cAAc,CAAC,CAAC;AACtB;AAEA;;;;;AAKA,OAAM,SAAUC,aAAa,CAACE,MAAmB;;EAC/C,MAAM;IAAEC;EAAW,CAAE,GAAGD,MAAM,CAACE,aAAa,CAACC,eAAe;EAC5D,MAAMC,UAAU,GAAG,kBAAM,CAACF,aAAa,CAACG,WAAW,0CAAED,UAAU,mCAAI,CAAC;EACpEE,4BAA4B,CAACN,MAAM,CAAC;EACpC,IAAIA,MAAM,CAACL,wBAAwB,CAAC,CAACY,KAAK,KAAK,CAAC,EAAE;IAChDP,MAAM,CAACQ,KAAK,CAACC,QAAQ,GAAG,QAAQ;IAChCT,MAAM,CAACQ,KAAK,CAACE,YAAY,GAAG,GAAGN,UAAU,GAAGH,WAAW,IAAI;;EAE7DD,MAAM,CAACL,wBAAwB,CAAC,CAACY,KAAK,EAAE;EACxC,OAAO,MAAK;IACVP,MAAM,CAACL,wBAAwB,CAAC,CAACY,KAAK,EAAE;IACxC,IAAIP,MAAM,CAACL,wBAAwB,CAAC,CAACY,KAAK,KAAK,CAAC,EAAE;MAChDP,MAAM,CAACQ,KAAK,CAACC,QAAQ,GAAGT,MAAM,CAACL,wBAAwB,CAAC,CAACgB,qBAAqB;MAC9EX,MAAM,CAACQ,KAAK,CAACE,YAAY,GAAGV,MAAM,CAACL,wBAAwB,CAAC,CAACiB,yBAAyB;;EAE1F,CAAC;AACH;AAEA,SAASN,4BAA4B,CAACO,OAAoB;;;EACxD,YAACA,OAAsC,EAAClB,wBAAwB,uCAAxBA,wBAAwB,IAAM;IACpEY,KAAK,EAAE,CAAC;IACRI,qBAAqB,EAAEE,OAAO,CAACL,KAAK,CAACC,QAAQ;IAC7CG,yBAAyB,EAAEC,OAAO,CAACL,KAAK,CAACE;GAC1C;AACH","names":["useFluent_unstable","useCallback","disableScrollElementProp","useDisableBodyScroll","targetDocument","disableScroll","body","target","clientWidth","ownerDocument","documentElement","innerWidth","defaultView","assertIsDisableScrollElement","count","style","overflow","paddingRight","previousOverflowStyle","previousPaddingRightStyle","element"],"sourceRoot":"../src/","sources":["packages/react-components/react-dialog/src/utils/useDisableBodyScroll.ts"],"sourcesContent":["import { useFluent_unstable } from '@fluentui/react-shared-contexts';\nimport { useCallback } from 'react';\n\nconst disableScrollElementProp = '__fluentDisableScrollElement' as const;\n\ntype FluentDisableScrollElement = HTMLElement & {\n  [disableScrollElementProp]: {\n    count: number;\n    previousOverflowStyle: string;\n    previousPaddingRightStyle: string;\n  };\n};\n\n/**\n * hook that disables body scrolling through `overflow: hidden` CSS property\n */\nexport function useDisableBodyScroll() {\n  const { targetDocument } = useFluent_unstable();\n  return useCallback(() => {\n    if (targetDocument) {\n      return disableScroll(targetDocument.body);\n    }\n  }, [targetDocument]);\n}\n\n/**\n * disables scrolling from a given element through `overflow: hidden` CSS property\n * @param target - element to disable scrolling from\n * @returns a method for enabling scrolling again\n */\nexport function disableScroll(target: HTMLElement) {\n  const { clientWidth } = target.ownerDocument.documentElement;\n  const innerWidth = target.ownerDocument.defaultView?.innerWidth ?? 0;\n  assertIsDisableScrollElement(target);\n  if (target[disableScrollElementProp].count === 0) {\n    target.style.overflow = 'hidden';\n    target.style.paddingRight = `${innerWidth - clientWidth}px`;\n  }\n  target[disableScrollElementProp].count++;\n  return () => {\n    target[disableScrollElementProp].count--;\n    if (target[disableScrollElementProp].count === 0) {\n      target.style.overflow = target[disableScrollElementProp].previousOverflowStyle;\n      target.style.paddingRight = target[disableScrollElementProp].previousPaddingRightStyle;\n    }\n  };\n}\n\nfunction assertIsDisableScrollElement(element: HTMLElement): asserts element is FluentDisableScrollElement {\n  (element as FluentDisableScrollElement)[disableScrollElementProp] ??= {\n    count: 0,\n    previousOverflowStyle: element.style.overflow,\n    previousPaddingRightStyle: element.style.paddingRight,\n  };\n}\n"]}
{"version":3,"mappings":";;;;;;AAAA;AAEA;AACA;AAEA;;;AAGO,MAAMA,eAAe,GAAG,MAAK;EAClC,MAAMC,OAAO,GAAGC,uBAAU,EAAE;EAC5B,MAAM;IAAEC;EAAc,CAAE,GAAGC,0CAAS,EAAE;EAEtC;EACA,MAAMC,gBAAgB,GAAGC,KAAK,CAACC,WAAW,CACxC,CAACC,SAAsB,EAAEC,eAA8C,KACrE,QAAO,aAAPR,OAAO,uBAAPA,OAAO,CAAES,SAAS,CAACC,OAAO,CAAC;IAAEH,SAAS;IAAEC;EAAe,CAAE,CAAC,KAAI,EAAE,EAClE,CAACR,OAAO,CAAC,CACV;EAED,MAAMW,kBAAkB,GAAGN,KAAK,CAACC,WAAW,CACzCC,SAAsB,IAAKP,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,SAAS,CAACG,SAAS,CAAC;IAAEL;EAAS,CAAE,CAAC,EACvE,CAACP,OAAO,CAAC,CACV;EAED,MAAMa,iBAAiB,GAAGR,KAAK,CAACC,WAAW,CAAEC,SAAsB,IAAKP,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,SAAS,CAACK,QAAQ,CAAC;IAAEP;EAAS,CAAE,CAAC,EAAE,CAClHP,OAAO,CACR,CAAC;EAEF,MAAMe,iBAAiB,GAAGV,KAAK,CAACC,WAAW,CACzC,CAACU,cAA2B,EAAEC,UAAkE,EAAE,KAAI;IACpG,IAAI,CAACjB,OAAO,IAAI,CAACE,cAAc,EAAE;MAC/B,OAAO,IAAI;;IAGb,MAAM;MAAEK,SAAS,GAAGL,cAAc,CAACgB;IAAI,CAAE,GAAGD,OAAO;IAEnD,OAAOjB,OAAO,CAACS,SAAS,CAACU,QAAQ,CAAC;MAAEH,cAAc;MAAET;IAAS,CAAE,CAAC;EAClE,CAAC,EACD,CAACP,OAAO,EAAEE,cAAc,CAAC,CAC1B;EAED,MAAMkB,iBAAiB,GAAGf,KAAK,CAACC,WAAW,CACzC,CAACU,cAA2B,EAAEC,UAAkE,EAAE,KAAI;IACpG,IAAI,CAACjB,OAAO,IAAI,CAACE,cAAc,EAAE;MAC/B,OAAO,IAAI;;IAGb,MAAM;MAAEK,SAAS,GAAGL,cAAc,CAACgB;IAAI,CAAE,GAAGD,OAAO;IAEnD,OAAOjB,OAAO,CAACS,SAAS,CAACY,QAAQ,CAAC;MAAEL,cAAc;MAAET;IAAS,CAAE,CAAC;EAClE,CAAC,EACD,CAACP,OAAO,EAAEE,cAAc,CAAC,CAC1B;EAED,OAAO;IACLE,gBAAgB;IAChBO,kBAAkB;IAClBE,iBAAiB;IACjBE,iBAAiB;IACjBK;GACD;AACH,CAAC;AArDYE,uBAAe","names":["useFocusFinders","tabster","useTabster_1","targetDocument","react_shared_contexts_1","findAllFocusable","React","useCallback","container","acceptCondition","focusable","findAll","findFirstFocusable","findFirst","findLastFocusable","findLast","findNextFocusable","currentElement","options","body","findNext","findPrevFocusable","findPrev","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-tabster/src/hooks/useFocusFinders.ts"],"sourcesContent":["import * as React from 'react';\nimport { Types as TabsterTypes } from 'tabster';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { useTabster } from './useTabster';\n\n/**\n * Returns a set of helper functions that will traverse focusable elements in the context of a root DOM element\n */\nexport const useFocusFinders = () => {\n  const tabster = useTabster();\n  const { targetDocument } = useFluent();\n\n  // Narrow props for now and let need dictate additional props in the future\n  const findAllFocusable = React.useCallback(\n    (container: HTMLElement, acceptCondition?: (el: HTMLElement) => boolean) =>\n      tabster?.focusable.findAll({ container, acceptCondition }) || [],\n    [tabster],\n  );\n\n  const findFirstFocusable = React.useCallback(\n    (container: HTMLElement) => tabster?.focusable.findFirst({ container }),\n    [tabster],\n  );\n\n  const findLastFocusable = React.useCallback((container: HTMLElement) => tabster?.focusable.findLast({ container }), [\n    tabster,\n  ]);\n\n  const findNextFocusable = React.useCallback(\n    (currentElement: HTMLElement, options: Pick<Partial<TabsterTypes.FindNextProps>, 'container'> = {}) => {\n      if (!tabster || !targetDocument) {\n        return null;\n      }\n\n      const { container = targetDocument.body } = options;\n\n      return tabster.focusable.findNext({ currentElement, container });\n    },\n    [tabster, targetDocument],\n  );\n\n  const findPrevFocusable = React.useCallback(\n    (currentElement: HTMLElement, options: Pick<Partial<TabsterTypes.FindNextProps>, 'container'> = {}) => {\n      if (!tabster || !targetDocument) {\n        return null;\n      }\n\n      const { container = targetDocument.body } = options;\n\n      return tabster.focusable.findPrev({ currentElement, container });\n    },\n    [tabster, targetDocument],\n  );\n\n  return {\n    findAllFocusable,\n    findFirstFocusable,\n    findLastFocusable,\n    findNextFocusable,\n    findPrevFocusable,\n  };\n};\n"]}
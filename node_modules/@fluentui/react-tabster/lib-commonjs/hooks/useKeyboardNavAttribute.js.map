{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAIA;;;;;AAKA,SAAgBA,uBAAuB;EACrC,MAAM;IAAEC;EAAc,CAAE,GAAGC,0CAAS,EAAE;EACtC,MAAMC,OAAO,GAAGC,eAAO,CAAC,MAAMH,cAAc,IAAII,uBAAa,CAACJ,cAAc,CAACK,WAAY,CAAC,EAAE,CAACL,cAAc,CAAC,CAAC;EAC7G,MAAMM,GAAG,GAAGH,cAAM,CAAI,IAAI,CAAC;EAC3BA,iBAAS,CAAC,MAAK;IACb,IAAID,OAAO,EAAE;MACXK,mBAAmB,CAACD,GAAG,EAAEE,kCAAsB,EAAEN,OAAO,CAACO,wBAAwB,EAAE,CAAC;MACpF,MAAMC,EAAE,GAAoBC,IAAI,IAAG;QACjCJ,mBAAmB,CAACD,GAAG,EAAEE,kCAAsB,EAAEG,IAAI,CAAC;MACxD,CAAC;MACDT,OAAO,CAACU,SAAS,CAACF,EAAE,CAAC;MACrB,OAAO,MAAMR,OAAO,CAACW,WAAW,CAACH,EAAE,CAAC;;EAExC,CAAC,EAAE,CAACR,OAAO,CAAC,CAAC;EACb,OAAOI,GAAG;AACZ;AAfAQ;AAiBA,SAASP,mBAAmB,CAACQ,UAAkC,EAAEC,SAAiB,EAAEC,KAAc;EAChG,IAAI,CAACF,UAAU,CAACG,OAAO,EAAE;IACvB;;EAEF,IAAID,KAAK,EAAE;IACTF,UAAU,CAACG,OAAO,CAACC,YAAY,CAACH,SAAS,EAAE,EAAE,CAAC;GAC/C,MAAM;IACLD,UAAU,CAACG,OAAO,CAACE,eAAe,CAACJ,SAAS,CAAC;;AAEjD","names":["useKeyboardNavAttribute","targetDocument","react_shared_contexts_1","keyborg","react_1","keyborg_1","defaultView","ref","setBooleanAttribute","constants_1","isNavigatingWithKeyboard","cb","next","subscribe","unsubscribe","exports","elementRef","attribute","value","current","setAttribute","removeAttribute"],"sourceRoot":"../src/","sources":["packages/react-components/react-tabster/src/hooks/useKeyboardNavAttribute.ts"],"sourcesContent":["import { createKeyborg } from 'keyborg';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { KEYBOARD_NAV_ATTRIBUTE } from '../focus/constants';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport type { KeyborgCallback } from 'keyborg';\nimport type { RefObject } from 'react';\n\n/**\n * Instantiates [keyborg](https://github.com/microsoft/keyborg) and adds `data-keyboard-nav`\n * attribute to a referenced element to ensure keyboard navigation awareness\n * synced to keyborg logic without having to cause a re-render on react tree.\n */\nexport function useKeyboardNavAttribute<E extends HTMLElement>() {\n  const { targetDocument } = useFluent();\n  const keyborg = useMemo(() => targetDocument && createKeyborg(targetDocument.defaultView!), [targetDocument]);\n  const ref = useRef<E>(null);\n  useEffect(() => {\n    if (keyborg) {\n      setBooleanAttribute(ref, KEYBOARD_NAV_ATTRIBUTE, keyborg.isNavigatingWithKeyboard());\n      const cb: KeyborgCallback = next => {\n        setBooleanAttribute(ref, KEYBOARD_NAV_ATTRIBUTE, next);\n      };\n      keyborg.subscribe(cb);\n      return () => keyborg.unsubscribe(cb);\n    }\n  }, [keyborg]);\n  return ref;\n}\n\nfunction setBooleanAttribute(elementRef: RefObject<HTMLElement>, attribute: string, value: boolean) {\n  if (!elementRef.current) {\n    return;\n  }\n  if (value) {\n    elementRef.current.setAttribute(attribute, '');\n  } else {\n    elementRef.current.removeAttribute(attribute);\n  }\n}\n"]}
{"version":3,"file":"useArrowNavigationGroup.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-tabster/src/hooks/useArrowNavigationGroup.ts"],"names":[],"mappings":";;;;IAoCA;;;OAGG;IACI,IAAM,uBAAuB,GAAG,UAAC,OAA4C;QAA5C,wBAAA,EAAA,YAA4C;QAEhF,IAAA,QAAQ,GAON,OAAO,SAPD,EACR,IAAI,GAMF,OAAO,KANL,EACJ,eAAe,GAKb,OAAO,gBALM,EACf,QAAQ,GAIN,OAAO,SAJD,EACR,oBAAoB,GAGlB,OAAO,qBAHW;QACpB,gEAAgE;QAChE,mBAAmB,GACjB,OAAO,oBADU,CACT;QACZ,IAAM,OAAO,GAAG,uBAAU,EAAE,CAAC;QAE7B,IAAI,OAAO,EAAE;YACX,kBAAQ,CAAC,OAAO,CAAC,CAAC;SACnB;QAED,OAAO,2CAAoB,oBACzB,KAAK,EAAE;gBACL,MAAM,EAAE,CAAC,CAAC,QAAQ;gBAClB,SAAS,EAAE,oBAAoB,CAAC,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,UAAU,CAAC;gBACnD,eAAe,iBAAA;gBACf,QAAQ,UAAA;gBACR,UAAU,EAAE,mBAAmB;aAChC,IACE,CAAC,oBAAoB,IAAI;YAC1B,SAAS,EAAE;gBACT,aAAa,EAAE,oBAAoB;aACpC;SACF,CAAC,EACF,CAAC;IACL,CAAC,CAAC;IA9BW,QAAA,uBAAuB,2BA8BlC;IAEF,SAAS,oBAAoB,CAAC,IAA4C;QACxE,QAAQ,IAAI,EAAE;YACZ,KAAK,YAAY;gBACf,OAAO,eAAK,CAAC,eAAe,CAAC,UAAU,CAAC;YAC1C,KAAK,MAAM;gBACT,OAAO,eAAK,CAAC,eAAe,CAAC,IAAI,CAAC;YACpC,KAAK,MAAM;gBACT,OAAO,eAAK,CAAC,eAAe,CAAC,IAAI,CAAC;YAEpC,KAAK,UAAU,CAAC;YAChB;gBACE,OAAO,eAAK,CAAC,eAAe,CAAC,QAAQ,CAAC;SACzC;IACH,CAAC","sourcesContent":["import { Types, getMover } from 'tabster';\nimport { useTabsterAttributes } from './useTabsterAttributes';\nimport { useTabster } from './useTabster';\n\nexport interface UseArrowNavigationGroupOptions {\n  /**\n   * Focus will navigate vertically, horizontally or in both directions (grid), defaults to horizontally\n   * @defaultValue vertical\n   */\n  axis?: 'vertical' | 'horizontal' | 'grid' | 'both';\n  /**\n   * Focus will cycle to the first/last elements of the group without stopping\n   */\n  circular?: boolean;\n  /**\n   * Last focused element in the group will be remembered and focused (if still\n   * available) when tabbing from outside of the group\n   */\n  memorizeCurrent?: boolean;\n  /**\n   * Allow tabbing within the arrow navigation group items.\n   */\n  tabbable?: boolean;\n  /**\n   * Tabster should ignore default handling of keydown events\n   */\n  ignoreDefaultKeydown?: Types.FocusableProps['ignoreKeydown'];\n  /**\n   * The default focusable item in the group will be an element with Focusable.isDefault property.\n   * Note that there is no way in \\@fluentui/react-tabster to set default focusable element,\n   * and this option is currently for internal testing purposes only.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  unstable_hasDefault?: boolean;\n}\n\n/**\n * A hook that returns the necessary tabster attributes to support arrow key navigation\n * @param options - Options to configure keyboard navigation\n */\nexport const useArrowNavigationGroup = (options: UseArrowNavigationGroupOptions = {}): Types.TabsterDOMAttribute => {\n  const {\n    circular,\n    axis,\n    memorizeCurrent,\n    tabbable,\n    ignoreDefaultKeydown,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_hasDefault,\n  } = options;\n  const tabster = useTabster();\n\n  if (tabster) {\n    getMover(tabster);\n  }\n\n  return useTabsterAttributes({\n    mover: {\n      cyclic: !!circular,\n      direction: axisToMoverDirection(axis ?? 'vertical'),\n      memorizeCurrent,\n      tabbable,\n      hasDefault: unstable_hasDefault,\n    },\n    ...(ignoreDefaultKeydown && {\n      focusable: {\n        ignoreKeydown: ignoreDefaultKeydown,\n      },\n    }),\n  });\n};\n\nfunction axisToMoverDirection(axis: UseArrowNavigationGroupOptions['axis']): Types.MoverDirection {\n  switch (axis) {\n    case 'horizontal':\n      return Types.MoverDirections.Horizontal;\n    case 'grid':\n      return Types.MoverDirections.Grid;\n    case 'both':\n      return Types.MoverDirections.Both;\n\n    case 'vertical':\n    default:\n      return Types.MoverDirections.Vertical;\n  }\n}\n"]}
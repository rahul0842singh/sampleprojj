import { useId, useIsomorphicLayoutEffect } from '@fluentui/react-utilities';
import { useRenderer_unstable } from '@griffel/react';
import * as React from 'react';
import { fluentProviderClassNames } from './useFluentProviderStyles';
// String concatenation is used to prevent bundlers to complain with older versions of React
const useInsertionEffect = React['useInsertion' + 'Effect'] ? React['useInsertion' + 'Effect'] : useIsomorphicLayoutEffect;
const createStyleTag = (target, elementAttributes) => {
  if (!target) {
    return undefined;
  }
  const tag = target.createElement('style');
  Object.keys(elementAttributes).forEach(attrName => {
    tag.setAttribute(attrName, elementAttributes[attrName]);
  });
  target.head.appendChild(tag);
  return tag;
};
const insertSheet = (tag, rule) => {
  const sheet = tag.sheet;
  if (sheet) {
    if (sheet.cssRules.length > 0) {
      sheet.deleteRule(0);
    }
    sheet.insertRule(rule, 0);
  } else if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line no-console
    console.error('FluentProvider: No sheet available on styleTag, styles will not be inserted into DOM.');
  }
};
/**
 * Writes a theme as css variables in a style tag on the provided targetDocument as a rule applied to a CSS class
 *
 * @returns CSS class to apply the rule
 */
export const useFluentProviderThemeStyleTag = options => {
  const {
    targetDocument,
    theme
  } = options;
  const renderer = useRenderer_unstable();
  const styleTag = React.useRef();
  const styleTagId = useId(fluentProviderClassNames.root);
  const styleElementAttributes = renderer.styleElementAttributes;
  const cssVarsAsString = React.useMemo(() => {
    return theme ? Object.keys(theme).reduce((cssVarRule, cssVar) => {
      cssVarRule += `--${cssVar}: ${theme[cssVar]}; `;
      return cssVarRule;
    }, '') : '';
  }, [theme]);
  const rule = `.${styleTagId} { ${cssVarsAsString} }`;
  useInsertionEffect(() => {
    styleTag.current = createStyleTag(targetDocument, {
      ...styleElementAttributes,
      id: styleTagId
    });
    if (styleTag.current) {
      insertSheet(styleTag.current, rule);
      return () => {
        var _a;
        (_a = styleTag.current) === null || _a === void 0 ? void 0 : _a.remove();
      };
    }
  }, [styleTagId, targetDocument, rule, styleElementAttributes]);
  return styleTagId;
};
//# sourceMappingURL=useFluentProviderThemeStyleTag.js.map
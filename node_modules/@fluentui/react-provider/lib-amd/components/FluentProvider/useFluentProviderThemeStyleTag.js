define(["require", "exports", "tslib", "@fluentui/react-utilities", "@griffel/react", "react", "./useFluentProviderStyles"], function (require, exports, tslib_1, react_utilities_1, react_1, React, useFluentProviderStyles_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useFluentProviderThemeStyleTag = void 0;
    // String concatenation is used to prevent bundlers to complain with older versions of React
    var useInsertionEffect = React['useInsertion' + 'Effect']
        ? React['useInsertion' + 'Effect']
        : react_utilities_1.useIsomorphicLayoutEffect;
    var createStyleTag = function (target, elementAttributes) {
        if (!target) {
            return undefined;
        }
        var tag = target.createElement('style');
        Object.keys(elementAttributes).forEach(function (attrName) {
            tag.setAttribute(attrName, elementAttributes[attrName]);
        });
        target.head.appendChild(tag);
        return tag;
    };
    var insertSheet = function (tag, rule) {
        var sheet = tag.sheet;
        if (sheet) {
            if (sheet.cssRules.length > 0) {
                sheet.deleteRule(0);
            }
            sheet.insertRule(rule, 0);
        }
        else if (process.env.NODE_ENV !== 'production') {
            // eslint-disable-next-line no-console
            console.error('FluentProvider: No sheet available on styleTag, styles will not be inserted into DOM.');
        }
    };
    /**
     * Writes a theme as css variables in a style tag on the provided targetDocument as a rule applied to a CSS class
     *
     * @returns CSS class to apply the rule
     */
    var useFluentProviderThemeStyleTag = function (options) {
        var targetDocument = options.targetDocument, theme = options.theme;
        var renderer = react_1.useRenderer_unstable();
        var styleTag = React.useRef();
        var styleTagId = react_utilities_1.useId(useFluentProviderStyles_1.fluentProviderClassNames.root);
        var styleElementAttributes = renderer.styleElementAttributes;
        var cssVarsAsString = React.useMemo(function () {
            return theme
                ? Object.keys(theme).reduce(function (cssVarRule, cssVar) {
                    cssVarRule += "--" + cssVar + ": " + theme[cssVar] + "; ";
                    return cssVarRule;
                }, '')
                : '';
        }, [theme]);
        var rule = "." + styleTagId + " { " + cssVarsAsString + " }";
        useInsertionEffect(function () {
            styleTag.current = createStyleTag(targetDocument, tslib_1.__assign(tslib_1.__assign({}, styleElementAttributes), { id: styleTagId }));
            if (styleTag.current) {
                insertSheet(styleTag.current, rule);
                return function () {
                    var _a;
                    (_a = styleTag.current) === null || _a === void 0 ? void 0 : _a.remove();
                };
            }
        }, [styleTagId, targetDocument, rule, styleElementAttributes]);
        return styleTagId;
    };
    exports.useFluentProviderThemeStyleTag = useFluentProviderThemeStyleTag;
});
//# sourceMappingURL=useFluentProviderThemeStyleTag.js.map
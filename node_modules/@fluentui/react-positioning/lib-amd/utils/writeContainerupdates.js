define(["require", "exports", "../constants"], function (require, exports, constants_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeContainerUpdates = void 0;
    /**
     * Writes all container element position updates after the position is computed
     */
    function writeContainerUpdates(options) {
        var _a, _b, _c;
        var container = options.container, placement = options.placement, middlewareData = options.middlewareData, strategy = options.strategy, lowPPI = options.lowPPI, coordinates = options.coordinates;
        if (!container) {
            return;
        }
        container.setAttribute(constants_1.DATA_POSITIONING_PLACEMENT, placement);
        container.removeAttribute(constants_1.DATA_POSITIONING_INTERSECTING);
        if (middlewareData.intersectionObserver.intersecting) {
            container.setAttribute(constants_1.DATA_POSITIONING_INTERSECTING, '');
        }
        container.removeAttribute(constants_1.DATA_POSITIONING_ESCAPED);
        if ((_a = middlewareData.hide) === null || _a === void 0 ? void 0 : _a.escaped) {
            container.setAttribute(constants_1.DATA_POSITIONING_ESCAPED, '');
        }
        container.removeAttribute(constants_1.DATA_POSITIONING_HIDDEN);
        if ((_b = middlewareData.hide) === null || _b === void 0 ? void 0 : _b.referenceHidden) {
            container.setAttribute(constants_1.DATA_POSITIONING_HIDDEN, '');
        }
        // Round so that the coordinates land on device pixels.
        // This prevents blurriness in cases where the browser doesn't apply pixel snapping, such as when other effects like
        // `backdrop-filter: blur()` are applied to the container, and the browser is zoomed in.
        // See https://github.com/microsoft/fluentui/issues/26764 for more info.
        var devicePixelRatio = ((_c = container.ownerDocument.defaultView) === null || _c === void 0 ? void 0 : _c.devicePixelRatio) || 1;
        var x = Math.round(coordinates.x * devicePixelRatio) / devicePixelRatio;
        var y = Math.round(coordinates.y * devicePixelRatio) / devicePixelRatio;
        Object.assign(container.style, {
            transform: lowPPI ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)",
            position: strategy,
        });
    }
    exports.writeContainerUpdates = writeContainerUpdates;
});
//# sourceMappingURL=writeContainerupdates.js.map
{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAIaA,0BAAkB,GAAkC;EAC/DC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE,qBAAqB;EAC5BC,KAAK,EAAE,qBAAqB;EAC5BC,SAAS,EAAE;CACZ;AAED;AACA,MAAMC,mBAAmB,GAAG,MAAM;AAClC,MAAMC,kBAAkB,GAAG,MAAM;AAEjC,MAAMC,oBAAoB,gBAAGC,qBAAe,k0EAM1C;AAEF,MAAMC,aAAa,gBAAGD,gBAAU;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;EAAA;IAAA;EAAA;AAAA,EAiF9B;AAEF,MAAME,qBAAqB,gBAAGF,qBAAe,8KAW3C;AAEF,MAAMG,cAAc,gBAAGH,gBAAU;EAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;EAAA;AAAA;EAAA;AAAA,EAW/B;AAEF,MAAMI,yBAAyB,gBAAGJ,qBAAe,gtBAmB/C;AAEF,MAAMK,kBAAkB,gBAAGL,gBAAU;EAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;EAAA;AAAA;EAAA;AAAA,EAUnC;AAEF;AACA,MAAMM,cAAc,gBAAGN,gBAAU;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;EAAA;AAAA;EAAA;AAAA,EAyB/B;AAEF;;;AAGO,MAAMO,0BAA0B,GAAIC,KAAoB,IAAmB;EAChF,MAAM;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,aAAa;IAAEC,KAAK;IAAEC;EAAI,CAAE,GAAGL,KAAK;EAE/D,MAAMM,iBAAiB,GAAGf,oBAAoB,EAAE;EAChD,MAAMgB,UAAU,GAAGd,aAAa,EAAE;EAClCO,KAAK,CAACf,IAAI,CAACuB,SAAS,GAAGhB,oBAAY,CACjCR,0BAAkB,CAACC,IAAI,EACvBqB,iBAAiB,EACjBJ,QAAQ,GACJK,UAAU,CAACL,QAAQ,GACnBD,OAAO,KAAK,OAAO,GACnBM,UAAU,CAACE,KAAK,GAChBR,OAAO,GACPM,UAAU,CAACN,OAAO,GAClBM,UAAU,CAACG,SAAS,EACxBV,KAAK,CAACf,IAAI,CAACuB,SAAS,CACrB;EAED,MAAMG,kBAAkB,GAAGjB,qBAAqB,EAAE;EAClD,MAAMkB,WAAW,GAAGjB,cAAc,EAAE;EACpCK,KAAK,CAACb,KAAK,CAACqB,SAAS,GAAGhB,oBAAY,CAClCR,0BAAkB,CAACG,KAAK,EACxBwB,kBAAkB,EAClBN,IAAI,KAAK,OAAO,IAAIO,WAAW,CAACC,KAAK,EACrCD,WAAW,CAACT,aAAa,CAAC,EAC1BH,KAAK,CAACb,KAAK,CAACqB,SAAS,CACtB;EAED,MAAMM,sBAAsB,GAAGlB,yBAAyB,EAAE;EAC1D,MAAMmB,eAAe,GAAGlB,kBAAkB,EAAE;EAC5C,IAAIG,KAAK,CAACZ,SAAS,EAAE;IACnBY,KAAK,CAACZ,SAAS,CAACoB,SAAS,GAAGhB,oBAAY,CACtCR,0BAAkB,CAACI,SAAS,EAC5B0B,sBAAsB,EACtBT,IAAI,KAAK,OAAO,IAAIU,eAAe,CAACF,KAAK,EACzCT,KAAK,KAAK,UAAU,IAAIW,eAAe,CAACC,QAAQ,EAChDhB,KAAK,CAACZ,SAAS,CAACoB,SAAS,CAC1B;;EAGH,MAAMS,WAAW,GAAGnB,cAAc,EAAE;EACpC,IAAIE,KAAK,CAACd,KAAK,EAAE;IACfc,KAAK,CAACd,KAAK,CAACsB,SAAS,GAAGhB,oBAAY,CAClCR,0BAAkB,CAACE,KAAK,EACxB+B,WAAW,CAACC,IAAI,EAChBD,WAAW,CAACZ,IAAI,CAAC,EACjBY,WAAW,CAACd,aAAa,CAAC,EAC1BH,KAAK,CAACd,KAAK,CAACsB,SAAS,CACtB;;EAGH,OAAOR,KAAK;AACd,CAAC;AApDYhB,kCAA0B","names":["exports","root","label","input","indicator","indicatorSizeMedium","indicatorSizeLarge","useRootBaseClassName","react_1","useRootStyles","useInputBaseClassName","useInputStyles","useIndicatorBaseClassName","useIndicatorStyles","useLabelStyles","useCheckboxStyles_unstable","state","checked","disabled","labelPosition","shape","size","rootBaseClassName","rootStyles","className","mixed","unchecked","inputBaseClassName","inputStyles","large","indicatorBaseClassName","indicatorStyles","circular","labelStyles","base"],"sourceRoot":"../src/","sources":["packages/react-components/react-checkbox/src/components/Checkbox/useCheckboxStyles.ts"],"sourcesContent":["import { makeResetStyles, makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { createFocusOutlineStyle } from '@fluentui/react-tabster';\nimport { tokens } from '@fluentui/react-theme';\nimport { CheckboxSlots, CheckboxState } from './Checkbox.types';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\nexport const checkboxClassNames: SlotClassNames<CheckboxSlots> = {\n  root: 'fui-Checkbox',\n  label: 'fui-Checkbox__label',\n  input: 'fui-Checkbox__input',\n  indicator: 'fui-Checkbox__indicator',\n};\n\n// The indicator size is used by the indicator and label styles\nconst indicatorSizeMedium = '16px';\nconst indicatorSizeLarge = '20px';\n\nconst useRootBaseClassName = makeResetStyles({\n  position: 'relative',\n  display: 'inline-flex',\n  cursor: 'pointer',\n  color: tokens.colorNeutralForeground3,\n  ...createFocusOutlineStyle({ style: {}, selector: 'focus-within' }),\n});\n\nconst useRootStyles = makeStyles({\n  unchecked: {\n    ':hover': {\n      color: tokens.colorNeutralForeground2,\n      [`> .${checkboxClassNames.indicator}`]: {\n        ...shorthands.borderColor(tokens.colorNeutralStrokeAccessibleHover),\n      },\n    },\n\n    ':active': {\n      color: tokens.colorNeutralForeground1,\n      [`> .${checkboxClassNames.indicator}`]: {\n        ...shorthands.borderColor(tokens.colorNeutralStrokeAccessiblePressed),\n      },\n    },\n  },\n\n  checked: {\n    color: tokens.colorNeutralForeground1,\n\n    [`> .${checkboxClassNames.indicator}`]: {\n      backgroundColor: tokens.colorCompoundBrandBackground,\n      color: tokens.colorNeutralForegroundInverted,\n      ...shorthands.borderColor(tokens.colorCompoundBrandBackground),\n    },\n\n    ':hover': {\n      [`> .${checkboxClassNames.indicator}`]: {\n        backgroundColor: tokens.colorCompoundBrandBackgroundHover,\n        ...shorthands.borderColor(tokens.colorCompoundBrandBackgroundHover),\n      },\n    },\n\n    ':active': {\n      [`> .${checkboxClassNames.indicator}`]: {\n        backgroundColor: tokens.colorCompoundBrandBackgroundPressed,\n        ...shorthands.borderColor(tokens.colorCompoundBrandBackgroundPressed),\n      },\n    },\n  },\n\n  mixed: {\n    color: tokens.colorNeutralForeground1,\n\n    [`> .${checkboxClassNames.indicator}`]: {\n      ...shorthands.borderColor(tokens.colorCompoundBrandStroke),\n      color: tokens.colorCompoundBrandForeground1,\n    },\n\n    ':hover': {\n      [`> .${checkboxClassNames.indicator}`]: {\n        ...shorthands.borderColor(tokens.colorCompoundBrandStrokeHover),\n        color: tokens.colorCompoundBrandForeground1Hover,\n      },\n    },\n\n    ':active': {\n      [`> .${checkboxClassNames.indicator}`]: {\n        ...shorthands.borderColor(tokens.colorCompoundBrandStrokePressed),\n        color: tokens.colorCompoundBrandForeground1Pressed,\n      },\n    },\n  },\n\n  disabled: {\n    cursor: 'default',\n\n    color: tokens.colorNeutralForegroundDisabled,\n\n    [`> .${checkboxClassNames.indicator}`]: {\n      ...shorthands.borderColor(tokens.colorNeutralStrokeDisabled),\n      color: tokens.colorNeutralForegroundDisabled,\n    },\n\n    '@media (forced-colors: active)': {\n      color: 'GrayText',\n      [`> .${checkboxClassNames.indicator}`]: {\n        color: 'GrayText',\n      },\n    },\n  },\n});\n\nconst useInputBaseClassName = makeResetStyles({\n  boxSizing: 'border-box',\n  cursor: 'inherit',\n  height: '100%',\n  margin: 0,\n  opacity: 0,\n  position: 'absolute',\n  top: 0,\n  // Calculate the width of the hidden input by taking into account the size of the indicator + the padding around it.\n  // This is done so that clicking on that \"empty space\" still toggles the checkbox.\n  width: `calc(${indicatorSizeMedium} + 2 * ${tokens.spacingHorizontalS})`,\n});\n\nconst useInputStyles = makeStyles({\n  before: {\n    right: 0,\n  },\n  after: {\n    left: 0,\n  },\n\n  large: {\n    width: `calc(${indicatorSizeLarge} + 2 * ${tokens.spacingHorizontalS})`,\n  },\n});\n\nconst useIndicatorBaseClassName = makeResetStyles({\n  alignSelf: 'flex-start',\n  boxSizing: 'border-box',\n  flexShrink: 0,\n\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  overflow: 'hidden',\n\n  border: tokens.strokeWidthThin + ' solid ' + tokens.colorNeutralStrokeAccessible,\n  borderRadius: tokens.borderRadiusSmall,\n  margin: tokens.spacingVerticalS + ' ' + tokens.spacingHorizontalS,\n  fill: 'currentColor',\n  pointerEvents: 'none',\n\n  fontSize: '12px',\n  height: indicatorSizeMedium,\n  width: indicatorSizeMedium,\n});\n\nconst useIndicatorStyles = makeStyles({\n  large: {\n    fontSize: '16px',\n    height: indicatorSizeLarge,\n    width: indicatorSizeLarge,\n  },\n\n  circular: {\n    ...shorthands.borderRadius(tokens.borderRadiusCircular),\n  },\n});\n\n// Can't use makeResetStyles here because Label is a component that may itself use makeResetStyles.\nconst useLabelStyles = makeStyles({\n  base: {\n    alignSelf: 'center',\n    color: 'inherit',\n    cursor: 'inherit',\n    ...shorthands.padding(tokens.spacingVerticalS, tokens.spacingHorizontalS),\n  },\n\n  before: {\n    paddingRight: tokens.spacingHorizontalXS,\n  },\n  after: {\n    paddingLeft: tokens.spacingHorizontalXS,\n  },\n\n  // Use a (negative) margin to account for the difference between the indicator's height and the label's line height.\n  // This prevents the label from expanding the height of the checkbox, but preserves line height if the label wraps.\n  medium: {\n    marginTop: `calc((${indicatorSizeMedium} - ${tokens.lineHeightBase300}) / 2)`,\n    marginBottom: `calc((${indicatorSizeMedium} - ${tokens.lineHeightBase300}) / 2)`,\n  },\n  large: {\n    marginTop: `calc((${indicatorSizeLarge} - ${tokens.lineHeightBase300}) / 2)`,\n    marginBottom: `calc((${indicatorSizeLarge} - ${tokens.lineHeightBase300}) / 2)`,\n  },\n});\n\n/**\n * Apply styling to the Checkbox slots based on the state\n */\nexport const useCheckboxStyles_unstable = (state: CheckboxState): CheckboxState => {\n  const { checked, disabled, labelPosition, shape, size } = state;\n\n  const rootBaseClassName = useRootBaseClassName();\n  const rootStyles = useRootStyles();\n  state.root.className = mergeClasses(\n    checkboxClassNames.root,\n    rootBaseClassName,\n    disabled\n      ? rootStyles.disabled\n      : checked === 'mixed'\n      ? rootStyles.mixed\n      : checked\n      ? rootStyles.checked\n      : rootStyles.unchecked,\n    state.root.className,\n  );\n\n  const inputBaseClassName = useInputBaseClassName();\n  const inputStyles = useInputStyles();\n  state.input.className = mergeClasses(\n    checkboxClassNames.input,\n    inputBaseClassName,\n    size === 'large' && inputStyles.large,\n    inputStyles[labelPosition],\n    state.input.className,\n  );\n\n  const indicatorBaseClassName = useIndicatorBaseClassName();\n  const indicatorStyles = useIndicatorStyles();\n  if (state.indicator) {\n    state.indicator.className = mergeClasses(\n      checkboxClassNames.indicator,\n      indicatorBaseClassName,\n      size === 'large' && indicatorStyles.large,\n      shape === 'circular' && indicatorStyles.circular,\n      state.indicator.className,\n    );\n  }\n\n  const labelStyles = useLabelStyles();\n  if (state.label) {\n    state.label.className = mergeClasses(\n      checkboxClassNames.label,\n      labelStyles.base,\n      labelStyles[size],\n      labelStyles[labelPosition],\n      state.label.className,\n    );\n  }\n\n  return state;\n};\n"]}
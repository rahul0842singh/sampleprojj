define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-tabster", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_tabster_1, react_theme_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useCheckboxStyles_unstable = exports.checkboxClassNames = void 0;
    exports.checkboxClassNames = {
        root: 'fui-Checkbox',
        label: 'fui-Checkbox__label',
        input: 'fui-Checkbox__input',
        indicator: 'fui-Checkbox__indicator',
    };
    // The indicator size is used by the indicator and label styles
    var indicatorSizeMedium = '16px';
    var indicatorSizeLarge = '20px';
    var useRootBaseClassName = react_1.makeResetStyles(tslib_1.__assign({ position: 'relative', display: 'inline-flex', cursor: 'pointer', color: react_theme_1.tokens.colorNeutralForeground3 }, react_tabster_1.createFocusOutlineStyle({ style: {}, selector: 'focus-within' })));
    var useRootStyles = react_1.makeStyles({
        unchecked: {
            ':hover': (_a = {
                    color: react_theme_1.tokens.colorNeutralForeground2
                },
                _a["> ." + exports.checkboxClassNames.indicator] = tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeAccessibleHover)),
                _a),
            ':active': (_b = {
                    color: react_theme_1.tokens.colorNeutralForeground1
                },
                _b["> ." + exports.checkboxClassNames.indicator] = tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeAccessiblePressed)),
                _b),
        },
        checked: (_c = {
                color: react_theme_1.tokens.colorNeutralForeground1
            },
            _c["> ." + exports.checkboxClassNames.indicator] = tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorCompoundBrandBackground, color: react_theme_1.tokens.colorNeutralForegroundInverted }, react_1.shorthands.borderColor(react_theme_1.tokens.colorCompoundBrandBackground)),
            _c[':hover'] = (_d = {},
                _d["> ." + exports.checkboxClassNames.indicator] = tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorCompoundBrandBackgroundHover }, react_1.shorthands.borderColor(react_theme_1.tokens.colorCompoundBrandBackgroundHover)),
                _d),
            _c[':active'] = (_e = {},
                _e["> ." + exports.checkboxClassNames.indicator] = tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorCompoundBrandBackgroundPressed }, react_1.shorthands.borderColor(react_theme_1.tokens.colorCompoundBrandBackgroundPressed)),
                _e),
            _c),
        mixed: (_f = {
                color: react_theme_1.tokens.colorNeutralForeground1
            },
            _f["> ." + exports.checkboxClassNames.indicator] = tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorCompoundBrandStroke)), { color: react_theme_1.tokens.colorCompoundBrandForeground1 }),
            _f[':hover'] = (_g = {},
                _g["> ." + exports.checkboxClassNames.indicator] = tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorCompoundBrandStrokeHover)), { color: react_theme_1.tokens.colorCompoundBrandForeground1Hover }),
                _g),
            _f[':active'] = (_h = {},
                _h["> ." + exports.checkboxClassNames.indicator] = tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorCompoundBrandStrokePressed)), { color: react_theme_1.tokens.colorCompoundBrandForeground1Pressed }),
                _h),
            _f),
        disabled: (_j = {
                cursor: 'default',
                color: react_theme_1.tokens.colorNeutralForegroundDisabled
            },
            _j["> ." + exports.checkboxClassNames.indicator] = tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)), { color: react_theme_1.tokens.colorNeutralForegroundDisabled }),
            _j['@media (forced-colors: active)'] = (_k = {
                    color: 'GrayText'
                },
                _k["> ." + exports.checkboxClassNames.indicator] = {
                    color: 'GrayText',
                },
                _k),
            _j),
    });
    var useInputBaseClassName = react_1.makeResetStyles({
        boxSizing: 'border-box',
        cursor: 'inherit',
        height: '100%',
        margin: 0,
        opacity: 0,
        position: 'absolute',
        top: 0,
        // Calculate the width of the hidden input by taking into account the size of the indicator + the padding around it.
        // This is done so that clicking on that "empty space" still toggles the checkbox.
        width: "calc(" + indicatorSizeMedium + " + 2 * " + react_theme_1.tokens.spacingHorizontalS + ")",
    });
    var useInputStyles = react_1.makeStyles({
        before: {
            right: 0,
        },
        after: {
            left: 0,
        },
        large: {
            width: "calc(" + indicatorSizeLarge + " + 2 * " + react_theme_1.tokens.spacingHorizontalS + ")",
        },
    });
    var useIndicatorBaseClassName = react_1.makeResetStyles({
        alignSelf: 'flex-start',
        boxSizing: 'border-box',
        flexShrink: 0,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        overflow: 'hidden',
        border: react_theme_1.tokens.strokeWidthThin + ' solid ' + react_theme_1.tokens.colorNeutralStrokeAccessible,
        borderRadius: react_theme_1.tokens.borderRadiusSmall,
        margin: react_theme_1.tokens.spacingVerticalS + ' ' + react_theme_1.tokens.spacingHorizontalS,
        fill: 'currentColor',
        pointerEvents: 'none',
        fontSize: '12px',
        height: indicatorSizeMedium,
        width: indicatorSizeMedium,
    });
    var useIndicatorStyles = react_1.makeStyles({
        large: {
            fontSize: '16px',
            height: indicatorSizeLarge,
            width: indicatorSizeLarge,
        },
        circular: tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusCircular)),
    });
    // Can't use makeResetStyles here because Label is a component that may itself use makeResetStyles.
    var useLabelStyles = react_1.makeStyles({
        base: tslib_1.__assign({ alignSelf: 'center', color: 'inherit', cursor: 'inherit' }, react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalS, react_theme_1.tokens.spacingHorizontalS)),
        before: {
            paddingRight: react_theme_1.tokens.spacingHorizontalXS,
        },
        after: {
            paddingLeft: react_theme_1.tokens.spacingHorizontalXS,
        },
        // Use a (negative) margin to account for the difference between the indicator's height and the label's line height.
        // This prevents the label from expanding the height of the checkbox, but preserves line height if the label wraps.
        medium: {
            marginTop: "calc((" + indicatorSizeMedium + " - " + react_theme_1.tokens.lineHeightBase300 + ") / 2)",
            marginBottom: "calc((" + indicatorSizeMedium + " - " + react_theme_1.tokens.lineHeightBase300 + ") / 2)",
        },
        large: {
            marginTop: "calc((" + indicatorSizeLarge + " - " + react_theme_1.tokens.lineHeightBase300 + ") / 2)",
            marginBottom: "calc((" + indicatorSizeLarge + " - " + react_theme_1.tokens.lineHeightBase300 + ") / 2)",
        },
    });
    /**
     * Apply styling to the Checkbox slots based on the state
     */
    var useCheckboxStyles_unstable = function (state) {
        var checked = state.checked, disabled = state.disabled, labelPosition = state.labelPosition, shape = state.shape, size = state.size;
        var rootBaseClassName = useRootBaseClassName();
        var rootStyles = useRootStyles();
        state.root.className = react_1.mergeClasses(exports.checkboxClassNames.root, rootBaseClassName, disabled
            ? rootStyles.disabled
            : checked === 'mixed'
                ? rootStyles.mixed
                : checked
                    ? rootStyles.checked
                    : rootStyles.unchecked, state.root.className);
        var inputBaseClassName = useInputBaseClassName();
        var inputStyles = useInputStyles();
        state.input.className = react_1.mergeClasses(exports.checkboxClassNames.input, inputBaseClassName, size === 'large' && inputStyles.large, inputStyles[labelPosition], state.input.className);
        var indicatorBaseClassName = useIndicatorBaseClassName();
        var indicatorStyles = useIndicatorStyles();
        if (state.indicator) {
            state.indicator.className = react_1.mergeClasses(exports.checkboxClassNames.indicator, indicatorBaseClassName, size === 'large' && indicatorStyles.large, shape === 'circular' && indicatorStyles.circular, state.indicator.className);
        }
        var labelStyles = useLabelStyles();
        if (state.label) {
            state.label.className = react_1.mergeClasses(exports.checkboxClassNames.label, labelStyles.base, labelStyles[size], labelStyles[labelPosition], state.label.className);
        }
        return state;
    };
    exports.useCheckboxStyles_unstable = useCheckboxStyles_unstable;
});
//# sourceMappingURL=useCheckboxStyles.js.map
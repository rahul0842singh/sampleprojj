{"version":3,"mappings":";;;;;;AAAA;AACA;AAGA;AAEA;;;;;AAKO,MAAMA,qBAAqB,GAAG,CAACC,KAAqB,EAAEC,GAA2B,KAAoB;EAC1G,MAAM;IACJC,SAAS,EAAEC,mBAAmB;IAC9BC,gBAAgB;IAChBC,QAAQ,GAAG,KAAK;IAChBC,WAAW,GAAG,KAAK;IACnBC,QAAQ;IACRC;EAAU,CACX,GAAGR,KAAK;EACT,MAAM,CAACE,SAAS,EAAEO,YAAY,CAAC,GAAGC,sCAAoB,CAAC;IACrDC,KAAK,EAAEC,KAAK,CAACC,OAAO,CAAC,MAAMC,eAAe,CAACX,mBAAmB,CAAC,EAAE,CAACA,mBAAmB,CAAC,CAAC;IACvFY,YAAY,EAAE,MAAMC,+BAA+B,CAAC;MAAEZ,gBAAgB;MAAEC;IAAQ,CAAE,CAAC;IACnFY,YAAY,EAAE;GACf,CAAC;EAEF,MAAMC,oBAAoB,GAAGC,uCAAuB,CAAC;IACnDC,QAAQ,EAAEZ,UAAU,KAAK,UAAU;IACnCa,QAAQ,EAAE;GACX,CAAC;EAEF,MAAMC,aAAa,GAAGZ,kCAAgB,CAAC,CAACa,KAA2B,EAAEC,IAAyB,KAAI;IAChGjB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGgB,KAAK,EAAEC,IAAI,CAAC;IACvBf,YAAY,CAACgB,iBAAiB,IAAIC,eAAe,CAACF,IAAI,CAACG,KAAK,EAAEF,iBAAiB,EAAEpB,QAAQ,EAAEC,WAAW,CAAC,CAAC;EAC1G,CAAC,CAAC;EAEF,OAAO;IACLA,WAAW;IACXE,UAAU;IACVN,SAAS;IACToB,aAAa;IACbM,UAAU,EAAE;MACVC,IAAI,EAAE;KACP;IACDA,IAAI,EAAEnB,uCAAqB,CAAC,KAAK,EAAE;MACjC,GAAGV,KAAK;MACR,IAAIQ,UAAU,GAAGU,oBAAoB,GAAG,EAAE,CAAC;MAC3CjB;KACD;GACF;AACH,CAAC;AAvCY6B,6BAAqB;AAyClC;;;AAGA,SAASd,+BAA+B,CAAC;EACvCZ,gBAAgB;EAChBC;AAAQ,CAC8C;EACtD,IAAID,gBAAgB,KAAK2B,SAAS,EAAE;IAClC,IAAIC,KAAK,CAACC,OAAO,CAAC7B,gBAAgB,CAAC,EAAE;MACnC,OAAOC,QAAQ,GAAGD,gBAAgB,GAAG,CAACA,gBAAgB,CAAC,CAAC,CAAC,CAAC;;IAE5D,OAAO,CAACA,gBAAgB,CAAC;;EAE3B,OAAO,EAAE;AACX;AAEA;;;;;;;AAOA,SAASsB,eAAe,CACtBC,KAAyB,EACzBF,iBAAuC,EACvCpB,QAAiB,EACjBC,WAAoB;EAEpB,IAAID,QAAQ,EAAE;IACZ,IAAIoB,iBAAiB,CAACS,QAAQ,CAACP,KAAK,CAAC,EAAE;MACrC,IAAIF,iBAAiB,CAACU,MAAM,GAAG,CAAC,IAAI7B,WAAW,EAAE;QAC/C,OAAOmB,iBAAiB,CAACW,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKV,KAAK,CAAC;;KAEpD,MAAM;MACL,OAAO,CAAC,GAAGF,iBAAiB,EAAEE,KAAK,CAAC,CAACW,IAAI,EAAE;;GAE9C,MAAM;IACL,OAAOb,iBAAiB,CAAC,CAAC,CAAC,KAAKE,KAAK,IAAIrB,WAAW,GAAG,EAAE,GAAG,CAACqB,KAAK,CAAC;;EAErE,OAAOF,iBAAiB;AAC1B;AAEA;;;AAGA,SAASX,eAAe,CAACyB,KAAiD;EACxE,IAAIA,KAAK,KAAKR,SAAS,EAAE;IACvB,OAAOA,SAAS;;EAElB,OAAOC,KAAK,CAACC,OAAO,CAACM,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;AAC/C","names":["useAccordion_unstable","props","ref","openItems","controlledOpenItems","defaultOpenItems","multiple","collapsible","onToggle","navigation","setOpenItems","react_utilities_1","state","React","useMemo","normalizeValues","defaultState","initializeUncontrolledOpenItems","initialState","arrowNavigationProps","react_tabster_1","circular","tabbable","requestToggle","event","data","previousOpenItems","updateOpenItems","value","components","root","exports","undefined","Array","isArray","includes","length","filter","i","sort","index"],"sourceRoot":"../src/","sources":["packages/react-components/react-accordion/src/components/Accordion/useAccordion.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport type { AccordionProps, AccordionState, AccordionToggleData, AccordionToggleEvent } from './Accordion.types';\nimport type { AccordionItemValue } from '../AccordionItem/AccordionItem.types';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n\n/**\n * Returns the props and state required to render the component\n * @param props - Accordion properties\n * @param ref - reference to root HTMLElement of Accordion\n */\nexport const useAccordion_unstable = (props: AccordionProps, ref: React.Ref<HTMLElement>): AccordionState => {\n  const {\n    openItems: controlledOpenItems,\n    defaultOpenItems,\n    multiple = false,\n    collapsible = false,\n    onToggle,\n    navigation,\n  } = props;\n  const [openItems, setOpenItems] = useControllableState({\n    state: React.useMemo(() => normalizeValues(controlledOpenItems), [controlledOpenItems]),\n    defaultState: () => initializeUncontrolledOpenItems({ defaultOpenItems, multiple }),\n    initialState: [],\n  });\n\n  const arrowNavigationProps = useArrowNavigationGroup({\n    circular: navigation === 'circular',\n    tabbable: true,\n  });\n\n  const requestToggle = useEventCallback((event: AccordionToggleEvent, data: AccordionToggleData) => {\n    onToggle?.(event, data);\n    setOpenItems(previousOpenItems => updateOpenItems(data.value, previousOpenItems, multiple, collapsible));\n  });\n\n  return {\n    collapsible,\n    navigation,\n    openItems,\n    requestToggle,\n    components: {\n      root: 'div',\n    },\n    root: getNativeElementProps('div', {\n      ...props,\n      ...(navigation ? arrowNavigationProps : {}),\n      ref,\n    }),\n  };\n};\n\n/**\n * Initial value for the uncontrolled case of the list of open indexes\n */\nfunction initializeUncontrolledOpenItems({\n  defaultOpenItems,\n  multiple,\n}: Pick<AccordionProps, 'defaultOpenItems' | 'multiple'>): AccordionItemValue[] {\n  if (defaultOpenItems !== undefined) {\n    if (Array.isArray(defaultOpenItems)) {\n      return multiple ? defaultOpenItems : [defaultOpenItems[0]];\n    }\n    return [defaultOpenItems];\n  }\n  return [];\n}\n\n/**\n * Updates the list of open indexes based on an index that changes\n * @param value - the index that will change\n * @param previousOpenItems - list of current open indexes\n * @param multiple - if Accordion support multiple Panels opened at the same time\n * @param collapsible - if Accordion support multiple Panels closed at the same time\n */\nfunction updateOpenItems(\n  value: AccordionItemValue,\n  previousOpenItems: AccordionItemValue[],\n  multiple: boolean,\n  collapsible: boolean,\n) {\n  if (multiple) {\n    if (previousOpenItems.includes(value)) {\n      if (previousOpenItems.length > 1 || collapsible) {\n        return previousOpenItems.filter(i => i !== value);\n      }\n    } else {\n      return [...previousOpenItems, value].sort();\n    }\n  } else {\n    return previousOpenItems[0] === value && collapsible ? [] : [value];\n  }\n  return previousOpenItems;\n}\n\n/**\n * Normalizes Accordion index into an array of indexes\n */\nfunction normalizeValues(index?: AccordionItemValue | AccordionItemValue[]): AccordionItemValue[] | undefined {\n  if (index === undefined) {\n    return undefined;\n  }\n  return Array.isArray(index) ? index : [index];\n}\n"]}
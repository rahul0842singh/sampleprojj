{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;AAKO,MAAMA,2BAA2B,GAAG,CACzCC,KAA2B,EAC3BC,GAA2B,KACH;EACxB,MAAM;IAAEC,EAAE;IAAEC,IAAI;IAAEC,MAAM;IAAEC,UAAU;IAAEC,MAAM,GAAG,KAAK;IAAEC,IAAI,GAAG,QAAQ;IAAEC,kBAAkB,GAAG;EAAO,CAAE,GAAGR,KAAK;EAC7G,MAAM;IAAES,aAAa,EAAEC,sBAAsB;IAAEC,QAAQ;IAAEC;EAAI,CAAE,GAAGC,wCAAgC,EAAE;EAEpG;;;;EAIA,MAAMC,iBAAiB,GAAGC,+CAA4B,CAACC,GAAG,IAAI,CAACA,GAAG,CAACC,WAAW,IAAID,GAAG,CAACE,SAAS,CAACC,MAAM,KAAK,CAAC,IAAIP,IAAI,CAAC;EAErH,MAAM;IAAEQ;EAAG,CAAE,GAAGC,0CAAS,EAAE;EAE3B;EACA,IAAIC,kBAAsC;EAC1C,IAAId,kBAAkB,KAAK,KAAK,EAAE;IAChC;IACAc,kBAAkB,GAAGV,IAAI,GAAG,CAAC,EAAE,GAAG,EAAE;GACrC,MAAM;IACL;IACAU,kBAAkB,GAAGV,IAAI,GAAG,EAAE,GAAGQ,GAAG,KAAK,KAAK,GAAG,CAAC,GAAG,GAAG;;EAG1D,MAAMG,eAAe,GAAGC,mCAAsB,CAACpB,MAAM,EAAE;IACrDqB,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE;MACZf,QAAQ;MACRG,iBAAiB;MACjB,eAAe,EAAEF,IAAI;MACrBe,IAAI,EAAE;;GAET,CAAC;EAEF,OAAO;IACLhB,QAAQ;IACRC,IAAI;IACJL,IAAI;IACJD,MAAM;IACNE,kBAAkB;IAClBoB,UAAU,EAAE;MACVC,IAAI,EAAE,KAAK;MACXzB,MAAM,EAAE,QAAQ;MAChBC,UAAU,EAAE,MAAM;MAClBF,IAAI,EAAE;KACP;IACD0B,IAAI,EAAEC,uCAAqB,CAAC5B,EAAE,IAAI,KAAK,EAAE;MACvCD,GAAG;MACH,GAAGD;KACJ,CAAC;IACFG,IAAI,EAAE2B,kCAAgB,CAAC3B,IAAI,CAAC;IAC5BE,UAAU,EAAEyB,kCAAgB,CAACzB,UAAU,EAAE;MACvCoB,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;QACZK,QAAQ,EAAEC,oBAACC,iCAAmB;UAACC,KAAK,EAAE;YAAEC,SAAS,EAAE,UAAUb,kBAAkB;UAAM;QAAE,EAAI;QAC3F,aAAa,EAAE;;KAElB,CAAC;IACFlB,MAAM,EAAE;MACN,GAAGmB,eAAe;MAClBa,OAAO,EAAEN,kCAAgB,CACtBO,EAA8F,IAAI;;QACjG,qBAAe,CAACD,OAAO,+CAAvBb,eAAe,EAAWc,EAAE,CAAC;QAC7B,IAAI,CAACA,EAAE,CAACC,gBAAgB,EAAE;UACxB5B,sBAAsB,CAAC2B,EAAE,CAAC;;MAE9B,CAAC;;GAGN;AACH,CAAC;AAvEYE,mCAA2B","names":["useAccordionHeader_unstable","props","ref","as","icon","button","expandIcon","inline","size","expandIconPosition","onHeaderClick","onAccordionHeaderClick","disabled","open","index_1","disabledFocusable","AccordionContext_1","ctx","collapsible","openItems","length","dir","react_shared_contexts_1","expandIconRotation","buttonShorthand","react_aria_1","required","defaultProps","type","components","root","react_utilities_1","children","React","react_icons_1","style","transform","onClick","ev","defaultPrevented","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-accordion/src/components/AccordionHeader/useAccordionHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useEventCallback } from '@fluentui/react-utilities';\nimport { useAccordionItemContext_unstable } from '../AccordionItem/index';\nimport { useARIAButtonShorthand } from '@fluentui/react-aria';\nimport type { AccordionHeaderProps, AccordionHeaderState } from './AccordionHeader.types';\nimport { useAccordionContext_unstable } from '../Accordion/AccordionContext';\nimport { ChevronRightRegular } from '@fluentui/react-icons';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n\n/**\n * Returns the props and state required to render the component\n * @param props - AccordionHeader properties\n * @param ref - reference to root HTMLElement of AccordionHeader\n */\nexport const useAccordionHeader_unstable = (\n  props: AccordionHeaderProps,\n  ref: React.Ref<HTMLElement>,\n): AccordionHeaderState => {\n  const { as, icon, button, expandIcon, inline = false, size = 'medium', expandIconPosition = 'start' } = props;\n  const { onHeaderClick: onAccordionHeaderClick, disabled, open } = useAccordionItemContext_unstable();\n\n  /**\n   * force disabled state on button if accordion isn't collapsible\n   * and this is the only item opened\n   */\n  const disabledFocusable = useAccordionContext_unstable(ctx => !ctx.collapsible && ctx.openItems.length === 1 && open);\n\n  const { dir } = useFluent();\n\n  // Calculate how to rotate the expand icon [>] (ChevronRightRegular)\n  let expandIconRotation: 0 | 90 | -90 | 180;\n  if (expandIconPosition === 'end') {\n    // If expand icon is at the end, the chevron points up [^] when open, and down [v] when closed\n    expandIconRotation = open ? -90 : 90;\n  } else {\n    // Otherwise, the chevron points down [v] when open, and right [>] (or left [<] in RTL) when closed\n    expandIconRotation = open ? 90 : dir !== 'rtl' ? 0 : 180;\n  }\n\n  const buttonShorthand = useARIAButtonShorthand(button, {\n    required: true,\n    defaultProps: {\n      disabled,\n      disabledFocusable,\n      'aria-expanded': open,\n      type: 'button',\n    },\n  });\n\n  return {\n    disabled,\n    open,\n    size,\n    inline,\n    expandIconPosition,\n    components: {\n      root: 'div',\n      button: 'button',\n      expandIcon: 'span',\n      icon: 'div',\n    },\n    root: getNativeElementProps(as || 'div', {\n      ref,\n      ...props,\n    }),\n    icon: resolveShorthand(icon),\n    expandIcon: resolveShorthand(expandIcon, {\n      required: true,\n      defaultProps: {\n        children: <ChevronRightRegular style={{ transform: `rotate(${expandIconRotation}deg)` }} />,\n        'aria-hidden': true,\n      },\n    }),\n    button: {\n      ...buttonShorthand,\n      onClick: useEventCallback(\n        (ev: React.MouseEvent<HTMLButtonElement & HTMLDivElement & HTMLSpanElement & HTMLAnchorElement>) => {\n          buttonShorthand.onClick?.(ev);\n          if (!ev.defaultPrevented) {\n            onAccordionHeaderClick(ev);\n          }\n        },\n      ),\n    },\n  };\n};\n"]}
{"version":3,"mappings":"AACA,SAASA,wBAAwB,QAAQ,wBAAwB;AACjE,SAASC,0BAA0B,QAAQ,2BAA2B;AAGtE;;;;;;AAMA,OAAO,MAAMC,+BAA+B,GAAG,CAC7CC,KAA+B,EAC/BC,GAAqD,KACzB;EAC5B,MAAMC,kBAAkB,GAAGJ,0BAA0B,CAACK,GAAG,IAAIA,GAAG,CAACD,kBAAkB,CAAC;EACpF,MAAME,OAAO,GAAGN,0BAA0B,CAACK,GAAG,IAAG;IAAA;IAAC,QAAC,EAAC,SAAG,CAACE,aAAa,CAACL,KAAK,CAACM,IAAI,CAAC,0CAAEC,QAAQ,CAACP,KAAK,CAACQ,KAAK,CAAC;EAAA,EAAC;EACzG,MAAMC,IAAI,GAAGX,0BAA0B,CAACK,GAAG,IAAIA,GAAG,CAACM,IAAI,CAAC;EAExD,MAAM;IAAEC,OAAO,EAAEC;EAAe,CAAE,GAAGX,KAAK;EAC1C,MAAMY,iBAAiB,GAAGf,wBAAwB,CAAC;IAAEY,IAAI;IAAEL,OAAO;IAAE,GAAGJ;EAAK,CAAE,EAAEC,GAAG,CAAC;EACpF,MAAMY,KAAK,GAA6B;IACtC,GAAGD,iBAAiB;IACpBN,IAAI,EAAEN,KAAK,CAACM,IAAI;IAChBE,KAAK,EAAER,KAAK,CAACQ;GACd;EAED,MAAMM,aAAa,GACjBC,CAAoG,IAClG;IACF,IAAIF,KAAK,CAACG,QAAQ,EAAE;MAClBD,CAAC,CAACE,cAAc,EAAE;MAClBF,CAAC,CAACG,eAAe,EAAE;MACnB;;IAGFhB,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAGa,CAAC,EAAEF,KAAK,CAACP,IAAI,EAAEO,KAAK,CAACL,KAAK,EAAEK,KAAK,CAACT,OAAO,CAAC;IAC/DO,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAGI,CAAC,CAAC;EACtB,CAAC;EAEDF,KAAK,CAACM,IAAI,CAACT,OAAO,GAAGI,aAAa;EAClC,OAAOD,KAAK;AACd,CAAC","names":["useToggleButton_unstable","useToolbarContext_unstable","useToolbarToggleButton_unstable","props","ref","handleToggleButton","ctx","checked","checkedValues","name","includes","value","size","onClick","onClickOriginal","toggleButtonState","state","handleOnClick","e","disabled","preventDefault","stopPropagation","root"],"sourceRoot":"../src/","sources":["packages/react-components/react-toolbar/src/components/ToolbarToggleButton/useToolbarToggleButton.ts"],"sourcesContent":["import * as React from 'react';\nimport { useToggleButton_unstable } from '@fluentui/react-button';\nimport { useToolbarContext_unstable } from '../Toolbar/ToolbarContext';\nimport { ToolbarToggleButtonProps, ToolbarToggleButtonState } from './ToolbarToggleButton.types';\n\n/**\n * Given user props, defines default props for the ToggleButton, calls useButtonState and useChecked, and returns\n * processed state.\n * @param props - User provided props to the ToggleButton component.\n * @param ref - User provided ref to be passed to the ToggleButton component.\n */\nexport const useToolbarToggleButton_unstable = (\n  props: ToolbarToggleButtonProps,\n  ref: React.Ref<HTMLButtonElement | HTMLAnchorElement>,\n): ToolbarToggleButtonState => {\n  const handleToggleButton = useToolbarContext_unstable(ctx => ctx.handleToggleButton);\n  const checked = useToolbarContext_unstable(ctx => !!ctx.checkedValues[props.name]?.includes(props.value));\n  const size = useToolbarContext_unstable(ctx => ctx.size);\n\n  const { onClick: onClickOriginal } = props;\n  const toggleButtonState = useToggleButton_unstable({ size, checked, ...props }, ref);\n  const state: ToolbarToggleButtonState = {\n    ...toggleButtonState,\n    name: props.name,\n    value: props.value,\n  };\n\n  const handleOnClick = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent> & React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n  ) => {\n    if (state.disabled) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n\n    handleToggleButton?.(e, state.name, state.value, state.checked);\n    onClickOriginal?.(e);\n  };\n\n  state.root.onClick = handleOnClick;\n  return state;\n};\n"]}
{"version":3,"file":"useToolbarRadioButton.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-toolbar/src/components/ToolbarRadioButton/useToolbarRadioButton.ts"],"names":[],"mappings":";;;;IAMA;;;;;OAKG;IACI,IAAM,8BAA8B,GAAG,UAC5C,KAA8B,EAC9B,GAAqD;QAErD,IAAM,WAAW,GAAG,2CAA0B,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,WAAW,EAAf,CAAe,CAAC,CAAC;QACvE,IAAM,OAAO,GAAG,2CAA0B,CAAC,UAAA,GAAG,YAAI,OAAA,CAAC,CAAC,CAAA,MAAA,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,0CAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA,CAAA,EAAA,CAAC,CAAC;QAC1G,IAAM,IAAI,GAAG,2CAA0B,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAR,CAAQ,CAAC,CAAC;QAEjD,IAAS,eAAe,GAAK,KAAK,QAAV,CAAW;QAC3C,IAAM,iBAAiB,GAAG,uCAAwB,oBAC9C,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,IAAI,EAAE,OAAO,EAAE,cAAc,EAAE,OAAO,IAAK,KAAK,GACjE,GAAG,CACJ,CAAC;QACF,IAAM,KAAK,yCACN,iBAAiB,KACpB,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,GACnB,CAAC;QAEF,IAAM,aAAa,GAAG,kCAAgB,CACpC,UAAC,CAAoG;YACnG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAG,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YACzD,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,CAAC,CAAC,CAAC;QACvB,CAAC,CACF,CAAC;QACF,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC;QACvC,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC;QACnC,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IA5BW,QAAA,8BAA8B,kCA4BzC","sourcesContent":["import * as React from 'react';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport { useToggleButton_unstable } from '@fluentui/react-button';\nimport { useToolbarContext_unstable } from '../Toolbar/ToolbarContext';\nimport { ToolbarRadioButtonProps, ToolbarRadioButtonState } from './ToolbarRadioButton.types';\n\n/**\n * Given user props, defines default props for the RadioButton, calls useButtonState and useChecked, and returns\n * processed state.\n * @param props - User provided props to the RadioButton component.\n * @param ref - User provided ref to be passed to the RadioButton component.\n */\nexport const useToolbarRadioButton_unstable = (\n  props: ToolbarRadioButtonProps,\n  ref: React.Ref<HTMLButtonElement | HTMLAnchorElement>,\n): ToolbarRadioButtonState => {\n  const handleRadio = useToolbarContext_unstable(ctx => ctx.handleRadio);\n  const checked = useToolbarContext_unstable(ctx => !!ctx.checkedValues[props.name]?.includes(props.value));\n  const size = useToolbarContext_unstable(ctx => ctx.size);\n\n  const { onClick: onClickOriginal } = props;\n  const toggleButtonState = useToggleButton_unstable(\n    { size, checked, role: 'radio', 'aria-checked': checked, ...props },\n    ref,\n  );\n  const state: ToolbarRadioButtonState = {\n    ...toggleButtonState,\n    name: props.name,\n    value: props.value,\n  };\n\n  const handleOnClick = useEventCallback(\n    (e: React.MouseEvent<HTMLButtonElement, MouseEvent> & React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n      handleRadio?.(e, state.name, state.value, state.checked);\n      onClickOriginal?.(e);\n    },\n  );\n  state.root['aria-pressed'] = undefined;\n  state.root.onClick = handleOnClick;\n  return state;\n};\n"]}
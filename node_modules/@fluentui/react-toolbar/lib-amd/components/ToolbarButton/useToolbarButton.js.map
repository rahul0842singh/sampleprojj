{"version":3,"file":"useToolbarButton.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-toolbar/src/components/ToolbarButton/useToolbarButton.ts"],"names":[],"mappings":";;;;IAIA;;;;;OAKG;IACI,IAAM,yBAAyB,GAAG,UACvC,KAAyB,EACzB,GAAqD;QAE7C,IAAA,KAAqC,KAAK,SAA1B,EAAhB,QAAQ,mBAAG,KAAK,KAAA,EAAK,WAAW,kBAAK,KAAK,EAA5C,YAAoC,CAAF,CAAW;QACnD,IAAM,KAAK,GAAG,iCAAkB,oBAAG,UAAU,EAAE,QAAQ,IAAK,WAAW,GAAI,GAAG,CAAC,CAAC;QAChF,0BACE,QAAQ,UAAA,IACL,KAAK,EACR;IACJ,CAAC,CAAC;IAVW,QAAA,yBAAyB,6BAUpC","sourcesContent":["import * as React from 'react';\nimport { useButton_unstable } from '@fluentui/react-button';\nimport { ToolbarButtonProps, ToolbarButtonState } from './ToolbarButton.types';\n\n/**\n * Given user props, defines default props for the Button, calls useButtonState and useChecked, and returns\n * processed state.\n * @param props - User provided props to the Button component.\n * @param ref - User provided ref to be passed to the Button component.\n */\nexport const useToolbarButton_unstable = (\n  props: ToolbarButtonProps,\n  ref: React.Ref<HTMLButtonElement | HTMLAnchorElement>,\n): ToolbarButtonState => {\n  const { vertical = false, ...buttonProps } = props;\n  const state = useButton_unstable({ appearance: 'subtle', ...buttonProps }, ref);\n  return {\n    vertical,\n    ...state,\n  };\n};\n"]}
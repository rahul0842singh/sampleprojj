{"version":3,"file":"useToolbar.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-toolbar/src/components/Toolbar/useToolbar.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEventCallback, useControllableState } from '@fluentui/react-utilities';\nimport { getNativeElementProps } from '@fluentui/react-utilities';\nimport type { ToggableHandler, ToolbarProps, ToolbarState, UninitializedToolbarState } from './Toolbar.types';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n\n/**\n * Create the state required to render Toolbar.\n *\n * The returned state can be modified with hooks such as useToolbarStyles_unstable,\n * before being passed to renderToolbar_unstable.\n *\n * @param props - props from this instance of Toolbar\n * @param ref - reference to root HTMLElement of Toolbar\n */\nexport const useToolbar_unstable = (props: ToolbarProps, ref: React.Ref<HTMLElement>): ToolbarState => {\n  const { size = 'medium', vertical = false } = props;\n\n  const arrowNavigationProps = useArrowNavigationGroup({\n    circular: true,\n    axis: 'both',\n  });\n\n  const initialState: UninitializedToolbarState = {\n    size,\n    vertical,\n    // TODO add appropriate props/defaults\n    components: {\n      // TODO add each slot's element type or component\n      root: 'div',\n    },\n    // TODO add appropriate slots, for example:\n    // mySlot: resolveShorthand(props.mySlot),\n    root: getNativeElementProps('div', {\n      role: 'toolbar',\n      ref,\n      ...(vertical && { 'aria-orientation': 'vertical' }),\n      ...arrowNavigationProps,\n      ...props,\n    }),\n  };\n\n  const [checkedValues, onCheckedValueChange] = useToolbarSelectableState({\n    checkedValues: props.checkedValues,\n    defaultCheckedValues: props.defaultCheckedValues,\n    onCheckedValueChange: props.onCheckedValueChange,\n  });\n\n  const handleToggleButton: ToggableHandler = useEventCallback(\n    (e: React.MouseEvent | React.KeyboardEvent, name: string, value: string, checked?: boolean) => {\n      if (name && value) {\n        const checkedItems = checkedValues?.[name] || [];\n        const newCheckedItems = [...checkedItems];\n        if (checked) {\n          newCheckedItems.splice(newCheckedItems.indexOf(value), 1);\n        } else {\n          newCheckedItems.push(value);\n        }\n        onCheckedValueChange?.(e, { name, checkedItems: newCheckedItems });\n      }\n    },\n  );\n\n  const handleRadio: ToggableHandler = useEventCallback(\n    (e: React.MouseEvent | React.KeyboardEvent, name: string, value: string, checked?: boolean) => {\n      if (name && value) {\n        onCheckedValueChange?.(e, {\n          name,\n          checkedItems: [value],\n        });\n      }\n    },\n  );\n\n  return {\n    ...initialState,\n    handleToggleButton,\n    handleRadio,\n    checkedValues: checkedValues ?? {},\n  };\n};\n\n/**\n * Adds appropriate state values and handlers for selectable items\n * i.e checkboxes and radios\n */\nconst useToolbarSelectableState = (\n  state: Pick<ToolbarProps, 'checkedValues' | 'defaultCheckedValues' | 'onCheckedValueChange'>,\n) => {\n  const [checkedValues, setCheckedValues] = useControllableState({\n    state: state.checkedValues,\n    defaultState: state.defaultCheckedValues,\n    initialState: {},\n  });\n  const { onCheckedValueChange: onCheckedValueChangeOriginal } = state;\n  const onCheckedValueChange: ToolbarState['onCheckedValueChange'] = useEventCallback((e, { name, checkedItems }) => {\n    if (onCheckedValueChangeOriginal) {\n      onCheckedValueChangeOriginal(e, { name, checkedItems });\n    }\n\n    setCheckedValues(s => {\n      return s ? { ...s, [name]: checkedItems } : { [name]: checkedItems };\n    });\n  });\n\n  return [checkedValues, onCheckedValueChange] as const;\n};\n"]}
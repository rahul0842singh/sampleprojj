define(["require", "exports", "tslib", "@fluentui/react-utilities", "@fluentui/react-utilities", "@fluentui/react-tabster"], function (require, exports, tslib_1, react_utilities_1, react_utilities_2, react_tabster_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useToolbar_unstable = void 0;
    /**
     * Create the state required to render Toolbar.
     *
     * The returned state can be modified with hooks such as useToolbarStyles_unstable,
     * before being passed to renderToolbar_unstable.
     *
     * @param props - props from this instance of Toolbar
     * @param ref - reference to root HTMLElement of Toolbar
     */
    var useToolbar_unstable = function (props, ref) {
        var _a = props.size, size = _a === void 0 ? 'medium' : _a, _b = props.vertical, vertical = _b === void 0 ? false : _b;
        var arrowNavigationProps = react_tabster_1.useArrowNavigationGroup({
            circular: true,
            axis: 'both',
        });
        var initialState = {
            size: size,
            vertical: vertical,
            // TODO add appropriate props/defaults
            components: {
                // TODO add each slot's element type or component
                root: 'div',
            },
            // TODO add appropriate slots, for example:
            // mySlot: resolveShorthand(props.mySlot),
            root: react_utilities_2.getNativeElementProps('div', tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ role: 'toolbar', ref: ref }, (vertical && { 'aria-orientation': 'vertical' })), arrowNavigationProps), props)),
        };
        var _c = useToolbarSelectableState({
            checkedValues: props.checkedValues,
            defaultCheckedValues: props.defaultCheckedValues,
            onCheckedValueChange: props.onCheckedValueChange,
        }), checkedValues = _c[0], onCheckedValueChange = _c[1];
        var handleToggleButton = react_utilities_1.useEventCallback(function (e, name, value, checked) {
            if (name && value) {
                var checkedItems = (checkedValues === null || checkedValues === void 0 ? void 0 : checkedValues[name]) || [];
                var newCheckedItems = tslib_1.__spreadArray([], checkedItems);
                if (checked) {
                    newCheckedItems.splice(newCheckedItems.indexOf(value), 1);
                }
                else {
                    newCheckedItems.push(value);
                }
                onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, { name: name, checkedItems: newCheckedItems });
            }
        });
        var handleRadio = react_utilities_1.useEventCallback(function (e, name, value, checked) {
            if (name && value) {
                onCheckedValueChange === null || onCheckedValueChange === void 0 ? void 0 : onCheckedValueChange(e, {
                    name: name,
                    checkedItems: [value],
                });
            }
        });
        return tslib_1.__assign(tslib_1.__assign({}, initialState), { handleToggleButton: handleToggleButton, handleRadio: handleRadio, checkedValues: checkedValues !== null && checkedValues !== void 0 ? checkedValues : {} });
    };
    exports.useToolbar_unstable = useToolbar_unstable;
    /**
     * Adds appropriate state values and handlers for selectable items
     * i.e checkboxes and radios
     */
    var useToolbarSelectableState = function (state) {
        var _a = react_utilities_1.useControllableState({
            state: state.checkedValues,
            defaultState: state.defaultCheckedValues,
            initialState: {},
        }), checkedValues = _a[0], setCheckedValues = _a[1];
        var onCheckedValueChangeOriginal = state.onCheckedValueChange;
        var onCheckedValueChange = react_utilities_1.useEventCallback(function (e, _a) {
            var name = _a.name, checkedItems = _a.checkedItems;
            if (onCheckedValueChangeOriginal) {
                onCheckedValueChangeOriginal(e, { name: name, checkedItems: checkedItems });
            }
            setCheckedValues(function (s) {
                var _a, _b;
                return s ? tslib_1.__assign(tslib_1.__assign({}, s), (_a = {}, _a[name] = checkedItems, _a)) : (_b = {}, _b[name] = checkedItems, _b);
            });
        });
        return [checkedValues, onCheckedValueChange];
    };
});
//# sourceMappingURL=useToolbar.js.map
{"version":3,"file":"useToolbarToggleButton.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-toolbar/src/components/ToolbarToggleButton/useToolbarToggleButton.ts"],"names":[],"mappings":";;;;IAKA;;;;;OAKG;IACI,IAAM,+BAA+B,GAAG,UAC7C,KAA+B,EAC/B,GAAqD;QAErD,IAAM,kBAAkB,GAAG,2CAA0B,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,kBAAkB,EAAtB,CAAsB,CAAC,CAAC;QACrF,IAAM,OAAO,GAAG,2CAA0B,CAAC,UAAA,GAAG,YAAI,OAAA,CAAC,CAAC,CAAA,MAAA,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,0CAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA,CAAA,EAAA,CAAC,CAAC;QAC1G,IAAM,IAAI,GAAG,2CAA0B,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAR,CAAQ,CAAC,CAAC;QAEjD,IAAS,eAAe,GAAK,KAAK,QAAV,CAAW;QAC3C,IAAM,iBAAiB,GAAG,uCAAwB,oBAAG,IAAI,MAAA,EAAE,OAAO,SAAA,IAAK,KAAK,GAAI,GAAG,CAAC,CAAC;QACrF,IAAM,KAAK,yCACN,iBAAiB,KACpB,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,KAAK,EAAE,KAAK,CAAC,KAAK,GACnB,CAAC;QAEF,IAAM,aAAa,GAAG,UACpB,CAAoG;YAEpG,IAAI,KAAK,CAAC,QAAQ,EAAE;gBAClB,CAAC,CAAC,cAAc,EAAE,CAAC;gBACnB,CAAC,CAAC,eAAe,EAAE,CAAC;gBACpB,OAAO;aACR;YAED,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAG,CAAC,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAChE,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,CAAC,CAAC,CAAC;QACvB,CAAC,CAAC;QAEF,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC;QACnC,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;IA/BW,QAAA,+BAA+B,mCA+B1C","sourcesContent":["import * as React from 'react';\nimport { useToggleButton_unstable } from '@fluentui/react-button';\nimport { useToolbarContext_unstable } from '../Toolbar/ToolbarContext';\nimport { ToolbarToggleButtonProps, ToolbarToggleButtonState } from './ToolbarToggleButton.types';\n\n/**\n * Given user props, defines default props for the ToggleButton, calls useButtonState and useChecked, and returns\n * processed state.\n * @param props - User provided props to the ToggleButton component.\n * @param ref - User provided ref to be passed to the ToggleButton component.\n */\nexport const useToolbarToggleButton_unstable = (\n  props: ToolbarToggleButtonProps,\n  ref: React.Ref<HTMLButtonElement | HTMLAnchorElement>,\n): ToolbarToggleButtonState => {\n  const handleToggleButton = useToolbarContext_unstable(ctx => ctx.handleToggleButton);\n  const checked = useToolbarContext_unstable(ctx => !!ctx.checkedValues[props.name]?.includes(props.value));\n  const size = useToolbarContext_unstable(ctx => ctx.size);\n\n  const { onClick: onClickOriginal } = props;\n  const toggleButtonState = useToggleButton_unstable({ size, checked, ...props }, ref);\n  const state: ToolbarToggleButtonState = {\n    ...toggleButtonState,\n    name: props.name,\n    value: props.value,\n  };\n\n  const handleOnClick = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent> & React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n  ) => {\n    if (state.disabled) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n\n    handleToggleButton?.(e, state.name, state.value, state.checked);\n    onClickOriginal?.(e);\n  };\n\n  state.root.onClick = handleOnClick;\n  return state;\n};\n"]}
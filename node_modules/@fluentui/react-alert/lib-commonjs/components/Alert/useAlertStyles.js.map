{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAIaA,uBAAe,GAA+B;EACzDC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,iBAAiB;EACvBC,MAAM,EAAE,mBAAmB;EAC3BC,MAAM,EAAE;CACT;AAED,MAAMC,SAAS,gBAAGC,gBAAU;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;AAAA;EAAA;AAAA,EAgC1B;AAEF,MAAMC,mBAAmB,gBAAGD,gBAAU;EAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;EAAA;AAAA;EAAA;AAAA,EAapC;AAEF,MAAME,2BAA2B,gBAAGF,gBAAU;EAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;EAAA;AAAA;EAAA;AAAA,EAa5C;AAEF,MAAMG,4BAA4B,gBAAGH,gBAAU;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;AAAA;EAAA;AAAA,EAW7C;AAEF;;;AAGO,MAAMI,uBAAuB,GAAIC,KAAiB,IAAgB;EACvE,MAAMC,QAAQ,GAAGD,KAAK,CAACE,UAAU,KAAK,UAAU;EAChD,MAAMC,MAAM,GAAGT,SAAS,EAAE;EAC1B,MAAMU,uBAAuB,GAAGR,mBAAmB,EAAE;EACrD,MAAMS,wBAAwB,GAAGR,2BAA2B,EAAE;EAC9D,MAAMS,oBAAoB,GAAGR,4BAA4B,EAAE;EAE3DE,KAAK,CAACV,IAAI,CAACiB,SAAS,GAAGZ,oBAAY,CACjCN,uBAAe,CAACC,IAAI,EACpBa,MAAM,CAACb,IAAI,EACXW,QAAQ,IAAIE,MAAM,CAACF,QAAQ,EAC3BD,KAAK,CAACV,IAAI,CAACiB,SAAS,CACrB;EAED,IAAIP,KAAK,CAACT,IAAI,EAAE;IACdS,KAAK,CAACT,IAAI,CAACgB,SAAS,GAAGZ,oBAAY,CACjCN,uBAAe,CAACE,IAAI,EACpBY,MAAM,CAACZ,IAAI,EACXS,KAAK,CAACQ,MAAM,KAAKP,QAAQ,GAAGI,wBAAwB,CAACL,KAAK,CAACQ,MAAM,CAAC,GAAGJ,uBAAuB,CAACJ,KAAK,CAACQ,MAAM,CAAC,CAAC,EAC3GR,KAAK,CAACT,IAAI,CAACgB,SAAS,CACrB;;EAGH,IAAIP,KAAK,CAACP,MAAM,EAAE;IAChBO,KAAK,CAACP,MAAM,CAACc,SAAS,GAAGZ,oBAAY,CAACN,uBAAe,CAACI,MAAM,EAAEU,MAAM,CAACV,MAAM,EAAEO,KAAK,CAACP,MAAM,CAACc,SAAS,CAAC;;EAGtG,IAAIP,KAAK,CAACR,MAAM,EAAE;IAChB;IACAQ,KAAK,CAACR,MAAM,CAACe,SAAS,GAAGZ,oBAAY,CACnCN,uBAAe,CAACG,MAAM,EACtBW,MAAM,CAACX,MAAM,EACbS,QAAQ,IAAIK,oBAAoB,CAACd,MAAM,EACvCQ,KAAK,CAACR,MAAM,CAACe,SAAS,CACvB;;EAGH,OAAOP,KAAK;AACd,CAAC;AAtCYX,+BAAuB","names":["exports","root","icon","action","avatar","useStyles","react_1","useIntentIconStyles","useIntentIconStylesInverted","useActionButtonColorInverted","useAlertStyles_unstable","state","inverted","appearance","styles","intentIconStylesPrimary","intentIconStylesInverted","actionStylesInverted","className","intent"],"sourceRoot":"../src/","sources":["packages/react-components/react-alert/src/components/Alert/useAlertStyles.ts"],"sourcesContent":["import { tokens } from '@fluentui/react-theme';\nimport { makeStyles, mergeClasses, shorthands } from '@griffel/react';\nimport { createCustomFocusIndicatorStyle } from '@fluentui/react-tabster';\nimport type { AlertSlots, AlertState } from './Alert.types';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\nexport const alertClassNames: SlotClassNames<AlertSlots> = {\n  root: 'fui-Alert',\n  icon: 'fui-Alert__icon',\n  action: 'fui-Alert__action',\n  avatar: 'fui-Alert__avatar',\n};\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    minHeight: '44px',\n    ...shorthands.padding('0', '12px'),\n    ...shorthands.borderRadius('4px'),\n    ...shorthands.border('1px', 'solid', tokens.colorTransparentStroke),\n    boxShadow: tokens.shadow8,\n    fontSize: tokens.fontSizeBase300,\n    fontWeight: tokens.fontWeightSemibold,\n    color: tokens.colorNeutralForeground1,\n    backgroundColor: tokens.colorNeutralBackground1,\n  },\n  inverted: {\n    color: tokens.colorNeutralForegroundInverted2,\n    backgroundColor: tokens.colorNeutralBackgroundInverted,\n  },\n  icon: {\n    height: '16px',\n    fontSize: '16px',\n    ...shorthands.padding('0', '8px', '0', '0'),\n  },\n  avatar: {\n    ...shorthands.margin('0', '8px', '0', '0'),\n  },\n  action: {\n    ...shorthands.padding('5px', '10px'),\n    minWidth: 0,\n    marginLeft: 'auto',\n    color: tokens.colorBrandForeground1,\n  },\n});\n\nconst useIntentIconStyles = makeStyles({\n  success: {\n    color: tokens.colorPaletteGreenForeground3,\n  },\n  error: {\n    color: tokens.colorPaletteRedForeground3,\n  },\n  warning: {\n    color: tokens.colorPaletteYellowForeground2,\n  },\n  info: {\n    color: tokens.colorNeutralForeground2,\n  },\n});\n\nconst useIntentIconStylesInverted = makeStyles({\n  success: {\n    color: tokens.colorPaletteGreenForegroundInverted,\n  },\n  error: {\n    color: tokens.colorPaletteRedForegroundInverted,\n  },\n  warning: {\n    color: tokens.colorPaletteYellowForegroundInverted,\n  },\n  info: {\n    color: tokens.colorNeutralForegroundInverted2,\n  },\n});\n\nconst useActionButtonColorInverted = makeStyles({\n  action: {\n    color: tokens.colorBrandForegroundInverted,\n    ...createCustomFocusIndicatorStyle(\n      {\n        ...shorthands.borderColor(tokens.colorTransparentStrokeInteractive),\n        outlineColor: tokens.colorNeutralBackground5Pressed,\n      },\n      { enableOutline: true },\n    ),\n  },\n});\n\n/**\n * Apply styling to the Alert slots based on the state\n */\nexport const useAlertStyles_unstable = (state: AlertState): AlertState => {\n  const inverted = state.appearance === 'inverted';\n  const styles = useStyles();\n  const intentIconStylesPrimary = useIntentIconStyles();\n  const intentIconStylesInverted = useIntentIconStylesInverted();\n  const actionStylesInverted = useActionButtonColorInverted();\n\n  state.root.className = mergeClasses(\n    alertClassNames.root,\n    styles.root,\n    inverted && styles.inverted,\n    state.root.className,\n  );\n\n  if (state.icon) {\n    state.icon.className = mergeClasses(\n      alertClassNames.icon,\n      styles.icon,\n      state.intent && (inverted ? intentIconStylesInverted[state.intent] : intentIconStylesPrimary[state.intent]),\n      state.icon.className,\n    );\n  }\n\n  if (state.avatar) {\n    state.avatar.className = mergeClasses(alertClassNames.avatar, styles.avatar, state.avatar.className);\n  }\n\n  if (state.action) {\n    // Note: inverted && actionStylesInverted.action has the highest piority and must be merged last\n    state.action.className = mergeClasses(\n      alertClassNames.action,\n      styles.action,\n      inverted && actionStylesInverted.action,\n      state.action.className,\n    );\n  }\n\n  return state;\n};\n"]}
{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,qBAAqB,EAAEC,mBAAmB,EAAEC,UAAU,EAAEC,aAAa,QAAQ,uBAAuB;AAC7G,SAASC,qBAAqB,EAAEC,gBAAgB,QAAQ,2BAA2B;AAInF;;;;;;;;;AASA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,KAAiB,EAAEC,GAA2B,KAAgB;EAC9F,MAAM;IAAEC,UAAU,GAAG,SAAS;IAAEC;EAAM,CAAE,GAAGH,KAAK;EAEhD;EACA,IAAII,WAAW;EACf,IAAIC,WAAW,GAAG,QAAQ;EAC1B,QAAQF,MAAM;IACZ,KAAK,SAAS;MACZC,WAAW,gBAAGd,oBAACG,qBAAqB,OAAG;MACvC;IACF,KAAK,OAAO;MACVW,WAAW,gBAAGd,oBAACI,mBAAmB,OAAG;MACrCW,WAAW,GAAG,OAAO;MACrB;IACF,KAAK,SAAS;MACZD,WAAW,gBAAGd,oBAACM,aAAa,OAAG;MAC/BS,WAAW,GAAG,OAAO;MACrB;IACF,KAAK,MAAM;MACTD,WAAW,gBAAGd,oBAACK,UAAU,OAAG;MAC5B;EAAM;EAGV,MAAMW,MAAM,GAAGR,gBAAgB,CAACE,KAAK,CAACM,MAAM,EAAE;IAAEC,YAAY,EAAE;MAAEL,UAAU,EAAE;IAAa;EAAE,CAAE,CAAC;EAC9F,MAAMM,MAAM,GAAGV,gBAAgB,CAACE,KAAK,CAACQ,MAAM,CAAC;EAC7C,IAAIC,IAAI;EACR;EACA,IAAI,CAACD,MAAM,EAAE;IACXC,IAAI,GAAGX,gBAAgB,CAACE,KAAK,CAACS,IAAI,EAAE;MAClCF,YAAY,EAAE;QACZG,QAAQ,EAAEN;OACX;MACDO,QAAQ,EAAE,CAAC,CAACX,KAAK,CAACG;KACnB,CAAC;;EAGJ,OAAO;IACLG,MAAM;IACNJ,UAAU;IACVM,MAAM;IACNI,UAAU,EAAE;MACVC,IAAI,EAAE,KAAK;MACXJ,IAAI,EAAE,MAAM;MACZH,MAAM,EAAEd,MAAM;MACdgB,MAAM,EAAEjB;KACT;IACDkB,IAAI;IACJN,MAAM;IACNU,IAAI,EAAEhB,qBAAqB,CAAC,KAAK,EAAE;MACjCI,GAAG;MACHa,IAAI,EAAET,WAAW;MACjBK,QAAQ,EAAEV,KAAK,CAACU,QAAQ;MACxB,GAAGV;KACJ;GACF;AACH,CAAC","names":["React","Avatar","Button","CheckmarkCircleFilled","DismissCircleFilled","InfoFilled","WarningFilled","getNativeElementProps","resolveShorthand","useAlert_unstable","props","ref","appearance","intent","defaultIcon","defaultRole","action","defaultProps","avatar","icon","children","required","components","root","role"],"sourceRoot":"../src/","sources":["packages/react-components/react-alert/src/components/Alert/useAlert.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Avatar } from '@fluentui/react-avatar';\nimport { Button } from '@fluentui/react-button';\nimport { CheckmarkCircleFilled, DismissCircleFilled, InfoFilled, WarningFilled } from '@fluentui/react-icons';\nimport { getNativeElementProps, resolveShorthand } from '@fluentui/react-utilities';\n\nimport type { AlertProps, AlertState } from './Alert.types';\n\n/**\n * Create the state required to render Alert.\n *\n * The returned state can be modified with hooks such as useAlertStyles_unstable,\n * before being passed to renderAlert_unstable.\n *\n * @param props - props from this instance of Alert\n * @param ref - reference to root HTMLElement of Alert\n */\nexport const useAlert_unstable = (props: AlertProps, ref: React.Ref<HTMLElement>): AlertState => {\n  const { appearance = 'primary', intent } = props;\n\n  /** Determine the role and icon to render based on the intent */\n  let defaultIcon;\n  let defaultRole = 'status';\n  switch (intent) {\n    case 'success':\n      defaultIcon = <CheckmarkCircleFilled />;\n      break;\n    case 'error':\n      defaultIcon = <DismissCircleFilled />;\n      defaultRole = 'alert';\n      break;\n    case 'warning':\n      defaultIcon = <WarningFilled />;\n      defaultRole = 'alert';\n      break;\n    case 'info':\n      defaultIcon = <InfoFilled />;\n      break;\n  }\n\n  const action = resolveShorthand(props.action, { defaultProps: { appearance: 'transparent' } });\n  const avatar = resolveShorthand(props.avatar);\n  let icon;\n  /** Avatar prop takes precedence over the icon or intent prop */\n  if (!avatar) {\n    icon = resolveShorthand(props.icon, {\n      defaultProps: {\n        children: defaultIcon,\n      },\n      required: !!props.intent,\n    });\n  }\n\n  return {\n    action,\n    appearance,\n    avatar,\n    components: {\n      root: 'div',\n      icon: 'span',\n      action: Button,\n      avatar: Avatar,\n    },\n    icon,\n    intent,\n    root: getNativeElementProps('div', {\n      ref,\n      role: defaultRole,\n      children: props.children,\n      ...props,\n    }),\n  };\n};\n"]}
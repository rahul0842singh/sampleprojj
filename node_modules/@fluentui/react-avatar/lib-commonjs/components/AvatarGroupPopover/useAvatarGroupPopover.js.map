{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AAQO,MAAMA,8BAA8B,GAAIC,KAA8B,IAA6B;;EACxG,MAAMC,IAAI,GAAG,yDAA8B,CAACC,GAAG,IAAIA,GAAG,CAACD,IAAI,CAAC,mCAAIE,uCAAsB;EACtF,MAAMC,MAAM,GAAGC,mDAA8B,CAACH,GAAG,IAAIA,GAAG,CAACE,MAAM,CAAC;EAChE,MAAM;IACJE,SAAS,GAAGL,IAAI,GAAG,EAAE,GAAG,MAAM,GAAG,OAAO;IACxCM,KAAK,GAAGC,KAAK,CAACC,QAAQ,CAACF,KAAK,CAACP,KAAK,CAACU,QAAQ,CAAC;IAC5CA,QAAQ;IACR,GAAGC;EAAW,CACf,GAAGX,KAAK;EAET,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGC,sCAAoB,CAAC;IACzDC,KAAK,EAAEf,KAAK,CAACgB,IAAI;IACjBC,YAAY,EAAEjB,KAAK,CAACkB,WAAW;IAC/BC,YAAY,EAAE;GACf,CAAC;EAEF,MAAMC,qBAAqB,GAAG,CAACC,CAAoB,EAAEC,IAAsB,KAAI;;IAC7E,iBAAW,CAACC,YAAY,+CAAxBZ,WAAW,EAAgBU,CAAC,EAAEC,IAAI,CAAC;IACnCT,cAAc,CAACS,IAAI,CAACN,IAAI,CAAC;EAC3B,CAAC;EAED,IAAIQ,qBAAqB;EACzB,IAAIpB,MAAM,KAAK,KAAK,EAAE;IACpBoB,qBAAqB,GAAG,IAAI;GAC7B,MAAM,IAAIlB,SAAS,KAAK,MAAM,EAAE;IAC/BkB,qBAAqB,GAAGhB,oBAACiB,mCAAqB,OAAG;GAClD,MAAM;IACLD,qBAAqB,GAAGjB,KAAK,GAAG,EAAE,GAAG,KAAK,GAAG,IAAIA,KAAK,EAAE;;EAG1D,OAAO;IACLA,KAAK;IACLD,SAAS;IACTF,MAAM;IACNQ,WAAW;IACXX,IAAI;IAEJyB,UAAU,EAAE;MACVC,IAAI,EAAEC,uBAAO;MACbC,aAAa,EAAE,QAAQ;MACvBC,OAAO,EAAE,IAAI;MACbC,cAAc,EAAEH,8BAAc;MAC9BI,OAAO,EAAEC;KACV;IACDN,IAAI,EAAE;MACJ;MACAjB,QAAQ,EAAEF,yCAAK;MACfP,IAAI,EAAE,OAAO;MACbiC,SAAS,EAAE,IAAI;MACf,GAAGvB,WAAW;MACdK,IAAI,EAAEJ,WAAW;MACjBW,YAAY,EAAEH;KACf;IACDS,aAAa,EAAEf,kCAAgB,CAACd,KAAK,CAAC6B,aAAa,EAAE;MACnDM,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;QACZ1B,QAAQ,EAAEc,qBAAqB;QAC/Ba,IAAI,EAAE;;KAET,CAAC;IACFP,OAAO,EAAEhB,kCAAgB,CAACd,KAAK,CAAC8B,OAAO,EAAE;MACvCK,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;QACZ1B,QAAQ;QACR4B,IAAI,EAAE;;KAET,CAAC;IACFP,cAAc,EAAEjB,kCAAgB,CAACd,KAAK,CAAC+B,cAAc,EAAE;MACrDI,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;QACZ,YAAY,EAAE,UAAU;QACxBG,QAAQ,EAAE;;KAEb,CAAC;IACFP,OAAO,EAAElB,kCAAgB,CAACd,KAAK,CAACgC,OAAO,EAAE;MACvCG,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;QACZN,OAAO,EAAE,mBAAmB;QAC5BU,YAAY,EAAE;;KAEjB;GACF;AACH,CAAC;AAlFYC,sCAA8B","names":["useAvatarGroupPopover_unstable","props","size","ctx","useAvatarGroup_1","layout","AvatarGroupContext_1","indicator","count","React","Children","children","restOfProps","popoverOpen","setPopoverOpen","react_utilities_1","state","open","defaultState","defaultOpen","initialState","handleOnPopoverChange","e","data","onOpenChange","triggerButtonChildren","react_icons_1","components","root","react_popover_1","triggerButton","content","popoverSurface","tooltip","react_tooltip_1","trapFocus","required","defaultProps","type","role","tabIndex","relationship","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-avatar/src/components/AvatarGroupPopover/useAvatarGroupPopover.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useAvatarGroupContext_unstable } from '../../contexts/AvatarGroupContext';\nimport { defaultAvatarGroupSize } from '../AvatarGroup/useAvatarGroup';\nimport { resolveShorthand, useControllableState } from '@fluentui/react-utilities';\nimport { MoreHorizontalRegular } from '@fluentui/react-icons';\nimport { OnOpenChangeData, OpenPopoverEvents, Popover, PopoverSurface } from '@fluentui/react-popover';\nimport type { AvatarGroupPopoverProps, AvatarGroupPopoverState } from './AvatarGroupPopover.types';\nimport { Tooltip } from '@fluentui/react-tooltip';\n\n/**\n * Create the state required to render AvatarGroupPopover.\n *\n * The returned state can be modified with hooks such as useAvatarGroupPopoverStyles_unstable,\n * before being passed to renderAvatarGroupPopover_unstable.\n *\n * @param props - props from this instance of AvatarGroupPopover\n */\nexport const useAvatarGroupPopover_unstable = (props: AvatarGroupPopoverProps): AvatarGroupPopoverState => {\n  const size = useAvatarGroupContext_unstable(ctx => ctx.size) ?? defaultAvatarGroupSize;\n  const layout = useAvatarGroupContext_unstable(ctx => ctx.layout);\n  const {\n    indicator = size < 24 ? 'icon' : 'count',\n    count = React.Children.count(props.children),\n    children,\n    ...restOfProps\n  } = props;\n\n  const [popoverOpen, setPopoverOpen] = useControllableState({\n    state: props.open,\n    defaultState: props.defaultOpen,\n    initialState: false,\n  });\n\n  const handleOnPopoverChange = (e: OpenPopoverEvents, data: OnOpenChangeData) => {\n    restOfProps.onOpenChange?.(e, data);\n    setPopoverOpen(data.open);\n  };\n\n  let triggerButtonChildren;\n  if (layout === 'pie') {\n    triggerButtonChildren = null;\n  } else if (indicator === 'icon') {\n    triggerButtonChildren = <MoreHorizontalRegular />;\n  } else {\n    triggerButtonChildren = count > 99 ? '99+' : `+${count}`;\n  }\n\n  return {\n    count,\n    indicator,\n    layout,\n    popoverOpen,\n    size,\n\n    components: {\n      root: Popover,\n      triggerButton: 'button',\n      content: 'ul',\n      popoverSurface: PopoverSurface,\n      tooltip: Tooltip,\n    },\n    root: {\n      // Popover expects a child for its children. The children are added in the renderAvatarGroupPopover.\n      children: <></>,\n      size: 'small',\n      trapFocus: true,\n      ...restOfProps,\n      open: popoverOpen,\n      onOpenChange: handleOnPopoverChange,\n    },\n    triggerButton: resolveShorthand(props.triggerButton, {\n      required: true,\n      defaultProps: {\n        children: triggerButtonChildren,\n        type: 'button',\n      },\n    }),\n    content: resolveShorthand(props.content, {\n      required: true,\n      defaultProps: {\n        children,\n        role: 'list',\n      },\n    }),\n    popoverSurface: resolveShorthand(props.popoverSurface, {\n      required: true,\n      defaultProps: {\n        'aria-label': 'Overflow',\n        tabIndex: 0,\n      },\n    }),\n    tooltip: resolveShorthand(props.tooltip, {\n      required: true,\n      defaultProps: {\n        content: 'View more people.',\n        relationship: 'label',\n      },\n    }),\n  };\n};\n"]}
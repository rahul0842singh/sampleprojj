{"version":3,"mappings":";;AAAA;;;;;;;AAIA;;;;AAIA,MAAMA,yBAAyB,GAAW,6BAA6B;AAEvE;;;;AAIA,MAAMC,oBAAoB,GAAW,4DAA4D;AAEjG;;;;AAIA,MAAMC,iBAAiB,GAAW,+BAA+B;AAEjE;AACA,MAAMC,0BAA0B,GAAW,MAAM;AAEjD;;;;;;;;AAQA;AACA,MAAMC,sBAAsB,GAAW,4MAA4M;AAEnP,SAASC,gBAAgB,CAACC,WAAmB,EAAEC,KAAc,EAAEC,gBAA0B;EACvF,IAAIC,QAAQ,GAAG,EAAE;EAEjB,MAAMC,MAAM,GAAaJ,WAAW,CAACK,KAAK,CAAC,GAAG,CAAC;EAC/C,IAAID,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;IACvBH,QAAQ,IAAIC,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;;EAG/C,IAAI,CAACN,gBAAgB,EAAE;IACrB,IAAIE,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;MACvBH,QAAQ,IAAIC,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;KAC9C,MAAM,IAAIJ,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;MAC9BH,QAAQ,IAAIC,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;;;EAIjD,IAAIP,KAAK,IAAIE,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;IAChC,OAAOH,QAAQ,CAACI,MAAM,CAAC,CAAC,CAAC,GAAGJ,QAAQ,CAACI,MAAM,CAAC,CAAC,CAAC;;EAGhD,OAAOJ,QAAQ;AACjB;AAEA,SAASM,kBAAkB,CAACT,WAAmB;EAC7CA,WAAW,GAAGA,WAAW,CAACU,OAAO,CAAChB,yBAAyB,EAAE,EAAE,CAAC;EAChEM,WAAW,GAAGA,WAAW,CAACU,OAAO,CAACf,oBAAoB,EAAE,EAAE,CAAC;EAC3DK,WAAW,GAAGA,WAAW,CAACU,OAAO,CAACb,0BAA0B,EAAE,GAAG,CAAC;EAClEG,WAAW,GAAGA,WAAW,CAACW,IAAI,EAAE;EAEhC,OAAOX,WAAW;AACpB;AAEA;;;;;;;;;;;;AAYA,SAAgBY,WAAW,CACzBZ,WAAsC,EACtCC,KAAc,EACdY,OAMC;EAED,IAAI,CAACb,WAAW,EAAE;IAChB,OAAO,EAAE;;EAGXA,WAAW,GAAGS,kBAAkB,CAACT,WAAW,CAAC;EAE7C;EACA,IACEF,sBAAsB,CAACgB,IAAI,CAACd,WAAW,CAAC,IACvC,EAACa,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,kBAAkB,KAAInB,iBAAiB,CAACkB,IAAI,CAACd,WAAW,CAAE,EACrE;IACA,OAAO,EAAE;;EAGX,OAAOD,gBAAgB,CAACC,WAAW,EAAEC,KAAK,EAAEY,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEX,gBAAgB,CAAC;AACxE;AA1BAc","names":["UNWANTED_ENCLOSURES_REGEX","UNWANTED_CHARS_REGEX","PHONENUMBER_REGEX","MULTIPLE_WHITESPACES_REGEX","UNSUPPORTED_TEXT_REGEX","getInitialsLatin","displayName","isRtl","firstInitialOnly","initials","splits","split","length","charAt","toUpperCase","cleanupDisplayName","replace","trim","getInitials","options","test","allowPhoneInitials","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-avatar/src/utils/getInitials.ts"],"sourcesContent":["/**\n * Regular expressions matching characters to ignore when calculating the initials.\n */\n\n/**\n * Regular expression matching characters within various types of enclosures, including the enclosures themselves\n *  so for example, (xyz) [xyz] {xyz} all would be ignored\n */\nconst UNWANTED_ENCLOSURES_REGEX: RegExp = /[\\(\\[\\{][^\\)\\]\\}]*[\\)\\]\\}]/g;\n\n/**\n * Regular expression matching special ASCII characters except space, plus some unicode special characters.\n * Applies after unwanted enclosures have been removed\n */\nconst UNWANTED_CHARS_REGEX: RegExp = /[\\0-\\u001F\\!-/:-@\\[-`\\{-\\u00BF\\u0250-\\u036F\\uD800-\\uFFFF]/g;\n\n/**\n * Regular expression matching phone numbers. Applied after chars matching UNWANTED_CHARS_REGEX have been removed\n * and number has been trimmed for whitespaces\n */\nconst PHONENUMBER_REGEX: RegExp = /^\\d+[\\d\\s]*(:?ext|x|)\\s*\\d+$/i;\n\n/** Regular expression matching one or more spaces. */\nconst MULTIPLE_WHITESPACES_REGEX: RegExp = /\\s+/g;\n\n/**\n * Regular expression matching languages for which we currently don't support initials.\n * Arabic:   Arabic, Arabic Supplement, Arabic Extended-A.\n * Korean:   Hangul Jamo, Hangul Compatibility Jamo, Hangul Jamo Extended-A, Hangul Syllables, Hangul Jamo Extended-B.\n * Japanese: Hiragana, Katakana.\n * CJK:      CJK Unified Ideographs Extension A, CJK Unified Ideographs, CJK Compatibility Ideographs,\n *             CJK Unified Ideographs Extension B\n */\n// eslint-disable-next-line @fluentui/max-len\nconst UNSUPPORTED_TEXT_REGEX: RegExp = /[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\u1100-\\u11FF\\u3130-\\u318F\\uA960-\\uA97F\\uAC00-\\uD7AF\\uD7B0-\\uD7FF\\u3040-\\u309F\\u30A0-\\u30FF\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD869][\\uDC00-\\uDED6]/;\n\nfunction getInitialsLatin(displayName: string, isRtl: boolean, firstInitialOnly?: boolean): string {\n  let initials = '';\n\n  const splits: string[] = displayName.split(' ');\n  if (splits.length !== 0) {\n    initials += splits[0].charAt(0).toUpperCase();\n  }\n\n  if (!firstInitialOnly) {\n    if (splits.length === 2) {\n      initials += splits[1].charAt(0).toUpperCase();\n    } else if (splits.length === 3) {\n      initials += splits[2].charAt(0).toUpperCase();\n    }\n  }\n\n  if (isRtl && initials.length > 1) {\n    return initials.charAt(1) + initials.charAt(0);\n  }\n\n  return initials;\n}\n\nfunction cleanupDisplayName(displayName: string): string {\n  displayName = displayName.replace(UNWANTED_ENCLOSURES_REGEX, '');\n  displayName = displayName.replace(UNWANTED_CHARS_REGEX, '');\n  displayName = displayName.replace(MULTIPLE_WHITESPACES_REGEX, ' ');\n  displayName = displayName.trim();\n\n  return displayName;\n}\n\n/**\n * Get (up to 2 characters) initials based on display name of the persona.\n *\n * @param displayName - The full name of the person or entity\n * @param isRtl - Whether the display is in RTL\n * @param options - Extra options to control the behavior of getInitials\n *\n * @returns The 1 or 2 character initials based on the name. Or an empty string if no initials\n * could be derived from the name.\n *\n * @internal\n */\nexport function getInitials(\n  displayName: string | undefined | null,\n  isRtl: boolean,\n  options?: {\n    /** Should initials be generated from phone numbers (default false) */\n    allowPhoneInitials?: boolean;\n\n    /** Returns only the first initial */\n    firstInitialOnly?: boolean;\n  },\n): string {\n  if (!displayName) {\n    return '';\n  }\n\n  displayName = cleanupDisplayName(displayName);\n\n  // For names containing CJK characters, and phone numbers, we don't display initials\n  if (\n    UNSUPPORTED_TEXT_REGEX.test(displayName) ||\n    (!options?.allowPhoneInitials && PHONENUMBER_REGEX.test(displayName))\n  ) {\n    return '';\n  }\n\n  return getInitialsLatin(displayName, isRtl, options?.firstInitialOnly);\n}\n"]}
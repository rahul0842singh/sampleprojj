{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAIaA,sBAAc,GAA8B;EACvDC,IAAI,EAAE;CACP;AAED,MAAMC,SAAS,gBAAGC,gBAAU;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA;AAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AAAA,EA6E1B;AAEK,MAAMC,sBAAsB,GAAIC,KAAgB,IAAe;EACpE,MAAMC,MAAM,GAAGJ,SAAS,EAAE;EAC1B,MAAM;IAAEK,UAAU;IAAEC,QAAQ;IAAEC,MAAM;IAAER;EAAI,CAAE,GAAGI,KAAK;EAEpDA,KAAK,CAACJ,IAAI,CAACS,SAAS,GAAGP,oBAAY,CACjCH,sBAAc,CAACC,IAAI,EACnBK,MAAM,CAACL,IAAI,EACXK,MAAM,CAACK,cAAc,EACrBV,IAAI,CAACW,EAAE,KAAK,GAAG,IAAIX,IAAI,CAACY,IAAI,IAAIP,MAAM,CAACO,IAAI,EAC3CZ,IAAI,CAACW,EAAE,KAAK,QAAQ,IAAIN,MAAM,CAACQ,MAAM,EACrCP,UAAU,KAAK,QAAQ,IAAID,MAAM,CAACS,MAAM,EACxCN,MAAM,IAAIH,MAAM,CAACG,MAAM,EACvBD,QAAQ,IAAIF,MAAM,CAACE,QAAQ,EAC3BH,KAAK,CAACJ,IAAI,CAACS,SAAS,CACrB;EAED,OAAOL,KAAK;AACd,CAAC;AAjBYL,8BAAsB","names":["exports","root","useStyles","react_1","useLinkStyles_unstable","state","styles","appearance","disabled","inline","className","focusIndicator","as","href","button","subtle"],"sourceRoot":"../src/","sources":["packages/react-components/react-link/src/components/Link/useLinkStyles.ts"],"sourcesContent":["import { shorthands, makeStyles, mergeClasses } from '@griffel/react';\nimport { createCustomFocusIndicatorStyle } from '@fluentui/react-tabster';\nimport { tokens } from '@fluentui/react-theme';\nimport type { LinkSlots, LinkState } from './Link.types';\nimport type { SlotClassNames } from '@fluentui/react-utilities';\n\nexport const linkClassNames: SlotClassNames<LinkSlots> = {\n  root: 'fui-Link',\n};\n\nconst useStyles = makeStyles({\n  focusIndicator: createCustomFocusIndicatorStyle({\n    textDecorationColor: tokens.colorStrokeFocus2,\n    textDecorationLine: 'underline',\n    textDecorationStyle: 'double',\n  }),\n  // Common styles.\n  root: {\n    backgroundColor: 'transparent',\n    boxSizing: 'border-box',\n    color: tokens.colorBrandForegroundLink,\n    cursor: 'pointer',\n    display: 'inline',\n    fontFamily: tokens.fontFamilyBase,\n    fontSize: tokens.fontSizeBase300,\n    fontWeight: tokens.fontWeightRegular,\n    ...shorthands.margin(0),\n    ...shorthands.padding(0),\n    ...shorthands.overflow('inherit'),\n    textAlign: 'left',\n    textDecorationLine: 'none',\n    textDecorationThickness: tokens.strokeWidthThin,\n    textOverflow: 'inherit',\n    userSelect: 'text',\n\n    ':hover': {\n      textDecorationLine: 'underline',\n      color: tokens.colorBrandForegroundLinkHover,\n    },\n\n    ':active': {\n      textDecorationLine: 'underline',\n      color: tokens.colorBrandForegroundLinkPressed,\n    },\n  },\n  // Overrides when the Link renders as a button.\n  button: {\n    ...shorthands.borderStyle('none'),\n  },\n  // Overrides when an href is present so the Link renders as an anchor.\n  href: {\n    fontSize: 'inherit',\n  },\n  // Overrides when the Link appears subtle.\n  subtle: {\n    color: tokens.colorNeutralForeground2,\n\n    ':hover': {\n      textDecorationLine: 'underline',\n      color: tokens.colorNeutralForeground2Hover,\n    },\n\n    ':active': {\n      textDecorationLine: 'underline',\n      color: tokens.colorNeutralForeground2Pressed,\n    },\n  },\n  // Overrides when the Link is rendered inline within text.\n  inline: {\n    textDecorationLine: 'underline',\n  },\n  // Overrides when the Link is disabled.\n  disabled: {\n    textDecorationLine: 'none',\n    color: tokens.colorNeutralForegroundDisabled,\n    cursor: 'not-allowed',\n\n    ':hover': {\n      textDecorationLine: 'none',\n      color: tokens.colorNeutralForegroundDisabled,\n    },\n\n    ':active': {\n      textDecorationLine: 'none',\n      color: tokens.colorNeutralForegroundDisabled,\n    },\n  },\n});\n\nexport const useLinkStyles_unstable = (state: LinkState): LinkState => {\n  const styles = useStyles();\n  const { appearance, disabled, inline, root } = state;\n\n  state.root.className = mergeClasses(\n    linkClassNames.root,\n    styles.root,\n    styles.focusIndicator,\n    root.as === 'a' && root.href && styles.href,\n    root.as === 'button' && styles.button,\n    appearance === 'subtle' && styles.subtle,\n    inline && styles.inline,\n    disabled && styles.disabled,\n    state.root.className,\n  );\n\n  return state;\n};\n"]}
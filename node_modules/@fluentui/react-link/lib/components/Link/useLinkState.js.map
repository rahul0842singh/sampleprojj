{"version":3,"mappings":"AACA,SAASA,KAAK,EAAEC,KAAK,QAAQ,yBAAyB;AAGtD;;;;AAIA,OAAO,MAAMC,qBAAqB,GAAIC,KAAgB,IAAe;EACnE,MAAM;IAAEC,QAAQ;IAAEC;EAAiB,CAAE,GAAGF,KAAK;EAC7C,MAAM;IAAEG,OAAO;IAAEC,SAAS;IAAEC,IAAI;IAAEC,QAAQ;IAAEC;EAAI,CAAE,GAAGP,KAAK,CAACQ,IAAI;EAE/D;EACA,IAAIR,KAAK,CAACQ,IAAI,CAACC,EAAE,KAAK,GAAG,EAAE;IACzBT,KAAK,CAACQ,IAAI,CAACE,IAAI,GAAGT,QAAQ,GAAGU,SAAS,GAAGX,KAAK,CAACQ,IAAI,CAACE,IAAI;IACxDV,KAAK,CAACQ,IAAI,CAACF,QAAQ,GAAGA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAKL,QAAQ,IAAI,CAACC,iBAAiB,GAAGS,SAAS,GAAG,CAAE;IAElF;IACA,IAAIV,QAAQ,IAAIC,iBAAiB,EAAE;MACjCF,KAAK,CAACQ,IAAI,CAACH,IAAI,GAAGA,IAAI,IAAI,MAAM;;;EAGpC;EAAA,KACK;IACHL,KAAK,CAACQ,IAAI,CAACD,IAAI,GAAGA,IAAI,IAAI,QAAQ;;EAGpC;EACAP,KAAK,CAACQ,IAAI,CAACL,OAAO,GAAIS,EAA2D,IAAI;IACnF,IAAIX,QAAQ,IAAIC,iBAAiB,EAAE;MACjCU,EAAE,CAACC,cAAc,EAAE;KACpB,MAAM;MACLV,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAGS,EAAE,CAAC;;EAEjB,CAAC;EAED;EACAZ,KAAK,CAACQ,IAAI,CAACJ,SAAS,GAAIQ,EAA8D,IAAI;IACxF,IAAI,CAACX,QAAQ,IAAIC,iBAAiB,MAAMU,EAAE,CAACE,GAAG,KAAKjB,KAAK,IAAIe,EAAE,CAACE,GAAG,KAAKhB,KAAK,CAAC,EAAE;MAC7Ec,EAAE,CAACC,cAAc,EAAE;MACnBD,EAAE,CAACG,eAAe,EAAE;KACrB,MAAM;MACLX,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAGQ,EAAE,CAAC;;EAEnB,CAAC;EAED;EACAZ,KAAK,CAACC,QAAQ,GAAGA,QAAQ,IAAIC,iBAAiB;EAC9CF,KAAK,CAACQ,IAAI,CAAC,eAAe,CAAC,GAAGP,QAAQ,IAAIC,iBAAiB,IAAIS,SAAS;EACxE,IAAIX,KAAK,CAACQ,IAAI,CAACC,EAAE,KAAK,QAAQ,EAAE;IAC9BT,KAAK,CAACQ,IAAI,CAACP,QAAQ,GAAGA,QAAQ,IAAI,CAACC,iBAAiB;;EAGtD,OAAOF,KAAK;AACd,CAAC","names":["Enter","Space","useLinkState_unstable","state","disabled","disabledFocusable","onClick","onKeyDown","role","tabIndex","type","root","as","href","undefined","ev","preventDefault","key","stopPropagation"],"sourceRoot":"../src/","sources":["packages/react-components/react-link/src/components/Link/useLinkState.ts"],"sourcesContent":["import * as React from 'react';\nimport { Enter, Space } from '@fluentui/keyboard-keys';\nimport type { LinkState } from './Link.types';\n\n/**\n * The useLinkState_unstable hook processes the Link state.\n * @param state - Link state to mutate.\n */\nexport const useLinkState_unstable = (state: LinkState): LinkState => {\n  const { disabled, disabledFocusable } = state;\n  const { onClick, onKeyDown, role, tabIndex, type } = state.root;\n\n  // Add href and tabIndex=0 for anchor elements.\n  if (state.root.as === 'a') {\n    state.root.href = disabled ? undefined : state.root.href;\n    state.root.tabIndex = tabIndex ?? (disabled && !disabledFocusable ? undefined : 0);\n\n    // Add role=\"link\" for disabled and disabledFocusable links.\n    if (disabled || disabledFocusable) {\n      state.root.role = role || 'link';\n    }\n  }\n  // Add type=\"button\" for button elements.\n  else {\n    state.root.type = type || 'button';\n  }\n\n  // Disallow click event when component is disabled and eat events when disabledFocusable is set to true.\n  state.root.onClick = (ev: React.MouseEvent<HTMLAnchorElement & HTMLButtonElement>) => {\n    if (disabled || disabledFocusable) {\n      ev.preventDefault();\n    } else {\n      onClick?.(ev);\n    }\n  };\n\n  // Disallow keydown event when component is disabled and eat events when disabledFocusable is set to true.\n  state.root.onKeyDown = (ev: React.KeyboardEvent<HTMLAnchorElement & HTMLButtonElement>) => {\n    if ((disabled || disabledFocusable) && (ev.key === Enter || ev.key === Space)) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    } else {\n      onKeyDown?.(ev);\n    }\n  };\n\n  // Set the aria-disabled and disabled props correctly.\n  state.disabled = disabled || disabledFocusable;\n  state.root['aria-disabled'] = disabled || disabledFocusable || undefined;\n  if (state.root.as === 'button') {\n    state.root.disabled = disabled && !disabledFocusable;\n  }\n\n  return state;\n};\n"]}
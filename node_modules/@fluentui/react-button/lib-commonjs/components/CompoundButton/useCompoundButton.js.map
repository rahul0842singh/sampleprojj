{"version":3,"mappings":";;;;;;AACA;AACA;AAGA;;;;;AAKO,MAAMA,0BAA0B,GAAG,CACxC;EAAEC,gBAAgB;EAAEC,gBAAgB;EAAE,GAAGC;AAAK,CAAuB,EACrEC,GAAqD,KAC9B;;EACvB,MAAMC,KAAK,GAAwB;IACjC;IACA,GAAGC,0BAAkB,CAACH,KAAK,EAAEC,GAAG,CAAC;IAEjC;IACAG,UAAU,EAAE;MACVC,IAAI,EAAE,QAAQ;MACdC,IAAI,EAAE,MAAM;MACZR,gBAAgB,EAAE,MAAM;MACxBC,gBAAgB,EAAE;KACnB;IACDD,gBAAgB,EAAES,kCAAgB,CAACT,gBAAgB,EAAE;MAAEU,QAAQ,EAAE;IAAI,CAAE,CAAC;IACxET,gBAAgB,EAAEQ,kCAAgB,CAACR,gBAAgB;GACpD;EAED;EACAG,KAAK,CAACO,QAAQ,GAAGC,OAAO,CAAC,YAAK,CAACJ,IAAI,0CAAEK,QAAQ,KAAI,CAACX,KAAK,CAACW,QAAQ,IAAI,EAAC,WAAK,CAACZ,gBAAgB,0CAAEY,QAAQ,EAAC;EAEtG,OAAOT,KAAK;AACd,CAAC;AAvBYU,kCAA0B","names":["useCompoundButton_unstable","contentContainer","secondaryContent","props","ref","state","index_1","components","root","icon","react_utilities_1","required","iconOnly","Boolean","children","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-button/src/components/CompoundButton/useCompoundButton.ts"],"sourcesContent":["import * as React from 'react';\nimport { resolveShorthand } from '@fluentui/react-utilities';\nimport { useButton_unstable } from '../Button/index';\nimport type { CompoundButtonProps, CompoundButtonState } from './CompoundButton.types';\n\n/**\n * Given user props, defines default props for the CompoundButton, calls useButtonState, and returns processed state.\n * @param props - User provided props to the CompoundButton component.\n * @param ref - User provided ref to be passed to the CompoundButton component.\n */\nexport const useCompoundButton_unstable = (\n  { contentContainer, secondaryContent, ...props }: CompoundButtonProps,\n  ref: React.Ref<HTMLButtonElement | HTMLAnchorElement>,\n): CompoundButtonState => {\n  const state: CompoundButtonState = {\n    // Button state\n    ...useButton_unstable(props, ref),\n\n    // Slots definition\n    components: {\n      root: 'button',\n      icon: 'span',\n      contentContainer: 'span',\n      secondaryContent: 'span',\n    },\n    contentContainer: resolveShorthand(contentContainer, { required: true }),\n    secondaryContent: resolveShorthand(secondaryContent),\n  };\n\n  // Recalculate iconOnly to take into account secondaryContent.\n  state.iconOnly = Boolean(state.icon?.children && !props.children && !state.secondaryContent?.children);\n\n  return state;\n};\n"]}
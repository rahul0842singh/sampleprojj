{"version":3,"mappings":"AACA,SAASA,KAAK,EAAEC,oBAAoB,EAAEC,gBAAgB,QAAQ,2BAA2B;AACzF,SAASC,kBAAkB,IAAIC,SAAS,QAAQ,iCAAiC;AACjF,SAASC,aAAa,QAAQ,mBAAmB;AAGjD,MAAM;EAAEC,qBAAqB;EAAEC,iBAAiB;EAAEC;AAAkB,CAAE,GAAGH,aAAa;AAEtF,MAAMI,UAAU,GAAG,CAACC,KAAa,EAAEC,GAAW,EAAEC,GAAW,KAAI;EAC7D,OAAOA,GAAG,KAAKD,GAAG,GAAG,CAAC,GAAI,CAACD,KAAK,GAAGC,GAAG,KAAKC,GAAG,GAAGD,GAAG,CAAC,GAAI,GAAG;AAC9D,CAAC;AAED,OAAO,MAAME,uBAAuB,GAAG,CAACC,KAAkB,EAAEC,KAAkB,KAAI;EAChF,MAAM;IAAEC,YAAY,GAAG,CAAC;IAAEL,GAAG,GAAG,CAAC;IAAEC,GAAG,GAAG,GAAG;IAAEK,IAAI;IAAEP;EAAK,CAAE,GAAGK,KAAK;EACnE,MAAM;IAAEG;EAAG,CAAE,GAAGd,SAAS,EAAE;EAC3B,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGnB,oBAAoB,CAAC;IAC3Da,KAAK,EAAEJ,KAAK,KAAKW,SAAS,GAAGrB,KAAK,CAACU,KAAK,EAAEC,GAAG,EAAEC,GAAG,CAAC,GAAGS,SAAS;IAC/DC,YAAY,EAAEtB,KAAK,CAACgB,YAAY,EAAEL,GAAG,EAAEC,GAAG,CAAC;IAC3CW,YAAY,EAAE;GACf,CAAC;EACF,MAAMC,YAAY,GAAGf,UAAU,CAACU,YAAY,EAAER,GAAG,EAAEC,GAAG,CAAC;EAEvD,MAAMa,aAAa,GAAGX,KAAK,CAACY,KAAK,CAACC,QAAQ;EAC1C,MAAMC,aAAa,GAAGb,KAAK,CAACY,QAAQ;EAEpC,MAAMA,QAAQ,GAA+CzB,gBAAgB,CAAC2B,EAAE,IAAG;IACjF,MAAMC,QAAQ,GAAGC,MAAM,CAACF,EAAE,CAACG,MAAM,CAACtB,KAAK,CAAC;IACxCU,eAAe,CAACpB,KAAK,CAAC8B,QAAQ,EAAEnB,GAAG,EAAEC,GAAG,CAAC,CAAC;IAE1C,IAAIa,aAAa,IAAIA,aAAa,KAAKG,aAAa,EAAE;MACpDH,aAAa,CAACI,EAAE,CAAC;KAClB,MAAM,IAAID,aAAa,EAAE;MACxBA,aAAa,CAACC,EAAE,EAAE;QAAEnB,KAAK,EAAEoB;MAAQ,CAAE,CAAC;;EAE1C,CAAC,CAAC;EAEF,MAAMG,aAAa,GAAG;IACpB,CAACzB,kBAAkB,GAAGM,KAAK,CAACoB,QAAQ,GAAG,MAAM,GAAGhB,GAAG,KAAK,KAAK,GAAG,OAAO,GAAG,QAAQ;IAClF,CAACZ,qBAAqB,GAAGW,IAAI,IAAIA,IAAI,GAAG,CAAC,GAAG,GAAIA,IAAI,GAAG,GAAG,IAAKL,GAAG,GAAGD,GAAG,CAAC,GAAG,GAAG,EAAE;IACjF,CAACJ,iBAAiB,GAAG,GAAGiB,YAAY;GACrC;EAED;EACAV,KAAK,CAACqB,IAAI,CAACC,KAAK,GAAG;IACjB,GAAGH,aAAa;IAChB,GAAGnB,KAAK,CAACqB,IAAI,CAACC;GACf;EAED;EACAtB,KAAK,CAACY,KAAK,CAAChB,KAAK,GAAGS,YAAY;EAChCL,KAAK,CAACY,KAAK,CAACC,QAAQ,GAAGA,QAAQ;EAE/B,OAAOb,KAAK;AACd,CAAC","names":["clamp","useControllableState","useEventCallback","useFluent_unstable","useFluent","sliderCSSVars","sliderStepsPercentVar","sliderProgressVar","sliderDirectionVar","getPercent","value","min","max","useSliderState_unstable","state","props","defaultValue","step","dir","currentValue","setCurrentValue","undefined","defaultState","initialState","valuePercent","inputOnChange","input","onChange","propsOnChange","ev","newValue","Number","target","rootVariables","vertical","root","style"],"sourceRoot":"../src/","sources":["packages/react-components/react-slider/src/components/Slider/useSliderState.tsx"],"sourcesContent":["import * as React from 'react';\nimport { clamp, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { sliderCSSVars } from './useSliderStyles';\nimport type { SliderState, SliderProps } from './Slider.types';\n\nconst { sliderStepsPercentVar, sliderProgressVar, sliderDirectionVar } = sliderCSSVars;\n\nconst getPercent = (value: number, min: number, max: number) => {\n  return max === min ? 0 : ((value - min) / (max - min)) * 100;\n};\n\nexport const useSliderState_unstable = (state: SliderState, props: SliderProps) => {\n  const { defaultValue = 0, min = 0, max = 100, step, value } = props;\n  const { dir } = useFluent();\n  const [currentValue, setCurrentValue] = useControllableState({\n    state: value !== undefined ? clamp(value, min, max) : undefined,\n    defaultState: clamp(defaultValue, min, max),\n    initialState: 0,\n  });\n  const valuePercent = getPercent(currentValue, min, max);\n\n  const inputOnChange = state.input.onChange;\n  const propsOnChange = props.onChange;\n\n  const onChange: React.ChangeEventHandler<HTMLInputElement> = useEventCallback(ev => {\n    const newValue = Number(ev.target.value);\n    setCurrentValue(clamp(newValue, min, max));\n\n    if (inputOnChange && inputOnChange !== propsOnChange) {\n      inputOnChange(ev);\n    } else if (propsOnChange) {\n      propsOnChange(ev, { value: newValue });\n    }\n  });\n\n  const rootVariables = {\n    [sliderDirectionVar]: state.vertical ? '0deg' : dir === 'ltr' ? '90deg' : '270deg',\n    [sliderStepsPercentVar]: step && step > 0 ? `${(step * 100) / (max - min)}%` : '',\n    [sliderProgressVar]: `${valuePercent}%`,\n  };\n\n  // Root props\n  state.root.style = {\n    ...rootVariables,\n    ...state.root.style,\n  };\n\n  // Input Props\n  state.input.value = currentValue;\n  state.input.onChange = onChange;\n\n  return state;\n};\n"]}
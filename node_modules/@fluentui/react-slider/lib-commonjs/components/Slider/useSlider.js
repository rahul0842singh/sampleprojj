"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSlider_unstable = void 0;
const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
const useSliderState_1 = /*#__PURE__*/require("./useSliderState");
const react_tabster_1 = /*#__PURE__*/require("@fluentui/react-tabster");
const useSlider_unstable = (props, ref) => {
  const nativeProps = react_utilities_1.getPartitionedNativeProps({
    props,
    primarySlotTagName: 'input',
    excludedPropNames: ['onChange', 'size']
  });
  const {
    disabled,
    vertical,
    size = 'medium',
    // Slots
    root,
    input,
    rail,
    thumb
  } = props;
  const state = {
    disabled,
    size,
    vertical,
    components: {
      input: 'input',
      rail: 'div',
      root: 'div',
      thumb: 'div'
    },
    root: react_utilities_1.resolveShorthand(root, {
      required: true,
      defaultProps: nativeProps.root
    }),
    input: react_utilities_1.resolveShorthand(input, {
      required: true,
      defaultProps: {
        id: react_utilities_1.useId('slider-', props.id),
        ref,
        ...nativeProps.primary,
        type: 'range',
        orient: vertical ? 'vertical' : undefined
      }
    }),
    rail: react_utilities_1.resolveShorthand(rail, {
      required: true
    }),
    thumb: react_utilities_1.resolveShorthand(thumb, {
      required: true
    })
  };
  state.root.ref = react_utilities_1.useMergedRefs(state.root.ref, react_tabster_1.useFocusWithin());
  useSliderState_1.useSliderState_unstable(state, props);
  return state;
};
exports.useSlider_unstable = useSlider_unstable;
//# sourceMappingURL=useSlider.js.map
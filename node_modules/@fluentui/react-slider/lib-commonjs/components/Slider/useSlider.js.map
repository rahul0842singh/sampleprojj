{"version":3,"mappings":";;;;;;AACA;AACA;AAEA;AAEO,MAAMA,kBAAkB,GAAG,CAACC,KAAkB,EAAEC,GAAgC,KAAiB;EACtG,MAAMC,WAAW,GAAGC,2CAAyB,CAAC;IAC5CH,KAAK;IACLI,kBAAkB,EAAE,OAAO;IAC3BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,MAAM;GACvC,CAAC;EAEF,MAAM;IACJC,QAAQ;IACRC,QAAQ;IACRC,IAAI,GAAG,QAAQ;IACf;IACAC,IAAI;IACJC,KAAK;IACLC,IAAI;IACJC;EAAK,CACN,GAAGZ,KAAK;EAET,MAAMa,KAAK,GAAgB;IACzBP,QAAQ;IACRE,IAAI;IACJD,QAAQ;IACRO,UAAU,EAAE;MACVJ,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE,KAAK;MACXF,IAAI,EAAE,KAAK;MACXG,KAAK,EAAE;KACR;IACDH,IAAI,EAAEN,kCAAgB,CAACM,IAAI,EAAE;MAC3BM,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAEd,WAAW,CAACO;KAC3B,CAAC;IACFC,KAAK,EAAEP,kCAAgB,CAACO,KAAK,EAAE;MAC7BK,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;QACZC,EAAE,EAAEd,uBAAK,CAAC,SAAS,EAAEH,KAAK,CAACiB,EAAE,CAAC;QAC9BhB,GAAG;QACH,GAAGC,WAAW,CAACgB,OAAO;QACtBC,IAAI,EAAE,OAAO;QACbC,MAAM,EAAEb,QAAQ,GAAG,UAAU,GAAGc;;KAEnC,CAAC;IACFV,IAAI,EAAER,kCAAgB,CAACQ,IAAI,EAAE;MAAEI,QAAQ,EAAE;IAAI,CAAE,CAAC;IAChDH,KAAK,EAAET,kCAAgB,CAACS,KAAK,EAAE;MAAEG,QAAQ,EAAE;IAAI,CAAE;GAClD;EAEDF,KAAK,CAACJ,IAAI,CAACR,GAAG,GAAGE,+BAAa,CAACU,KAAK,CAACJ,IAAI,CAACR,GAAG,EAAEqB,8BAAc,EAAkB,CAAC;EAEhFC,wCAAuB,CAACV,KAAK,EAAEb,KAAK,CAAC;EAErC,OAAOa,KAAK;AACd,CAAC;AAnDYW,0BAAkB","names":["useSlider_unstable","props","ref","nativeProps","react_utilities_1","primarySlotTagName","excludedPropNames","disabled","vertical","size","root","input","rail","thumb","state","components","required","defaultProps","id","primary","type","orient","undefined","react_tabster_1","useSliderState_1","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-slider/src/components/Slider/useSlider.ts"],"sourcesContent":["import * as React from 'react';\nimport { getPartitionedNativeProps, resolveShorthand, useId, useMergedRefs } from '@fluentui/react-utilities';\nimport { useSliderState_unstable } from './useSliderState';\nimport { SliderProps, SliderState } from './Slider.types';\nimport { useFocusWithin } from '@fluentui/react-tabster';\n\nexport const useSlider_unstable = (props: SliderProps, ref: React.Ref<HTMLInputElement>): SliderState => {\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['onChange', 'size'],\n  });\n\n  const {\n    disabled,\n    vertical,\n    size = 'medium',\n    // Slots\n    root,\n    input,\n    rail,\n    thumb,\n  } = props;\n\n  const state: SliderState = {\n    disabled,\n    size,\n    vertical,\n    components: {\n      input: 'input',\n      rail: 'div',\n      root: 'div',\n      thumb: 'div',\n    },\n    root: resolveShorthand(root, {\n      required: true,\n      defaultProps: nativeProps.root,\n    }),\n    input: resolveShorthand(input, {\n      required: true,\n      defaultProps: {\n        id: useId('slider-', props.id),\n        ref,\n        ...nativeProps.primary,\n        type: 'range',\n        orient: vertical ? 'vertical' : undefined,\n      },\n    }),\n    rail: resolveShorthand(rail, { required: true }),\n    thumb: resolveShorthand(thumb, { required: true }),\n  };\n\n  state.root.ref = useMergedRefs(state.root.ref, useFocusWithin<HTMLDivElement>());\n\n  useSliderState_unstable(state, props);\n\n  return state;\n};\n"]}
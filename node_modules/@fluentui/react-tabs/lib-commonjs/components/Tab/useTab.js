"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTab_unstable = void 0;
const React = /*#__PURE__*/require("react");
const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
const TabListContext_1 = /*#__PURE__*/require("../TabList/TabListContext");
/**
 * Create the state required to render Tab.
 *
 * The returned state can be modified with hooks such as useTabStyles_unstable,
 * before being passed to renderTab_unstable.
 *
 * @param props - props from this instance of Tab
 * @param ref - reference to root HTMLElement of Tab
 */
const useTab_unstable = (props, ref) => {
  const {
    content,
    disabled: tabDisabled = false,
    icon,
    value
  } = props;
  const appearance = TabListContext_1.useTabListContext_unstable(ctx => ctx.appearance);
  const reserveSelectedTabSpace = TabListContext_1.useTabListContext_unstable(ctx => ctx.reserveSelectedTabSpace);
  const listDisabled = TabListContext_1.useTabListContext_unstable(ctx => ctx.disabled);
  const selected = TabListContext_1.useTabListContext_unstable(ctx => ctx.selectedValue === value);
  const onRegister = TabListContext_1.useTabListContext_unstable(ctx => ctx.onRegister);
  const onUnregister = TabListContext_1.useTabListContext_unstable(ctx => ctx.onUnregister);
  const onSelect = TabListContext_1.useTabListContext_unstable(ctx => ctx.onSelect);
  const size = TabListContext_1.useTabListContext_unstable(ctx => ctx.size);
  const vertical = TabListContext_1.useTabListContext_unstable(ctx => !!ctx.vertical);
  const disabled = listDisabled || tabDisabled;
  const innerRef = React.useRef(null);
  const onClick = react_utilities_1.useEventCallback(event => onSelect(event, {
    value
  }));
  React.useEffect(() => {
    onRegister({
      value,
      ref: innerRef
    });
    return () => {
      onUnregister({
        value,
        ref: innerRef
      });
    };
  }, [onRegister, onUnregister, innerRef, value]);
  const iconShorthand = react_utilities_1.resolveShorthand(icon);
  const contentShorthand = react_utilities_1.resolveShorthand(content, {
    required: true,
    defaultProps: {
      children: props.children
    }
  });
  return {
    components: {
      root: 'button',
      icon: 'span',
      content: 'span'
    },
    root: react_utilities_1.getNativeElementProps('button', {
      ref: react_utilities_1.useMergedRefs(ref, innerRef),
      role: 'tab',
      type: 'button',
      // aria-selected undefined indicates it is not selectable
      // according to https://www.w3.org/TR/wai-aria-1.1/#aria-selected
      'aria-selected': disabled ? undefined : `${selected}`,
      ...props,
      disabled,
      onClick
    }),
    icon: iconShorthand,
    iconOnly: Boolean((iconShorthand === null || iconShorthand === void 0 ? void 0 : iconShorthand.children) && !contentShorthand.children),
    content: contentShorthand,
    appearance,
    contentReservedSpaceClassName: reserveSelectedTabSpace ? '' : undefined,
    disabled,
    selected,
    size,
    value,
    vertical
  };
};
exports.useTab_unstable = useTab_unstable;
//# sourceMappingURL=useTab.js.map
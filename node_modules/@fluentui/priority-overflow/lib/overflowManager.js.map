{"version":3,"mappings":"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","names":["debounce","createPriorityQueue","createOverflowManager","container","overflowMenu","observing","forceDispatch","options","padding","overflowAxis","overflowDirection","minimumVisible","onUpdateItemVisibility","undefined","onUpdateOverflow","overflowItems","overflowGroups","resizeObserver","ResizeObserver","entries","update","invisibleItemQueue","a","b","itemA","itemB","priority","positionStatusBit","Node","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_PRECEDING","element","compareDocumentPosition","visibleItemQueue","getOffsetSize","el","offsetWidth","offsetHeight","makeItemVisible","nextVisible","dequeue","enqueue","item","visible","groupId","invisibleItemIds","delete","id","visibleItemIds","add","makeItemInvisible","nextInvisible","width","dispatchOverflowUpdate","all","visibleItems","map","itemId","invisibleItems","groupVisibility","Object","forEach","groupState","size","processOverflowItems","availableSize","overflowMenuOffset","visibleTop","peek","invisibleTop","currentWidth","reduce","sum","visibleItemId","child","forceUpdate","observe","observedContainer","userOptions","assign","values","disconnect","addItem","Set","addOverflowMenu","removeOverflowMenu","removeItem","remove"],"sourceRoot":"../src/","sources":["packages/react-components/priority-overflow/src/overflowManager.ts"],"sourcesContent":["import { debounce } from './debounce';\nimport { createPriorityQueue } from './priorityQueue';\nimport type { OverflowGroupState, OverflowItemEntry, OverflowManager, ObserveOptions } from './types';\n\n/**\n * @internal\n * @returns overflow manager instance\n */\nexport function createOverflowManager(): OverflowManager {\n  let container: HTMLElement | undefined;\n  let overflowMenu: HTMLElement | undefined;\n  // Set as true when resize observer is observing\n  let observing = false;\n  // If true, next update will dispatch to onUpdateOverflow even if queue top states don't change\n  let forceDispatch = false;\n  const options: Required<ObserveOptions> = {\n    padding: 10,\n    overflowAxis: 'horizontal',\n    overflowDirection: 'end',\n    minimumVisible: 0,\n    onUpdateItemVisibility: () => undefined,\n    onUpdateOverflow: () => undefined,\n  };\n\n  const overflowItems: Record<string, OverflowItemEntry> = {};\n  const overflowGroups: Record<string, { visibleItemIds: Set<string>; invisibleItemIds: Set<string> }> = {};\n  const resizeObserver = new ResizeObserver(entries => {\n    if (!entries[0] || !container) {\n      return;\n    }\n\n    update();\n  });\n\n  const invisibleItemQueue = createPriorityQueue<string>((a, b) => {\n    const itemA = overflowItems[a];\n    const itemB = overflowItems[b];\n    // Higher priority at the top of the queue\n    const priority = itemB.priority - itemA.priority;\n    if (priority !== 0) {\n      return priority;\n    }\n\n    const positionStatusBit =\n      options.overflowDirection === 'end' ? Node.DOCUMENT_POSITION_FOLLOWING : Node.DOCUMENT_POSITION_PRECEDING;\n\n    // equal priority, use DOM order\n    // eslint-disable-next-line no-bitwise\n    return itemA.element.compareDocumentPosition(itemB.element) & positionStatusBit ? -1 : 1;\n  });\n\n  const visibleItemQueue = createPriorityQueue<string>((a, b) => {\n    const itemA = overflowItems[a];\n    const itemB = overflowItems[b];\n    // Lower priority at the top of the queue\n    const priority = itemA.priority - itemB.priority;\n\n    if (priority !== 0) {\n      return priority;\n    }\n\n    const positionStatusBit =\n      options.overflowDirection === 'end' ? Node.DOCUMENT_POSITION_PRECEDING : Node.DOCUMENT_POSITION_FOLLOWING;\n\n    // equal priority, use DOM order\n    // eslint-disable-next-line no-bitwise\n    return itemA.element.compareDocumentPosition(itemB.element) & positionStatusBit ? -1 : 1;\n  });\n\n  const getOffsetSize = (el: HTMLElement) => {\n    return options.overflowAxis === 'horizontal' ? el.offsetWidth : el.offsetHeight;\n  };\n\n  const makeItemVisible = () => {\n    const nextVisible = invisibleItemQueue.dequeue();\n    visibleItemQueue.enqueue(nextVisible);\n\n    const item = overflowItems[nextVisible];\n    options.onUpdateItemVisibility({ item, visible: true });\n    if (item.groupId) {\n      overflowGroups[item.groupId].invisibleItemIds.delete(item.id);\n      overflowGroups[item.groupId].visibleItemIds.add(item.id);\n    }\n\n    return getOffsetSize(item.element);\n  };\n\n  const makeItemInvisible = () => {\n    const nextInvisible = visibleItemQueue.dequeue();\n    invisibleItemQueue.enqueue(nextInvisible);\n\n    const item = overflowItems[nextInvisible];\n    const width = getOffsetSize(item.element);\n    options.onUpdateItemVisibility({ item, visible: false });\n    if (item.groupId) {\n      overflowGroups[item.groupId].visibleItemIds.delete(item.id);\n      overflowGroups[item.groupId].invisibleItemIds.add(item.id);\n    }\n\n    return width;\n  };\n\n  const dispatchOverflowUpdate = () => {\n    const visibleItemIds = visibleItemQueue.all();\n    const invisibleItemIds = invisibleItemQueue.all();\n\n    const visibleItems = visibleItemIds.map(itemId => overflowItems[itemId]);\n    const invisibleItems = invisibleItemIds.map(itemId => overflowItems[itemId]);\n\n    const groupVisibility: Record<string, OverflowGroupState> = {};\n    Object.entries(overflowGroups).forEach(([groupId, groupState]) => {\n      if (groupState.invisibleItemIds.size && groupState.visibleItemIds.size) {\n        groupVisibility[groupId] = 'overflow';\n      } else if (groupState.visibleItemIds.size === 0) {\n        groupVisibility[groupId] = 'hidden';\n      } else {\n        groupVisibility[groupId] = 'visible';\n      }\n    });\n\n    options.onUpdateOverflow({ visibleItems, invisibleItems, groupVisibility });\n  };\n\n  const processOverflowItems = (): boolean => {\n    if (!container) {\n      return false;\n    }\n\n    const availableSize = getOffsetSize(container) - options.padding;\n    const overflowMenuOffset = overflowMenu ? getOffsetSize(overflowMenu) : 0;\n\n    // Snapshot of the visible/invisible state to compare for updates\n    const visibleTop = visibleItemQueue.peek();\n    const invisibleTop = invisibleItemQueue.peek();\n\n    const visibleItemIds = visibleItemQueue.all();\n    let currentWidth = visibleItemIds.reduce((sum, visibleItemId) => {\n      const child = overflowItems[visibleItemId].element;\n      return sum + getOffsetSize(child);\n    }, 0);\n\n    // Add items until available width is filled - can result in overflow\n    while (currentWidth < availableSize && invisibleItemQueue.size() > 0) {\n      currentWidth += makeItemVisible();\n    }\n\n    // Remove items until there's no more overflow\n    while (currentWidth > availableSize && visibleItemQueue.size() > 0) {\n      if (visibleItemQueue.size() <= options.minimumVisible) {\n        break;\n      }\n      currentWidth -= makeItemInvisible();\n    }\n\n    // make sure the overflow menu can fit\n    if (\n      visibleItemQueue.size() > options.minimumVisible &&\n      invisibleItemQueue.size() > 0 &&\n      currentWidth + overflowMenuOffset > availableSize\n    ) {\n      makeItemInvisible();\n    }\n\n    // only update when the state of visible/invisible items has changed\n    if (visibleItemQueue.peek() !== visibleTop || invisibleItemQueue.peek() !== invisibleTop) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const forceUpdate: OverflowManager['forceUpdate'] = () => {\n    if (processOverflowItems() || forceDispatch) {\n      forceDispatch = false;\n      dispatchOverflowUpdate();\n    }\n  };\n\n  const update: OverflowManager['update'] = debounce(forceUpdate);\n\n  const observe: OverflowManager['observe'] = (observedContainer, userOptions) => {\n    Object.assign(options, userOptions);\n    observing = true;\n    Object.values(overflowItems).forEach(item => visibleItemQueue.enqueue(item.id));\n\n    container = observedContainer;\n    resizeObserver.observe(container);\n  };\n\n  const disconnect: OverflowManager['disconnect'] = () => {\n    observing = false;\n    resizeObserver.disconnect();\n  };\n\n  const addItem: OverflowManager['addItem'] = item => {\n    if (overflowItems[item.id]) {\n      return;\n    }\n\n    overflowItems[item.id] = item;\n\n    // some options can affect priority which are only set on `observe`\n    if (observing) {\n      // Updates to elements might not change the queue tops\n      // i.e. new element is enqueued but the top of the queue stays the same\n      // force a dispatch on the next batched update\n      forceDispatch = true;\n      visibleItemQueue.enqueue(item.id);\n    }\n\n    if (item.groupId) {\n      if (!overflowGroups[item.groupId]) {\n        overflowGroups[item.groupId] = {\n          visibleItemIds: new Set<string>(),\n          invisibleItemIds: new Set<string>(),\n        };\n      }\n\n      overflowGroups[item.groupId].visibleItemIds.add(item.id);\n    }\n\n    update();\n  };\n\n  const addOverflowMenu: OverflowManager['addOverflowMenu'] = el => {\n    overflowMenu = el;\n  };\n\n  const removeOverflowMenu: OverflowManager['removeOverflowMenu'] = () => {\n    overflowMenu = undefined;\n  };\n\n  const removeItem: OverflowManager['removeItem'] = itemId => {\n    if (!overflowItems[itemId]) {\n      return;\n    }\n\n    const item = overflowItems[itemId];\n    visibleItemQueue.remove(itemId);\n    invisibleItemQueue.remove(itemId);\n\n    if (item.groupId) {\n      overflowGroups[item.groupId].visibleItemIds.delete(item.id);\n      overflowGroups[item.groupId].invisibleItemIds.delete(item.id);\n    }\n\n    delete overflowItems[itemId];\n    update();\n  };\n\n  return {\n    addItem,\n    disconnect,\n    forceUpdate,\n    observe,\n    removeItem,\n    update,\n    addOverflowMenu,\n    removeOverflowMenu,\n  };\n}\n"]}
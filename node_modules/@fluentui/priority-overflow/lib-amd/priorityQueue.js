define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPriorityQueue = void 0;
    /**
     * @param compare - comparison function for items
     * @returns Priority queue implemented with a min heap
     */
    function createPriorityQueue(compare) {
        var arr = [];
        var size = 0;
        var left = function (i) {
            return 2 * i + 1;
        };
        var right = function (i) {
            return 2 * i + 2;
        };
        var parent = function (i) {
            return Math.floor((i - 1) / 2);
        };
        var swap = function (a, b) {
            var tmp = arr[a];
            arr[a] = arr[b];
            arr[b] = tmp;
        };
        var heapify = function (i) {
            var smallest = i;
            var l = left(i);
            var r = right(i);
            if (l < size && compare(arr[l], arr[smallest]) < 0) {
                smallest = l;
            }
            if (r < size && compare(arr[r], arr[smallest]) < 0) {
                smallest = r;
            }
            if (smallest !== i) {
                swap(smallest, i);
                heapify(smallest);
            }
        };
        var dequeue = function () {
            if (size === 0) {
                throw new Error('Priority queue empty');
            }
            var res = arr[0];
            arr[0] = arr[--size];
            heapify(0);
            return res;
        };
        var peek = function () {
            if (size === 0) {
                return null;
            }
            return arr[0];
        };
        var enqueue = function (item) {
            arr[size++] = item;
            var i = size - 1;
            var p = parent(i);
            while (i > 0 && compare(arr[p], arr[i]) > 0) {
                swap(p, i);
                i = p;
                p = parent(i);
            }
        };
        var contains = function (item) {
            var index = arr.indexOf(item);
            return index >= 0 && index < size;
        };
        var remove = function (item) {
            var i = arr.indexOf(item);
            if (i === -1 || i >= size) {
                return;
            }
            arr[i] = arr[--size];
            heapify(i);
        };
        var clear = function () {
            size = 0;
        };
        var all = function () {
            return arr.slice(0, size);
        };
        return {
            all: all,
            clear: clear,
            contains: contains,
            dequeue: dequeue,
            enqueue: enqueue,
            peek: peek,
            remove: remove,
            size: function () { return size; },
        };
    }
    exports.createPriorityQueue = createPriorityQueue;
});
//# sourceMappingURL=priorityQueue.js.map
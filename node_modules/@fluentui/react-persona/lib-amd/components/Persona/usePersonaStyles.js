define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1) {
    "use strict";
    var _a, _b, _c, _d, _e, _f, _g;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usePersonaStyles_unstable = exports.personaClassNames = void 0;
    exports.personaClassNames = {
        root: 'fui-Persona',
        avatar: 'fui-Persona__avatar',
        presence: 'fui-Persona__presence',
        primaryText: 'fui-Persona__primaryText',
        secondaryText: 'fui-Persona__secondaryText',
        tertiaryText: 'fui-Persona__tertiaryText',
        quaternaryText: 'fui-Persona__quaternaryText',
    };
    var avatarSpacing = "--fui-Persona__avatar--spacing";
    var useRootClassName = react_1.makeResetStyles({
        display: 'inline-grid',
        gridAutoRows: 'max-content',
        gridAutoFlow: 'column',
        justifyItems: 'start',
        gridTemplateColumns: 'max-content [middle] auto',
    });
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        beforeAfterCenter: {
            // This template is needed to make sure the Avatar is centered when it takes up more space than the text lines
            gridTemplateRows: '1fr [primary] max-content [secondary] max-content [tertiary] max-content [quaternary] max-content 1fr',
        },
        after: {
        // Intentionally empty
        },
        before: {
            justifyItems: 'end',
            gridTemplateColumns: 'auto [middle] max-content',
        },
        below: {
            gridAutoFlow: 'unset',
            justifyItems: 'center',
            gridTemplateColumns: 'unset',
        },
        media: {
            gridRowStart: 'span 5',
        },
        mediaBeforeAfterCenter: {
            gridRowStart: 'span 6',
        },
        start: {
            alignSelf: 'start',
        },
        center: {
            alignSelf: 'center',
        },
        afterAlignToPrimary: {
            alignSelf: 'center',
            gridRowStart: 'unset',
            gridColumnEnd: 'middle',
        },
        beforeAlignToPrimary: {
            alignSelf: 'center',
            gridRowStart: 'unset',
            gridColumnStart: 'middle',
        },
        secondLineSpacing: {
            marginTop: '-2px',
        },
        primary: { gridRowStart: 'primary' },
        secondary: { gridRowStart: 'secondary' },
        tertiary: { gridRowStart: 'tertiary' },
        quaternary: { gridRowStart: 'quaternary' },
    });
    var useAvatarSpacingStyles = react_1.makeStyles({
        'extra-small': (_a = {},
            _a[avatarSpacing] = react_theme_1.tokens.spacingHorizontalSNudge,
            _a),
        small: (_b = {},
            _b[avatarSpacing] = react_theme_1.tokens.spacingHorizontalS,
            _b),
        medium: (_c = {},
            _c[avatarSpacing] = react_theme_1.tokens.spacingHorizontalS,
            _c),
        large: (_d = {},
            _d[avatarSpacing] = react_theme_1.tokens.spacingHorizontalMNudge,
            _d),
        'extra-large': (_e = {},
            _e[avatarSpacing] = react_theme_1.tokens.spacingHorizontalMNudge,
            _e),
        huge: (_f = {},
            _f[avatarSpacing] = react_theme_1.tokens.spacingHorizontalM,
            _f),
        after: {
            marginRight: "var(" + avatarSpacing + ")",
        },
        below: {
            marginBottom: "var(" + avatarSpacing + ")",
        },
        before: {
            marginLeft: "var(" + avatarSpacing + ")",
        },
    });
    var usePresenceSpacingStyles = react_1.makeStyles({
        small: (_g = {},
            _g[avatarSpacing] = react_theme_1.tokens.spacingHorizontalSNudge,
            _g),
    });
    /**
     * Apply styling to the Persona slots based on the state
     */
    var usePersonaStyles_unstable = function (state) {
        var presenceOnly = state.presenceOnly, size = state.size, textAlignment = state.textAlignment, textPosition = state.textPosition;
        var alignToPrimary = presenceOnly && textAlignment === 'start' && size !== 'extra-large' && size !== 'huge';
        var alignBeforeAfterCenter = textPosition !== 'below' && textAlignment === 'center';
        var _a = useTextClassNames(state, alignToPrimary), primaryTextClassName = _a.primaryTextClassName, optionalTextClassName = _a.optionalTextClassName;
        var rootClassName = useRootClassName();
        var styles = useStyles();
        var avatarSpacingStyles = useAvatarSpacingStyles();
        var presenceSpacingStyles = tslib_1.__assign(tslib_1.__assign({}, avatarSpacingStyles), usePresenceSpacingStyles());
        state.root.className = react_1.mergeClasses(exports.personaClassNames.root, rootClassName, alignBeforeAfterCenter && styles.beforeAfterCenter, styles[textPosition], state.root.className);
        if (state.avatar) {
            state.avatar.className = react_1.mergeClasses(exports.personaClassNames.avatar, textPosition !== 'below' && styles.media, alignBeforeAfterCenter && styles.mediaBeforeAfterCenter, styles[textAlignment], avatarSpacingStyles[size], avatarSpacingStyles[textPosition], state.avatar.className);
        }
        if (state.presence) {
            state.presence.className = react_1.mergeClasses(exports.personaClassNames.presence, textPosition !== 'below' && styles.media, alignBeforeAfterCenter && styles.mediaBeforeAfterCenter, styles[textAlignment], presenceSpacingStyles[size], presenceSpacingStyles[textPosition], textPosition === 'after' && alignToPrimary && styles.afterAlignToPrimary, textPosition === 'before' && alignToPrimary && styles.beforeAlignToPrimary, state.presence.className);
        }
        if (state.primaryText) {
            state.primaryText.className = react_1.mergeClasses(exports.personaClassNames.primaryText, alignBeforeAfterCenter && styles.primary, primaryTextClassName, state.primaryText.className);
        }
        if (state.secondaryText) {
            state.secondaryText.className = react_1.mergeClasses(exports.personaClassNames.secondaryText, alignBeforeAfterCenter && styles.secondary, optionalTextClassName, styles.secondLineSpacing, state.secondaryText.className);
        }
        if (state.tertiaryText) {
            state.tertiaryText.className = react_1.mergeClasses(exports.personaClassNames.tertiaryText, alignBeforeAfterCenter && styles.tertiary, optionalTextClassName, state.tertiaryText.className);
        }
        if (state.quaternaryText) {
            state.quaternaryText.className = react_1.mergeClasses(exports.personaClassNames.quaternaryText, alignBeforeAfterCenter && styles.quaternary, optionalTextClassName, state.quaternaryText.className);
        }
        return state;
    };
    exports.usePersonaStyles_unstable = usePersonaStyles_unstable;
    var usePrimaryTextBaseClassName = react_1.makeResetStyles(tslib_1.__assign({ display: 'block', color: react_theme_1.tokens.colorNeutralForeground1 }, react_theme_1.typographyStyles.body1));
    var useOptionalTextBaseClassName = react_1.makeResetStyles(tslib_1.__assign({ display: 'block', color: react_theme_1.tokens.colorNeutralForeground2 }, react_theme_1.typographyStyles.caption1));
    var useTextStyles = react_1.makeStyles({
        beforeAlignToPrimary: {
            gridColumnEnd: 'middle',
        },
        afterAlignToPrimary: {
            gridColumnStart: 'middle',
        },
        body1: react_theme_1.typographyStyles.body1,
        caption1: react_theme_1.typographyStyles.caption1,
        subtitle2: react_theme_1.typographyStyles.subtitle2,
    });
    var useTextClassNames = function (state, alignToPrimary) {
        var presenceOnly = state.presenceOnly, size = state.size, textPosition = state.textPosition;
        var primaryTextBaseClassName = usePrimaryTextBaseClassName();
        var optionalTextBaseClassName = useOptionalTextBaseClassName();
        var textStyles = useTextStyles();
        var primaryTextSize;
        var alignToPrimaryClassName;
        if (presenceOnly) {
            if (size === 'extra-small') {
                primaryTextSize = state.numTextLines <= 1 && textStyles.caption1;
            }
            else if (size === 'extra-large' || size === 'huge') {
                primaryTextSize = textStyles.subtitle2;
            }
            if (alignToPrimary) {
                if (textPosition === 'before') {
                    alignToPrimaryClassName = textStyles.beforeAlignToPrimary;
                }
                else if (textPosition === 'after') {
                    alignToPrimaryClassName = textStyles.afterAlignToPrimary;
                }
            }
        }
        else {
            if (size === 'huge') {
                primaryTextSize = textStyles.subtitle2;
            }
            else if (size === 'extra-large') {
                primaryTextSize = textStyles.subtitle2;
            }
        }
        return {
            primaryTextClassName: react_1.mergeClasses(primaryTextBaseClassName, primaryTextSize, alignToPrimaryClassName),
            optionalTextClassName: react_1.mergeClasses(optionalTextBaseClassName, !presenceOnly && size === 'huge' && textStyles.body1, alignToPrimaryClassName),
        };
    };
});
//# sourceMappingURL=usePersonaStyles.js.map
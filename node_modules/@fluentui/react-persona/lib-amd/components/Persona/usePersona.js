define(["require", "exports", "tslib", "@fluentui/react-avatar", "@fluentui/react-utilities", "@fluentui/react-badge"], function (require, exports, tslib_1, react_avatar_1, react_utilities_1, react_badge_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usePersona_unstable = void 0;
    /**
     * Create the state required to render Persona.
     *
     * The returned state can be modified with hooks such as usePersonaStyles_unstable,
     * before being passed to renderPersona_unstable.
     *
     * @param props - props from this instance of Persona
     * @param ref - reference to root HTMLElement of Persona
     */
    var usePersona_unstable = function (props, ref) {
        var name = props.name, _a = props.presenceOnly, presenceOnly = _a === void 0 ? false : _a, _b = props.size, size = _b === void 0 ? 'medium' : _b, _c = props.textAlignment, textAlignment = _c === void 0 ? 'start' : _c, _d = props.textPosition, textPosition = _d === void 0 ? 'after' : _d;
        var primaryText = react_utilities_1.resolveShorthand(props.primaryText, {
            required: true,
            defaultProps: {
                children: name,
            },
        });
        var secondaryText = react_utilities_1.resolveShorthand(props.secondaryText);
        var tertiaryText = react_utilities_1.resolveShorthand(props.tertiaryText);
        var quaternaryText = react_utilities_1.resolveShorthand(props.quaternaryText);
        var numTextLines = [primaryText, secondaryText, tertiaryText, quaternaryText].filter(Boolean).length;
        return {
            numTextLines: numTextLines,
            presenceOnly: presenceOnly,
            size: size,
            textAlignment: textAlignment,
            textPosition: textPosition,
            components: {
                root: 'div',
                avatar: react_avatar_1.Avatar,
                presence: react_badge_1.PresenceBadge,
                primaryText: 'span',
                secondaryText: 'span',
                tertiaryText: 'span',
                quaternaryText: 'span',
            },
            root: react_utilities_1.getNativeElementProps('div', tslib_1.__assign(tslib_1.__assign({}, props), { ref: ref }), 
            /* excludedPropNames */ ['name']),
            avatar: !presenceOnly
                ? react_utilities_1.resolveShorthand(props.avatar, {
                    required: true,
                    defaultProps: {
                        name: name,
                        badge: props.presence,
                        size: avatarSizes[size],
                    },
                })
                : undefined,
            presence: presenceOnly
                ? react_utilities_1.resolveShorthand(props.presence, {
                    defaultProps: {
                        size: presenceSizes[size],
                    },
                })
                : undefined,
            primaryText: primaryText,
            secondaryText: secondaryText,
            tertiaryText: tertiaryText,
            quaternaryText: quaternaryText,
        };
    };
    exports.usePersona_unstable = usePersona_unstable;
    var presenceSizes = {
        'extra-small': 'tiny',
        small: 'extra-small',
        medium: 'small',
        large: 'medium',
        'extra-large': 'large',
        huge: 'large',
    };
    var avatarSizes = {
        'extra-small': 20,
        small: 28,
        medium: 32,
        large: 36,
        'extra-large': 40,
        huge: 56,
    };
});
//# sourceMappingURL=usePersona.js.map
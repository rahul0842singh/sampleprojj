{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AAGA;;;;;;;;;AASO,MAAMA,mBAAmB,GAAG,CAACC,KAAmB,EAAEC,GAA2B,KAAkB;EACpG,MAAM;IAAEC,IAAI;IAAEC,YAAY,GAAG,KAAK;IAAEC,IAAI,GAAG,QAAQ;IAAEC,aAAa,GAAG,OAAO;IAAEC,YAAY,GAAG;EAAO,CAAE,GAAGN,KAAK;EAE9G,MAAMO,WAAW,GAAGC,kCAAgB,CAACR,KAAK,CAACO,WAAW,EAAE;IACtDE,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE;MACZC,QAAQ,EAAET;;GAEb,CAAC;EACF,MAAMU,aAAa,GAAGJ,kCAAgB,CAACR,KAAK,CAACY,aAAa,CAAC;EAC3D,MAAMC,YAAY,GAAGL,kCAAgB,CAACR,KAAK,CAACa,YAAY,CAAC;EACzD,MAAMC,cAAc,GAAGN,kCAAgB,CAACR,KAAK,CAACc,cAAc,CAAC;EAE7D,MAAMC,YAAY,GAAG,CAACR,WAAW,EAAEK,aAAa,EAAEC,YAAY,EAAEC,cAAc,CAAC,CAACE,MAAM,CAACC,OAAO,CAAC,CAACC,MAAM;EAEtG,OAAO;IACLH,YAAY;IACZZ,YAAY;IACZC,IAAI;IACJC,aAAa;IACbC,YAAY;IAEZa,UAAU,EAAE;MACVC,IAAI,EAAE,KAAK;MACXC,MAAM,EAAEC,qBAAM;MACdC,QAAQ,EAAEC,2BAAa;MACvBjB,WAAW,EAAE,MAAM;MACnBK,aAAa,EAAE,MAAM;MACrBC,YAAY,EAAE,MAAM;MACpBC,cAAc,EAAE;KACjB;IAEDM,IAAI,EAAEZ,uCAAqB,CACzB,KAAK,EACL;MACE,GAAGR,KAAK;MACRC;KACD,EACD,uBAAwB,CAAC,MAAM,CAAC,CACjC;IACDoB,MAAM,EAAE,CAAClB,YAAY,GACjBK,kCAAgB,CAACR,KAAK,CAACqB,MAAM,EAAE;MAC7BZ,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;QACZR,IAAI;QACJuB,KAAK,EAAEzB,KAAK,CAACuB,QAAQ;QACrBnB,IAAI,EAAEsB,WAAW,CAACtB,IAAI;;KAEzB,CAAC,GACFuB,SAAS;IACbJ,QAAQ,EAAEpB,YAAY,GAClBK,kCAAgB,CAACR,KAAK,CAACuB,QAAQ,EAAE;MAC/Bb,YAAY,EAAE;QACZN,IAAI,EAAEwB,aAAa,CAACxB,IAAI;;KAE3B,CAAC,GACFuB,SAAS;IACbpB,WAAW;IACXK,aAAa;IACbC,YAAY;IACZC;GACD;AACH,CAAC;AA9DYe,2BAAmB;AAgEhC,MAAMD,aAAa,GAAG;EACpB,aAAa,EAAE,MAAM;EACrBE,KAAK,EAAE,aAAa;EACpBC,MAAM,EAAE,OAAO;EACfC,KAAK,EAAE,QAAQ;EACf,aAAa,EAAE,OAAO;EACtBC,IAAI,EAAE;CACE;AAEV,MAAMP,WAAW,GAAG;EAClB,aAAa,EAAE,EAAE;EACjBI,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,EAAE;EACVC,KAAK,EAAE,EAAE;EACT,aAAa,EAAE,EAAE;EACjBC,IAAI,EAAE;CACE","names":["usePersona_unstable","props","ref","name","presenceOnly","size","textAlignment","textPosition","primaryText","react_utilities_1","required","defaultProps","children","secondaryText","tertiaryText","quaternaryText","numTextLines","filter","Boolean","length","components","root","avatar","react_avatar_1","presence","react_badge_1","badge","avatarSizes","undefined","presenceSizes","exports","small","medium","large","huge"],"sourceRoot":"../src/","sources":["packages/react-components/react-persona/src/components/Persona/usePersona.ts"],"sourcesContent":["import * as React from 'react';\nimport { Avatar } from '@fluentui/react-avatar';\nimport { getNativeElementProps, resolveShorthand } from '@fluentui/react-utilities';\nimport { PresenceBadge } from '@fluentui/react-badge';\nimport type { PersonaProps, PersonaState } from './Persona.types';\n\n/**\n * Create the state required to render Persona.\n *\n * The returned state can be modified with hooks such as usePersonaStyles_unstable,\n * before being passed to renderPersona_unstable.\n *\n * @param props - props from this instance of Persona\n * @param ref - reference to root HTMLElement of Persona\n */\nexport const usePersona_unstable = (props: PersonaProps, ref: React.Ref<HTMLElement>): PersonaState => {\n  const { name, presenceOnly = false, size = 'medium', textAlignment = 'start', textPosition = 'after' } = props;\n\n  const primaryText = resolveShorthand(props.primaryText, {\n    required: true,\n    defaultProps: {\n      children: name,\n    },\n  });\n  const secondaryText = resolveShorthand(props.secondaryText);\n  const tertiaryText = resolveShorthand(props.tertiaryText);\n  const quaternaryText = resolveShorthand(props.quaternaryText);\n\n  const numTextLines = [primaryText, secondaryText, tertiaryText, quaternaryText].filter(Boolean).length;\n\n  return {\n    numTextLines,\n    presenceOnly,\n    size,\n    textAlignment,\n    textPosition,\n\n    components: {\n      root: 'div',\n      avatar: Avatar,\n      presence: PresenceBadge,\n      primaryText: 'span',\n      secondaryText: 'span',\n      tertiaryText: 'span',\n      quaternaryText: 'span',\n    },\n\n    root: getNativeElementProps(\n      'div',\n      {\n        ...props,\n        ref,\n      },\n      /* excludedPropNames */ ['name'],\n    ),\n    avatar: !presenceOnly\n      ? resolveShorthand(props.avatar, {\n          required: true,\n          defaultProps: {\n            name,\n            badge: props.presence,\n            size: avatarSizes[size],\n          },\n        })\n      : undefined,\n    presence: presenceOnly\n      ? resolveShorthand(props.presence, {\n          defaultProps: {\n            size: presenceSizes[size],\n          },\n        })\n      : undefined,\n    primaryText,\n    secondaryText,\n    tertiaryText,\n    quaternaryText,\n  };\n};\n\nconst presenceSizes = {\n  'extra-small': 'tiny',\n  small: 'extra-small',\n  medium: 'small',\n  large: 'medium',\n  'extra-large': 'large',\n  huge: 'large',\n} as const;\n\nconst avatarSizes = {\n  'extra-small': 20,\n  small: 28,\n  medium: 32,\n  large: 36,\n  'extra-large': 40,\n  huge: 56,\n} as const;\n"]}
define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSelectStyles_unstable = exports.selectClassNames = void 0;
    exports.selectClassNames = {
        root: 'fui-Select',
        select: 'fui-Select__select',
        icon: 'fui-Select__icon',
    };
    var iconSizes = {
        small: '16px',
        medium: '20px',
        large: '24px',
    };
    //TODO: Should fieldHeights be a set of global design tokens or constants?
    var fieldHeights = {
        small: '24px',
        medium: '32px',
        large: '40px',
    };
    /* Since the <select> element must span the full width and cannot have children,
     * the right padding needs to be calculated from the sum of the following:
     * 1. Field padding-right
     * 2. Icon width
     * 3. Content-icon spacing
     * 4. Content inner padding
     */
    var paddingRight = {
        small: "calc(" + react_theme_1.tokens.spacingHorizontalSNudge + "\n    + " + iconSizes.small + "\n    + " + react_theme_1.tokens.spacingHorizontalXXS + "\n    + " + react_theme_1.tokens.spacingHorizontalXXS + ")",
        medium: "calc(" + react_theme_1.tokens.spacingHorizontalMNudge + "\n    + " + iconSizes.medium + "\n    + " + react_theme_1.tokens.spacingHorizontalXXS + "\n    + " + react_theme_1.tokens.spacingHorizontalXXS + ")",
        large: "calc(" + react_theme_1.tokens.spacingHorizontalM + "\n    + " + iconSizes.large + "\n    + " + react_theme_1.tokens.spacingHorizontalSNudge + "\n    + " + react_theme_1.tokens.spacingHorizontalSNudge + ")",
    };
    /* Left padding is calculated from the outer padding + inner content padding values
     * since <select> can't have additional child content or custom inner layout */
    var paddingLeft = {
        small: "calc(" + react_theme_1.tokens.spacingHorizontalSNudge + " + " + react_theme_1.tokens.spacingHorizontalXXS + ")",
        medium: "calc(" + react_theme_1.tokens.spacingHorizontalMNudge + " + " + react_theme_1.tokens.spacingHorizontalXXS + ")",
        large: "calc(" + react_theme_1.tokens.spacingHorizontalM + " + " + react_theme_1.tokens.spacingHorizontalSNudge + ")",
    };
    /* end of shared values */
    var useRootStyles = react_1.makeStyles({
        base: {
            alignItems: 'center',
            boxSizing: 'border-box',
            display: 'flex',
            flexWrap: 'nowrap',
            fontFamily: react_theme_1.tokens.fontFamilyBase,
            position: 'relative',
            '&::after': tslib_1.__assign(tslib_1.__assign({ backgroundImage: "linear-gradient(\n        0deg,\n        " + react_theme_1.tokens.colorCompoundBrandStroke + " 0%,\n        " + react_theme_1.tokens.colorCompoundBrandStroke + " 50%,\n        transparent 50%,\n        transparent 100%\n      )" }, react_1.shorthands.borderRadius(0, 0, react_theme_1.tokens.borderRadiusMedium, react_theme_1.tokens.borderRadiusMedium)), { boxSizing: 'border-box', content: '""', height: react_theme_1.tokens.borderRadiusMedium, position: 'absolute', bottom: '0', left: '0', right: '0', transform: 'scaleX(0)', transitionProperty: 'transform', transitionDuration: react_theme_1.tokens.durationUltraFast, transitionDelay: react_theme_1.tokens.curveAccelerateMid, '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                } }),
            '&:focus-within::after': {
                transform: 'scaleX(1)',
                transitionProperty: 'transform',
                transitionDuration: react_theme_1.tokens.durationNormal,
                transitionDelay: react_theme_1.tokens.curveDecelerateMid,
                '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                },
            },
        },
    });
    var useSelectStyles = react_1.makeStyles({
        base: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ appearance: 'none' }, react_1.shorthands.border('1px', 'solid', 'transparent')), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { boxShadow: 'none', boxSizing: 'border-box', color: react_theme_1.tokens.colorNeutralForeground1, cursor: 'pointer', flexGrow: 1, maxWidth: '100%', paddingBottom: 0, paddingTop: 0, ':focus': {
                outlineWidth: '2px',
                outlineStyle: 'solid',
                outlineColor: 'transparent',
            } }),
        disabled: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)), { color: react_theme_1.tokens.colorNeutralForegroundDisabled, cursor: 'not-allowed', '@media (forced-colors: active)': tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')) }),
        disabledUnderline: tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorTransparentStrokeDisabled, react_theme_1.tokens.colorTransparentStrokeDisabled, react_theme_1.tokens.colorNeutralStrokeDisabled)),
        small: tslib_1.__assign({ height: fieldHeights.small, paddingLeft: paddingLeft.small, paddingRight: paddingRight.small }, react_theme_1.typographyStyles.caption1),
        medium: tslib_1.__assign({ height: fieldHeights.medium, paddingLeft: paddingLeft.medium, paddingRight: paddingRight.medium }, react_theme_1.typographyStyles.body1),
        large: tslib_1.__assign({ height: fieldHeights.large, paddingLeft: paddingLeft.large, paddingRight: paddingRight.large }, react_theme_1.typographyStyles.body2),
        outline: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground1 }, react_1.shorthands.border('1px', 'solid', react_theme_1.tokens.colorNeutralStroke1)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible }),
        outlineInteractive: {
            '&:hover': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Hover)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible }),
            '&:active': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Pressed)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible }),
        },
        underline: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderBottom('1px', 'solid', react_theme_1.tokens.colorNeutralStrokeAccessible)), react_1.shorthands.borderRadius(0)),
        'filled-lighter': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground1,
        },
        'filled-darker': {
            backgroundColor: react_theme_1.tokens.colorNeutralBackground3,
        },
        invalid: {
            ':not(:focus-within),:hover:not(:focus-within)': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteRedBorder2)),
        },
        invalidUnderline: {
            ':not(:focus-within),:hover:not(:focus-within)': {
                borderBottomColor: react_theme_1.tokens.colorPaletteRedBorder2,
            },
        },
    });
    var useIconStyles = react_1.makeStyles({
        icon: {
            boxSizing: 'border-box',
            color: react_theme_1.tokens.colorNeutralStrokeAccessible,
            display: 'block',
            position: 'absolute',
            pointerEvents: 'none',
            // the SVG must have display: block for accurate positioning
            // otherwise an extra inline space is inserted after the svg element
            '& svg': {
                display: 'block',
            },
        },
        disabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            '@media (forced-colors: active)': {
                color: 'GrayText',
            },
        },
        small: {
            fontSize: iconSizes.small,
            height: iconSizes.small,
            right: react_theme_1.tokens.spacingHorizontalSNudge,
            width: iconSizes.small,
        },
        medium: {
            fontSize: iconSizes.medium,
            height: iconSizes.medium,
            right: react_theme_1.tokens.spacingHorizontalMNudge,
            width: iconSizes.medium,
        },
        large: {
            fontSize: iconSizes.large,
            height: iconSizes.large,
            right: react_theme_1.tokens.spacingHorizontalM,
            width: iconSizes.large,
        },
    });
    /**
     * Apply styling to the Select slots based on the state
     */
    var useSelectStyles_unstable = function (state) {
        var size = state.size, appearance = state.appearance;
        var disabled = state.select.disabled;
        var invalid = "" + state.select['aria-invalid'] === 'true';
        var iconStyles = useIconStyles();
        var rootStyles = useRootStyles();
        var selectStyles = useSelectStyles();
        state.root.className = react_1.mergeClasses(exports.selectClassNames.root, rootStyles.base, state.root.className);
        state.select.className = react_1.mergeClasses(exports.selectClassNames.select, selectStyles.base, selectStyles[size], selectStyles[appearance], !disabled && appearance === 'outline' && selectStyles.outlineInteractive, !disabled && invalid && appearance !== 'underline' && selectStyles.invalid, !disabled && invalid && appearance === 'underline' && selectStyles.invalidUnderline, disabled && selectStyles.disabled, disabled && appearance === 'underline' && selectStyles.disabledUnderline, state.select.className);
        if (state.icon) {
            state.icon.className = react_1.mergeClasses(exports.selectClassNames.icon, iconStyles.icon, disabled && iconStyles.disabled, iconStyles[size], state.icon.className);
        }
        return state;
    };
    exports.useSelectStyles_unstable = useSelectStyles_unstable;
});
//# sourceMappingURL=useSelectStyles.js.map
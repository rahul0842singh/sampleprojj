{"version":3,"mappings":"AACA,SACEA,yBAAyB,EACzBC,gBAAgB,EAChBC,oBAAoB,EACpBC,gBAAgB,QACX,2BAA2B;AAElC,SAASC,qBAAqB,IAAIC,YAAY,QAAQ,iCAAiC;AAEvF;;;;;;;;;AASA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,KAAoB,EAAEC,GAAmC,KAAmB;;EAC/G,MAAMC,SAAS,GAAGJ,YAAY,EAAE;EAEhC,MAAM;IACJK,IAAI,GAAG,QAAQ;IACfC,UAAU,GAAG,eAAS,CAACC,sBAAsB,mCAAI,SAAS;IAC1DC,MAAM,GAAG,MAAM;IACfC;EAAQ,CACT,GAAGP,KAAK;EAET,IACEQ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,KACpCN,UAAU,KAAK,sBAAsB,IAAIA,UAAU,KAAK,uBAAuB,CAAC,EACjF;IACA;IACAO,OAAO,CAACC,KAAK,CACX,8GAA8G,GAC5G,UAAU,CACb;;EAGH,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,oBAAoB,CAAC;IAC7CoB,KAAK,EAAEf,KAAK,CAACa,KAAK;IAClBG,YAAY,EAAEhB,KAAK,CAACiB,YAAY;IAChCC,YAAY,EAAEC;GACf,CAAC;EAEF,MAAMC,WAAW,GAAG3B,yBAAyB,CAAC;IAC5CO,KAAK;IACLqB,kBAAkB,EAAE,UAAU;IAC9BC,iBAAiB,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc;GACxD,CAAC;EAEF,MAAMP,KAAK,GAAkB;IAC3BZ,IAAI;IACJC,UAAU;IACVE,MAAM;IACNiB,UAAU,EAAE;MACVC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE;KACX;IACDA,QAAQ,EAAE/B,gBAAgB,CAACM,KAAK,CAACyB,QAAQ,EAAE;MACzCC,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;QACZ1B,GAAG;QACH,GAAGmB,WAAW,CAACQ;;KAElB,CAAC;IACFJ,IAAI,EAAE9B,gBAAgB,CAACM,KAAK,CAACwB,IAAI,EAAE;MACjCE,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAEP,WAAW,CAACI;KAC3B;GACF;EAEDT,KAAK,CAACU,QAAQ,CAACZ,KAAK,GAAGA,KAAK;EAC5BE,KAAK,CAACU,QAAQ,CAAClB,QAAQ,GAAGX,gBAAgB,CAACiC,EAAE,IAAG;IAC9C,MAAMC,QAAQ,GAAGD,EAAE,CAACE,MAAM,CAAClB,KAAK;IAChCN,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGsB,EAAE,EAAE;MAAEhB,KAAK,EAAEiB;IAAQ,CAAE,CAAC;IACnChB,QAAQ,CAACgB,QAAQ,CAAC;EACpB,CAAC,CAAC;EAEF,OAAOf,KAAK;AACd,CAAC","names":["getPartitionedNativeProps","resolveShorthand","useControllableState","useEventCallback","useOverrides_unstable","useOverrides","useTextarea_unstable","props","ref","overrides","size","appearance","inputDefaultAppearance","resize","onChange","process","env","NODE_ENV","console","error","value","setValue","state","defaultState","defaultValue","initialState","undefined","nativeProps","primarySlotTagName","excludedPropNames","components","root","textarea","required","defaultProps","primary","ev","newValue","target"],"sourceRoot":"../src/","sources":["packages/react-components/react-textarea/src/components/Textarea/useTextarea.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  getPartitionedNativeProps,\n  resolveShorthand,\n  useControllableState,\n  useEventCallback,\n} from '@fluentui/react-utilities';\nimport type { TextareaProps, TextareaState } from './Textarea.types';\nimport { useOverrides_unstable as useOverrides } from '@fluentui/react-shared-contexts';\n\n/**\n * Create the state required to render Textarea.\n *\n * The returned state can be modified with hooks such as useTextareaStyles_unstable,\n * before being passed to renderTextarea_unstable.\n *\n * @param props - props from this instance of Textarea\n * @param ref - reference to root HTMLElement of Textarea\n */\nexport const useTextarea_unstable = (props: TextareaProps, ref: React.Ref<HTMLTextAreaElement>): TextareaState => {\n  const overrides = useOverrides();\n\n  const {\n    size = 'medium',\n    appearance = overrides.inputDefaultAppearance ?? 'outline',\n    resize = 'none',\n    onChange,\n  } = props;\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    (appearance === 'filled-darker-shadow' || appearance === 'filled-lighter-shadow')\n  ) {\n    // eslint-disable-next-line no-console\n    console.error(\n      \"The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the\" +\n        ' future.',\n    );\n  }\n\n  const [value, setValue] = useControllableState({\n    state: props.value,\n    defaultState: props.defaultValue,\n    initialState: undefined,\n  });\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'textarea',\n    excludedPropNames: ['onChange', 'value', 'defaultValue'],\n  });\n\n  const state: TextareaState = {\n    size,\n    appearance,\n    resize,\n    components: {\n      root: 'span',\n      textarea: 'textarea',\n    },\n    textarea: resolveShorthand(props.textarea, {\n      required: true,\n      defaultProps: {\n        ref,\n        ...nativeProps.primary,\n      },\n    }),\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: nativeProps.root,\n    }),\n  };\n\n  state.textarea.value = value;\n  state.textarea.onChange = useEventCallback(ev => {\n    const newValue = ev.target.value;\n    onChange?.(ev, { value: newValue });\n    setValue(newValue);\n  });\n\n  return state;\n};\n"]}
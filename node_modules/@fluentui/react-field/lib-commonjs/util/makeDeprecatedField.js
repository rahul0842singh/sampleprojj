"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDeprecatedFieldClassNames = exports.makeDeprecatedField = void 0;
/* eslint-disable deprecation/deprecation */
const React = /*#__PURE__*/require("react");
const Field_1 = /*#__PURE__*/require("../Field");
/**
 * Partition the props used by the Field itself, from the props that are passed to the underlying field component.
 */
function getPartitionedFieldProps(props) {
  const {
    className,
    control,
    hint,
    label,
    orientation,
    required,
    root,
    size,
    style,
    validationMessage,
    validationMessageIcon,
    validationState = 'none',
    ...restOfProps
  } = props;
  return [{
    className,
    hint,
    label,
    orientation,
    required,
    size,
    style,
    validationMessage,
    validationMessageIcon,
    validationState,
    ...root
  }, {
    required,
    size,
    ...restOfProps,
    ...control
  }];
}
/**
 * @deprecated Only for use to make deprecated [Control]Field shim components.
 * @internal
 */
function makeDeprecatedField(Control, options = {}) {
  const {
    mapProps = props => props,
    displayName = `${Control.displayName}Field`
  } = options;
  const DeprecatedField = React.forwardRef((props, ref) => {
    const [fieldProps, controlProps] = getPartitionedFieldProps(mapProps(props));
    return React.createElement(Field_1.Field, {
      ...fieldProps
    }, React.createElement(Control, {
      ...controlProps,
      ref: ref
    }));
  });
  DeprecatedField.displayName = displayName;
  return DeprecatedField;
}
exports.makeDeprecatedField = makeDeprecatedField;
/**
 * @deprecated Only for use to make deprecated [Control]Field shim components.
 * @internal
 */
const getDeprecatedFieldClassNames = controlRootClassName => ({
  ...Field_1.fieldClassNames,
  control: controlRootClassName
});
exports.getDeprecatedFieldClassNames = getDeprecatedFieldClassNames;
//# sourceMappingURL=makeDeprecatedField.js.map
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useField_unstable = void 0;
const React = /*#__PURE__*/require("react");
const react_icons_1 = /*#__PURE__*/require("@fluentui/react-icons");
const react_label_1 = /*#__PURE__*/require("@fluentui/react-label");
const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
const validationMessageIcons = {
  error: /*#__PURE__*/React.createElement(react_icons_1.ErrorCircle12Filled, null),
  warning: /*#__PURE__*/React.createElement(react_icons_1.Warning12Filled, null),
  success: /*#__PURE__*/React.createElement(react_icons_1.CheckmarkCircle12Filled, null),
  none: undefined
};
/**
 * Create the state required to render Field.
 *
 * The returned state can be modified with hooks such as useFieldStyles_unstable,
 * before being passed to renderField_unstable.
 *
 * @param props - Props passed to this field
 * @param ref - Ref to the root
 */
const useField_unstable = (props, ref) => {
  var _a, _b, _c, _d;
  const {
    children,
    orientation = 'vertical',
    required,
    validationState = props.validationMessage ? 'error' : 'none',
    size
  } = props;
  const baseId = react_utilities_1.useId('field-');
  const root = react_utilities_1.getNativeElementProps('div', {
    ...props,
    ref
  }, /*excludedPropNames:*/['children']);
  const label = react_utilities_1.resolveShorthand(props.label, {
    defaultProps: {
      id: baseId + '__label',
      required,
      size
      // htmlFor is handled below
    }
  });

  const validationMessage = react_utilities_1.resolveShorthand(props.validationMessage, {
    defaultProps: {
      id: baseId + '__validationMessage',
      role: validationState === 'error' ? 'alert' : undefined
    }
  });
  const hint = react_utilities_1.resolveShorthand(props.hint, {
    defaultProps: {
      id: baseId + '__hint'
    }
  });
  const defaultIcon = validationMessageIcons[validationState];
  const validationMessageIcon = react_utilities_1.resolveShorthand(props.validationMessageIcon, {
    required: !!defaultIcon,
    defaultProps: {
      children: defaultIcon
    }
  });
  const controlProps = React.isValidElement(children) ? {
    ...children.props
  } : {};
  if (label) {
    (_a = controlProps['aria-labelledby']) !== null && _a !== void 0 ? _a : controlProps['aria-labelledby'] = label.id;
    if (!label.htmlFor) {
      // Assign the child a generated ID if doesn't already have an ID
      (_b = controlProps.id) !== null && _b !== void 0 ? _b : controlProps.id = baseId + '__control';
      label.htmlFor = controlProps.id;
    }
  }
  if (validationMessage || hint) {
    // The control is described by the validation message, or hint, or both
    // We also preserve and append any aria-describedby supplied by the user
    // For reference: https://github.com/microsoft/fluentui/pull/25580#discussion_r1017259933
    controlProps['aria-describedby'] = [validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.id, hint === null || hint === void 0 ? void 0 : hint.id, controlProps['aria-describedby']].filter(Boolean).join(' ');
  }
  if (validationState === 'error') {
    (_c = controlProps['aria-invalid']) !== null && _c !== void 0 ? _c : controlProps['aria-invalid'] = true;
  }
  if (required) {
    (_d = controlProps['aria-required']) !== null && _d !== void 0 ? _d : controlProps['aria-required'] = true;
  }
  if (React.isValidElement(children)) {
    root.children = React.cloneElement(children, controlProps);
  } else if (typeof children === 'function') {
    root.children = children(controlProps);
  }
  return {
    orientation,
    validationState,
    components: {
      root: 'div',
      label: react_label_1.Label,
      validationMessage: 'div',
      validationMessageIcon: 'span',
      hint: 'div'
    },
    root,
    label,
    validationMessageIcon,
    validationMessage,
    hint
  };
};
exports.useField_unstable = useField_unstable;
//# sourceMappingURL=useField.js.map
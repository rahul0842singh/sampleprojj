/// <reference types="react" />

import type { ComponentProps } from '@fluentui/react-utilities';
import type { ComponentState } from '@fluentui/react-utilities';
import { ForwardRefComponent } from '@fluentui/react-utilities';
import { Label } from '@fluentui/react-label';
import * as React_2 from 'react';
import type { Slot } from '@fluentui/react-utilities';
import type { SlotClassNames } from '@fluentui/react-utilities';

/**
 * @deprecated Only for use to make deprecated [Control]Field shim components.
 * @internal
 */
export declare type DeprecatedFieldProps<ControlProps> = ControlProps & {
    root?: FieldProps;
    control?: ControlProps;
} & Pick<FieldProps, 'className' | 'hint' | 'label' | 'orientation' | 'style' | 'validationMessage' | 'validationMessageIcon' | 'validationState'>;

export declare const Field: ForwardRefComponent<FieldProps>;

/**
 * The props added to the Field's child element.
 */
declare type FieldChildProps = Pick<React_2.HTMLAttributes<HTMLElement>, 'id' | 'aria-labelledby' | 'aria-describedby' | 'aria-invalid' | 'aria-required'>;

export declare const fieldClassNames: SlotClassNames<FieldSlots>;

/**
 * Field Props
 */
export declare type FieldProps = Omit<ComponentProps<FieldSlots>, 'children'> & {
    /**
     * The Field's child can be a single form control, or a render function that takes the props that should be spread on
     * a form control.
     *
     * All form controls in this library can be used directly as children (such as `<Input>` or `<RadioGroup>`), as well
     * as intrinsic form controls like `<input>` or `<textarea>`. Custom controls can also be used as long as they
     * accept FieldChildProps and spread them on the appropriate element.
     *
     * For more complex scenarios, a render function can be used to pass the FieldChildProps to the appropriate control.
     */
    children?: React_2.ReactElement<FieldChildProps> | null | ((props: FieldChildProps) => React_2.ReactNode);
    /**
     * The orientation of the label relative to the field component.
     * This only affects the label, and not the validationMessage or hint (which always appear below the field component).
     *
     * @default vertical
     */
    orientation?: 'vertical' | 'horizontal';
    /**
     * The `validationState` affects the display of the `validationMessage` and `validationMessageIcon`.
     *
     * * error: (default) The validation message has a red error icon and red text, with `role="alert"` so it is
     *     announced by screen readers. Additionally, the control inside the field has `aria-invalid` set, which adds a
     *     red border to some field components (such as `Input`).
     * * success: The validation message has a green checkmark icon and gray text.
     * * warning: The validation message has a yellow exclamation icon and gray text.
     * * none: The validation message has no icon and gray text.
     *
     * @default error when validationMessage is set; none otherwise.
     */
    validationState?: 'error' | 'warning' | 'success' | 'none';
    /**
     * Marks the Field as required. If `true`, an asterisk will be appended to the label, and `aria-required` will be set
     * on the Field's child.
     */
    required?: boolean;
    /**
     * The size of the Field's label.
     *
     * @default medium
     */
    size?: 'small' | 'medium' | 'large';
};

/**
 * Slots of the Field component
 */
export declare type FieldSlots = {
    root: NonNullable<Slot<'div'>>;
    /**
     * The label associated with the field.
     */
    label?: Slot<typeof Label>;
    /**
     * A message about the validation state. By default, this is an error message, but it can be a success, warning,
     * or custom message by setting `validationState`.
     */
    validationMessage?: Slot<'div'>;
    /**
     * The icon associated with the `validationMessage`. This will only be displayed if `validationMessage` is set.
     *
     * The default depends on `validationState`:
     * * error: `<ErrorCircle12Filled />`
     * * warning: `<Warning12Filled />`
     * * success: `<CheckmarkCircle12Filled />`
     * * none: `null`
     */
    validationMessageIcon?: Slot<'span'>;
    /**
     * Additional hint text below the field.
     */
    hint?: Slot<'div'>;
};

/**
 * State used in rendering Field
 */
export declare type FieldState = ComponentState<Required<FieldSlots>> & Required<Pick<FieldProps, 'orientation' | 'validationState'>>;

/**
 * @deprecated Only for use to make deprecated [Control]Field shim components.
 * @internal
 */
export declare const getDeprecatedFieldClassNames: (controlRootClassName: string) => {
    control: string;
    root: string;
    label: string;
    validationMessage: string;
    validationMessageIcon: string;
    hint: string;
};

/**
 * @deprecated Only for use to make deprecated [Control]Field shim components.
 * @internal
 */
export declare function makeDeprecatedField<ControlProps>(Control: React_2.ComponentType<ControlProps>, options?: {
    mapProps?: (props: DeprecatedFieldProps<ControlProps>) => DeprecatedFieldProps<ControlProps>;
    displayName?: string;
}): ForwardRefComponent<DeprecatedFieldProps<ControlProps>>;

/**
 * Render the final JSX of Field
 */
export declare const renderField_unstable: (state: FieldState) => JSX.Element;

/**
 * Create the state required to render Field.
 *
 * The returned state can be modified with hooks such as useFieldStyles_unstable,
 * before being passed to renderField_unstable.
 *
 * @param props - Props passed to this field
 * @param ref - Ref to the root
 */
export declare const useField_unstable: (props: FieldProps, ref: React_2.Ref<HTMLDivElement>) => FieldState;

/**
 * Apply styling to the Field slots based on the state
 */
export declare const useFieldStyles_unstable: (state: FieldState) => void;

export { }

define(["require", "exports", "tslib", "react", "../Field"], function (require, exports, tslib_1, React, Field_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDeprecatedFieldClassNames = exports.makeDeprecatedField = void 0;
    /**
     * Partition the props used by the Field itself, from the props that are passed to the underlying field component.
     */
    function getPartitionedFieldProps(props) {
        var className = props.className, control = props.control, hint = props.hint, label = props.label, orientation = props.orientation, required = props.required, root = props.root, size = props.size, style = props.style, validationMessage = props.validationMessage, validationMessageIcon = props.validationMessageIcon, _a = props.validationState, validationState = _a === void 0 ? 'none' : _a, restOfProps = tslib_1.__rest(props, ["className", "control", "hint", "label", "orientation", "required", "root", "size", "style", "validationMessage", "validationMessageIcon", "validationState"]);
        return [
            tslib_1.__assign({ className: className, hint: hint, label: label, orientation: orientation, required: required, size: size, style: style, validationMessage: validationMessage, validationMessageIcon: validationMessageIcon, validationState: validationState }, root),
            tslib_1.__assign(tslib_1.__assign({ required: required, size: size }, restOfProps), control),
        ];
    }
    /**
     * @deprecated Only for use to make deprecated [Control]Field shim components.
     * @internal
     */
    function makeDeprecatedField(Control, options) {
        if (options === void 0) { options = {}; }
        var _a = options.mapProps, mapProps = _a === void 0 ? function (props) { return props; } : _a, _b = options.displayName, displayName = _b === void 0 ? Control.displayName + "Field" : _b;
        var DeprecatedField = React.forwardRef(function (props, ref) {
            var _a = getPartitionedFieldProps(mapProps(props)), fieldProps = _a[0], controlProps = _a[1];
            return (React.createElement(Field_1.Field, tslib_1.__assign({}, fieldProps),
                React.createElement(Control, tslib_1.__assign({}, controlProps, { ref: ref }))));
        });
        DeprecatedField.displayName = displayName;
        return DeprecatedField;
    }
    exports.makeDeprecatedField = makeDeprecatedField;
    /**
     * @deprecated Only for use to make deprecated [Control]Field shim components.
     * @internal
     */
    var getDeprecatedFieldClassNames = function (controlRootClassName) { return (tslib_1.__assign(tslib_1.__assign({}, Field_1.fieldClassNames), { control: controlRootClassName })); };
    exports.getDeprecatedFieldClassNames = getDeprecatedFieldClassNames;
});
//# sourceMappingURL=makeDeprecatedField.js.map
define(["require", "exports", "tslib", "react", "@fluentui/react-icons", "@fluentui/react-label", "@fluentui/react-utilities"], function (require, exports, tslib_1, React, react_icons_1, react_label_1, react_utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useField_unstable = void 0;
    var validationMessageIcons = {
        error: React.createElement(react_icons_1.ErrorCircle12Filled, null),
        warning: React.createElement(react_icons_1.Warning12Filled, null),
        success: React.createElement(react_icons_1.CheckmarkCircle12Filled, null),
        none: undefined,
    };
    /**
     * Create the state required to render Field.
     *
     * The returned state can be modified with hooks such as useFieldStyles_unstable,
     * before being passed to renderField_unstable.
     *
     * @param props - Props passed to this field
     * @param ref - Ref to the root
     */
    var useField_unstable = function (props, ref) {
        var _a, _b, _c, _d;
        var children = props.children, _e = props.orientation, orientation = _e === void 0 ? 'vertical' : _e, required = props.required, _f = props.validationState, validationState = _f === void 0 ? props.validationMessage ? 'error' : 'none' : _f, size = props.size;
        var baseId = react_utilities_1.useId('field-');
        var root = react_utilities_1.getNativeElementProps('div', tslib_1.__assign(tslib_1.__assign({}, props), { ref: ref }), /*excludedPropNames:*/ ['children']);
        var label = react_utilities_1.resolveShorthand(props.label, {
            defaultProps: {
                id: baseId + '__label',
                required: required,
                size: size,
                // htmlFor is handled below
            },
        });
        var validationMessage = react_utilities_1.resolveShorthand(props.validationMessage, {
            defaultProps: {
                id: baseId + '__validationMessage',
                role: validationState === 'error' ? 'alert' : undefined,
            },
        });
        var hint = react_utilities_1.resolveShorthand(props.hint, {
            defaultProps: {
                id: baseId + '__hint',
            },
        });
        var defaultIcon = validationMessageIcons[validationState];
        var validationMessageIcon = react_utilities_1.resolveShorthand(props.validationMessageIcon, {
            required: !!defaultIcon,
            defaultProps: {
                children: defaultIcon,
            },
        });
        var controlProps = React.isValidElement(children) ? tslib_1.__assign({}, children.props) : {};
        if (label) {
            (_a = controlProps['aria-labelledby']) !== null && _a !== void 0 ? _a : (controlProps['aria-labelledby'] = label.id);
            if (!label.htmlFor) {
                // Assign the child a generated ID if doesn't already have an ID
                (_b = controlProps.id) !== null && _b !== void 0 ? _b : (controlProps.id = baseId + '__control');
                label.htmlFor = controlProps.id;
            }
        }
        if (validationMessage || hint) {
            // The control is described by the validation message, or hint, or both
            // We also preserve and append any aria-describedby supplied by the user
            // For reference: https://github.com/microsoft/fluentui/pull/25580#discussion_r1017259933
            controlProps['aria-describedby'] = [validationMessage === null || validationMessage === void 0 ? void 0 : validationMessage.id, hint === null || hint === void 0 ? void 0 : hint.id, controlProps['aria-describedby']]
                .filter(Boolean)
                .join(' ');
        }
        if (validationState === 'error') {
            (_c = controlProps['aria-invalid']) !== null && _c !== void 0 ? _c : (controlProps['aria-invalid'] = true);
        }
        if (required) {
            (_d = controlProps['aria-required']) !== null && _d !== void 0 ? _d : (controlProps['aria-required'] = true);
        }
        if (React.isValidElement(children)) {
            root.children = React.cloneElement(children, controlProps);
        }
        else if (typeof children === 'function') {
            root.children = children(controlProps);
        }
        return {
            orientation: orientation,
            validationState: validationState,
            components: {
                root: 'div',
                label: react_label_1.Label,
                validationMessage: 'div',
                validationMessageIcon: 'span',
                hint: 'div',
            },
            root: root,
            label: label,
            validationMessageIcon: validationMessageIcon,
            validationMessage: validationMessage,
            hint: hint,
        };
    };
    exports.useField_unstable = useField_unstable;
});
//# sourceMappingURL=useField.js.map
define(["require", "exports", "tslib", "@fluentui/react-theme", "@griffel/react"], function (require, exports, tslib_1, react_theme_1, react_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useFieldStyles_unstable = exports.fieldClassNames = void 0;
    exports.fieldClassNames = {
        root: "fui-Field",
        label: "fui-Field__label",
        validationMessage: "fui-Field__validationMessage",
        validationMessageIcon: "fui-Field__validationMessageIcon",
        hint: "fui-Field__hint",
    };
    // Size of the icon in the validation message
    var iconSize = '12px';
    /**
     * Styles for the root slot
     */
    var useRootStyles = react_1.makeStyles({
        base: {
            display: 'grid',
        },
        // In horizontal layout, the field is a grid with the label taking up the entire first column.
        // The last row is slack space in case the label is taller than the rest of the content.
        horizontal: {
            gridTemplateColumns: '33% 1fr',
            gridTemplateRows: 'auto auto auto 1fr',
        },
        // In horizontal layout without a label, replace the label's column with padding.
        // This lets grid auto-flow properly place the other children, and keeps fields with and without labels aligned.
        horizontalNoLabel: {
            paddingLeft: '33%',
            gridTemplateColumns: '1fr',
        },
    });
    var useLabelStyles = react_1.makeStyles({
        base: {
            paddingTop: react_theme_1.tokens.spacingVerticalXXS,
            paddingBottom: react_theme_1.tokens.spacingVerticalXXS,
        },
        large: {
            paddingTop: '1px',
            paddingBottom: '1px',
        },
        vertical: {
            marginBottom: react_theme_1.tokens.spacingVerticalXXS,
        },
        verticalLarge: {
            marginBottom: react_theme_1.tokens.spacingVerticalXS,
        },
        horizontal: {
            marginRight: react_theme_1.tokens.spacingHorizontalM,
            gridRowStart: '1',
            gridRowEnd: '-1',
        },
    });
    var useSecondaryTextBaseClassName = react_1.makeResetStyles(tslib_1.__assign({ marginTop: react_theme_1.tokens.spacingVerticalXXS, color: react_theme_1.tokens.colorNeutralForeground3 }, react_theme_1.typographyStyles.caption1));
    var useSecondaryTextStyles = react_1.makeStyles({
        error: {
            color: react_theme_1.tokens.colorPaletteRedForeground1,
        },
        withIcon: {
            // Add a gutter for the icon, to allow multiple lines of text to line up to the right of the icon.
            paddingLeft: "calc(" + iconSize + " + " + react_theme_1.tokens.spacingHorizontalXS + ")",
        },
    });
    var useValidationMessageIconBaseClassName = react_1.makeResetStyles({
        display: 'inline-block',
        fontSize: iconSize,
        // Negative left margin puts the icon in the gutter of the validation message div's withIcon style.
        marginLeft: "calc(-" + iconSize + " - " + react_theme_1.tokens.spacingHorizontalXS + ")",
        marginRight: react_theme_1.tokens.spacingHorizontalXS,
        // Line height of 0 prevents the verticalAlign from affecting the line height of the text.
        lineHeight: '0',
        // Negative verticalAlign shifts the inline icon down to align with the text (effectively top padding).
        verticalAlign: '-1px',
    });
    var useValidationMessageIconStyles = react_1.makeStyles({
        error: {
            color: react_theme_1.tokens.colorPaletteRedForeground1,
        },
        warning: {
            color: react_theme_1.tokens.colorPaletteDarkOrangeForeground1,
        },
        success: {
            color: react_theme_1.tokens.colorPaletteGreenForeground1,
        },
    });
    /**
     * Apply styling to the Field slots based on the state
     */
    var useFieldStyles_unstable = function (state) {
        var validationState = state.validationState;
        var horizontal = state.orientation === 'horizontal';
        var rootStyles = useRootStyles();
        state.root.className = react_1.mergeClasses(exports.fieldClassNames.root, rootStyles.base, horizontal && rootStyles.horizontal, horizontal && !state.label && rootStyles.horizontalNoLabel, state.root.className);
        var labelStyles = useLabelStyles();
        if (state.label) {
            state.label.className = react_1.mergeClasses(exports.fieldClassNames.label, labelStyles.base, horizontal && labelStyles.horizontal, !horizontal && labelStyles.vertical, state.label.size === 'large' && labelStyles.large, !horizontal && state.label.size === 'large' && labelStyles.verticalLarge, state.label.className);
        }
        var validationMessageIconBaseClassName = useValidationMessageIconBaseClassName();
        var validationMessageIconStyles = useValidationMessageIconStyles();
        if (state.validationMessageIcon) {
            state.validationMessageIcon.className = react_1.mergeClasses(exports.fieldClassNames.validationMessageIcon, validationMessageIconBaseClassName, validationState !== 'none' && validationMessageIconStyles[validationState], state.validationMessageIcon.className);
        }
        var secondaryTextBaseClassName = useSecondaryTextBaseClassName();
        var secondaryTextStyles = useSecondaryTextStyles();
        if (state.validationMessage) {
            state.validationMessage.className = react_1.mergeClasses(exports.fieldClassNames.validationMessage, secondaryTextBaseClassName, validationState === 'error' && secondaryTextStyles.error, !!state.validationMessageIcon && secondaryTextStyles.withIcon, state.validationMessage.className);
        }
        if (state.hint) {
            state.hint.className = react_1.mergeClasses(exports.fieldClassNames.hint, secondaryTextBaseClassName, state.hint.className);
        }
    };
    exports.useFieldStyles_unstable = useFieldStyles_unstable;
});
//# sourceMappingURL=useFieldStyles.js.map
{"version":3,"mappings":";;;;;;AAAA;AACA;AAGA;;;AAGO,MAAMA,sBAAsB,GAAIC,KAAmB,IAAI;EAC5D,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAE,GAAGC,0BAAQ,CAAeH,KAAK,CAAC;EAC1D,OACEI,oBAACH,KAAK,CAACI,IAAI;IAAA,GAAKH,SAAS,CAACG;EAAI,GAC3BH,SAAS,CAACG,IAAI,CAACC,QAAQ,KAAKC,SAAS,IACpCH,oBAACH,KAAK,CAACO,OAAO;IAAA,GAAKN,SAAS,CAACM;EAAO,GAAGN,SAAS,CAACG,IAAI,CAACC,QAAQ,CAC/D,CACU;AAEjB,CAAC;AATYG,8BAAsB","names":["renderDivider_unstable","state","slots","slotProps","react_utilities_1","React","root","children","undefined","wrapper","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-divider/src/components/Divider/renderDivider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getSlots } from '@fluentui/react-utilities';\nimport { DividerSlots, DividerState } from './Divider.types';\n\n/**\n * Renders a Divider component by passing the slot props (defined in `state`) to the appropriate slots.\n */\nexport const renderDivider_unstable = (state: DividerState) => {\n  const { slots, slotProps } = getSlots<DividerSlots>(state);\n  return (\n    <slots.root {...slotProps.root}>\n      {slotProps.root.children !== undefined && (\n        <slots.wrapper {...slotProps.wrapper}>{slotProps.root.children}</slots.wrapper>\n      )}\n    </slots.root>\n  );\n};\n"]}
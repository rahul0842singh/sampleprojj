{"version":3,"mappings":";;;;;;AACA;AAGA;;;;;AAKO,MAAMA,mBAAmB,GAAG,CAACC,KAAmB,EAAEC,GAA2B,KAAkB;EACpG,MAAM;IAAEC,YAAY,GAAG,QAAQ;IAAEC,UAAU,GAAG,SAAS;IAAEC,KAAK,GAAG,KAAK;IAAEC,QAAQ,GAAG,KAAK;IAAEC;EAAO,CAAE,GAAGN,KAAK;EAC3G,MAAMO,SAAS,GAAGC,uBAAK,CAAC,UAAU,CAAC;EAEnC,OAAO;IACL;IACAN,YAAY;IACZC,UAAU;IACVC,KAAK;IACLC,QAAQ;IAER;IACAI,UAAU,EAAE;MACVC,IAAI,EAAE,KAAK;MACXJ,OAAO,EAAE;KACV;IAEDI,IAAI,EAAEF,uCAAqB,CAAC,KAAK,EAAE;MACjCG,IAAI,EAAE,WAAW;MACjB,kBAAkB,EAAEN,QAAQ,GAAG,UAAU,GAAG,YAAY;MACxD,iBAAiB,EAAEL,KAAK,CAACY,QAAQ,GAAGL,SAAS,GAAGM,SAAS;MACzD,GAAGb,KAAK;MACRC;KACD,CAAC;IACFK,OAAO,EAAEE,kCAAgB,CAACF,OAAO,EAAE;MACjCQ,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE;QACZC,EAAE,EAAET,SAAS;QACbK,QAAQ,EAAEZ,KAAK,CAACY;;KAEnB;GACF;AACH,CAAC;AAhCYK,2BAAmB","names":["useDivider_unstable","props","ref","alignContent","appearance","inset","vertical","wrapper","dividerId","react_utilities_1","components","root","role","children","undefined","required","defaultProps","id","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-divider/src/components/Divider/useDivider.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useId } from '@fluentui/react-utilities';\nimport type { DividerProps, DividerState } from './Divider.types';\n\n/**\n * Returns the props and state required to render the component\n * @param props - User-provided props to the Divider component.\n * @param ref - User-provided ref to be passed to the Divider component.\n */\nexport const useDivider_unstable = (props: DividerProps, ref: React.Ref<HTMLElement>): DividerState => {\n  const { alignContent = 'center', appearance = 'default', inset = false, vertical = false, wrapper } = props;\n  const dividerId = useId('divider-');\n\n  return {\n    // Props passed at the top-level\n    alignContent,\n    appearance,\n    inset,\n    vertical,\n\n    // Slots definition\n    components: {\n      root: 'div',\n      wrapper: 'div',\n    },\n\n    root: getNativeElementProps('div', {\n      role: 'separator',\n      'aria-orientation': vertical ? 'vertical' : 'horizontal',\n      'aria-labelledby': props.children ? dividerId : undefined,\n      ...props,\n      ref,\n    }),\n    wrapper: resolveShorthand(wrapper, {\n      required: true,\n      defaultProps: {\n        id: dividerId,\n        children: props.children,\n      },\n    }),\n  };\n};\n"]}
define(["require", "exports", "react", "@fluentui/react-shared-contexts", "@griffel/react", "@fluentui/react-tabster", "use-disposable"], function (require, exports, React, react_shared_contexts_1, react_1, react_tabster_1, use_disposable_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.usePortalMountNode = void 0;
    var useInsertionEffect = React['useInsertion' + 'Effect'];
    var useStyles = react_1.makeStyles({
        root: {
            position: 'relative',
            zIndex: 1000000,
        },
    });
    var reactMajorVersion = Number(React.version.split('.')[0]);
    /**
     * Creates a new element on a document.body to mount portals
     */
    var usePortalMountNode = function (options) {
        var _a = react_shared_contexts_1.useFluent_unstable(), targetDocument = _a.targetDocument, dir = _a.dir;
        var focusVisibleRef = react_tabster_1.useFocusVisible();
        var classes = useStyles();
        var themeClassName = react_shared_contexts_1.useThemeClassName_unstable();
        var className = react_1.mergeClasses(themeClassName, classes.root);
        var element = use_disposable_1.useDisposable(function () {
            if (targetDocument === undefined || options.disabled) {
                return [null, function () { return null; }];
            }
            var newElement = targetDocument.createElement('div');
            targetDocument.body.appendChild(newElement);
            return [newElement, function () { return newElement.remove(); }];
        }, [targetDocument]);
        if (reactMajorVersion >= 18) {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            useInsertionEffect(function () {
                var _a;
                if (!element) {
                    return;
                }
                var classesToApply = className.split(' ').filter(Boolean);
                (_a = element.classList).add.apply(_a, classesToApply);
                element.setAttribute('dir', dir);
                focusVisibleRef.current = element;
                return function () {
                    var _a;
                    (_a = element.classList).remove.apply(_a, classesToApply);
                    element.removeAttribute('dir');
                };
            }, [className, dir, element, focusVisibleRef]);
        }
        else {
            // This useMemo call is intentional for React 17
            // We don't want to re-create the portal element when its attributes change.
            // This also should not be done in an effect because, changing the value of css variables
            // after initial mount can trigger interesting CSS side effects like transitions.
            // eslint-disable-next-line react-hooks/rules-of-hooks
            React.useMemo(function () {
                if (!element) {
                    return;
                }
                // Force replace all classes
                element.className = className;
                element.setAttribute('dir', dir);
                focusVisibleRef.current = element;
            }, [className, dir, element, focusVisibleRef]);
        }
        return element;
    };
    exports.usePortalMountNode = usePortalMountNode;
});
//# sourceMappingURL=usePortalMountNode.js.map
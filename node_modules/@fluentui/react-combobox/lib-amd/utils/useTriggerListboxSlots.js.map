{"version":3,"file":"useTriggerListboxSlots.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-combobox/src/utils/useTriggerListboxSlots.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, useId, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport type { ExtractSlotProps, Slot } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey, getIndexFromAction } from '../utils/dropdownKeyActions';\nimport { Listbox } from '../components/Listbox/Listbox';\nimport type { ComboboxBaseProps, ComboboxBaseState } from './ComboboxBase.types';\n\nexport function useTriggerListboxSlots(\n  props: ComboboxBaseProps,\n  state: ComboboxBaseState,\n  ref: React.Ref<HTMLButtonElement>,\n  triggerSlot?: ExtractSlotProps<Slot<'button'>>,\n  listboxSlot?: ExtractSlotProps<Slot<typeof Listbox>>,\n): [trigger: ExtractSlotProps<Slot<'button'>>, listbox?: ExtractSlotProps<Slot<typeof Listbox>>];\nexport function useTriggerListboxSlots(\n  props: ComboboxBaseProps,\n  state: ComboboxBaseState,\n  ref: React.Ref<HTMLInputElement>,\n  triggerSlot?: ExtractSlotProps<Slot<'input'>>,\n  listboxSlot?: ExtractSlotProps<Slot<typeof Listbox>>,\n): [trigger: ExtractSlotProps<Slot<'input'>>, listbox?: ExtractSlotProps<Slot<typeof Listbox>>];\n\n/*\n * useTriggerListboxSlots returns a tuple of trigger/listbox shorthand,\n * with the semantics and event handlers needed for the Combobox and Dropdown components.\n * The element type of the ref should always match the element type used in the trigger shorthand.\n */\nexport function useTriggerListboxSlots(\n  props: ComboboxBaseProps,\n  state: ComboboxBaseState,\n  ref: React.Ref<HTMLButtonElement | HTMLInputElement>,\n  triggerSlot?: ExtractSlotProps<Slot<'input'>> | ExtractSlotProps<Slot<'button'>>,\n  listboxSlot?: ExtractSlotProps<Slot<typeof Listbox>>,\n): [\n  trigger: ExtractSlotProps<Slot<'input'>> | ExtractSlotProps<Slot<'button'>>,\n  listbox?: ExtractSlotProps<Slot<typeof Listbox>>,\n] {\n  const { multiselect } = props;\n  const {\n    activeOption,\n    getCount,\n    getIndexOfId,\n    getOptionAtIndex,\n    ignoreNextBlur,\n    open,\n    selectOption,\n    setActiveOption,\n    setFocusVisible,\n    setHasFocus,\n    setOpen,\n  } = state;\n\n  // handle trigger focus/blur\n  const triggerRef: typeof ref = React.useRef(null);\n\n  // resolve listbox shorthand props\n  const listboxId = useId('fluent-listbox', listboxSlot?.id);\n  const listbox: typeof listboxSlot = listboxSlot && {\n    id: listboxId,\n    multiselect,\n    tabIndex: undefined,\n    ...listboxSlot,\n  };\n\n  // resolve trigger shorthand props\n  const trigger: typeof triggerSlot = {\n    'aria-expanded': open,\n    'aria-activedescendant': open ? activeOption?.id : undefined,\n    role: 'combobox',\n    ...triggerSlot,\n    // explicitly type the ref as an intersection here to prevent type errors\n    // since the `children` prop has mutually incompatible types between input/button\n    // functionally both ref and triggerRef will always be the same element type\n    ref: useMergedRefs(ref, triggerSlot?.ref, triggerRef) as React.Ref<HTMLButtonElement & HTMLInputElement>,\n  };\n\n  /*\n   * Handle focus when clicking the listbox popup:\n   * 1. Move focus back to the button/input when the listbox is clicked (otherwise it goes to body)\n   * 2. Do not close the listbox on button/input blur when clicking into the listbox\n   */\n  const listboxOnClick = useEventCallback(\n    mergeCallbacks((event: React.MouseEvent<HTMLDivElement>) => {\n      triggerRef.current?.focus();\n    }, listbox?.onClick),\n  );\n\n  const listboxOnMouseOver = useEventCallback(\n    mergeCallbacks((event: React.MouseEvent<HTMLDivElement>) => {\n      setFocusVisible(false);\n    }, listbox?.onMouseOver),\n  );\n\n  const listboxOnMouseDown = useEventCallback(\n    mergeCallbacks((event: React.MouseEvent<HTMLDivElement>) => {\n      ignoreNextBlur.current = true;\n    }, listbox?.onMouseDown),\n  );\n\n  // listbox is nullable, only add event handlers if it exists\n  if (listbox) {\n    listbox.onClick = listboxOnClick;\n    listbox.onMouseOver = listboxOnMouseOver;\n    listbox.onMouseDown = listboxOnMouseDown;\n  }\n\n  // the trigger should open/close the popup on click or blur\n  trigger.onBlur = mergeCallbacks((event: React.FocusEvent<HTMLButtonElement> & React.FocusEvent<HTMLInputElement>) => {\n    if (!ignoreNextBlur.current) {\n      setOpen(event, false);\n    }\n\n    ignoreNextBlur.current = false;\n\n    setHasFocus(false);\n  }, trigger.onBlur);\n\n  trigger.onClick = mergeCallbacks(\n    (event: React.MouseEvent<HTMLButtonElement> & React.MouseEvent<HTMLInputElement>) => {\n      setOpen(event, !open);\n    },\n    trigger.onClick,\n  );\n\n  trigger.onFocus = mergeCallbacks(\n    (event: React.FocusEvent<HTMLButtonElement> & React.FocusEvent<HTMLInputElement>) => {\n      setHasFocus(true);\n    },\n    trigger.onFocus,\n  );\n\n  // handle combobox keyboard interaction\n  trigger.onKeyDown = mergeCallbacks(\n    (event: React.KeyboardEvent<HTMLButtonElement> & React.KeyboardEvent<HTMLInputElement>) => {\n      const action = getDropdownActionFromKey(event, { open, multiselect });\n      const maxIndex = getCount() - 1;\n      const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;\n      let newIndex = activeIndex;\n\n      switch (action) {\n        case 'Open':\n          event.preventDefault();\n          setFocusVisible(true);\n          setOpen(event, true);\n          break;\n        case 'Close':\n          // stop propagation for escape key to avoid dismissing any parent popups\n          event.stopPropagation();\n          event.preventDefault();\n          setOpen(event, false);\n          break;\n        case 'CloseSelect':\n          !multiselect && !activeOption?.disabled && setOpen(event, false);\n        // fallthrough\n        case 'Select':\n          activeOption && selectOption(event, activeOption);\n          event.preventDefault();\n          break;\n        case 'Tab':\n          !multiselect && activeOption && selectOption(event, activeOption);\n          break;\n        default:\n          newIndex = getIndexFromAction(action, activeIndex, maxIndex);\n      }\n      if (newIndex !== activeIndex) {\n        // prevent default page scroll/keyboard action if the index changed\n        event.preventDefault();\n        setActiveOption(getOptionAtIndex(newIndex));\n        setFocusVisible(true);\n      }\n    },\n    trigger.onKeyDown,\n  );\n\n  trigger.onMouseOver = mergeCallbacks(\n    (event: React.MouseEvent<HTMLButtonElement> & React.MouseEvent<HTMLInputElement>) => {\n      setFocusVisible(false);\n    },\n    trigger.onMouseOver,\n  );\n\n  return [trigger, listbox];\n}\n"]}
{"version":3,"file":"useScrollOptionsIntoView.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-combobox/src/utils/useScrollOptionsIntoView.ts"],"names":[],"mappings":";;;;IAIA,SAAgB,wBAAwB,CAAC,KAAmB;QAClD,IAAA,YAAY,GAAK,KAAK,aAAV,CAAW;QAC/B,IAAM,kBAAkB,GAAG,KAAK,CAAC,MAAM,CAAiB,IAAI,CAAC,CAAC;QAE9D,KAAK,CAAC,SAAS,CAAC;YACd,IAAI,kBAAkB,CAAC,OAAO,IAAI,YAAY,IAAI,2BAAS,EAAE,EAAE;gBAC7D,IAAM,mBAAmB,GAAG,kBAAkB,CAAC,OAAO,CAAC,aAAa,CAAC,MAAI,YAAY,CAAC,EAAI,CAAgB,CAAC;gBAE3G,IAAI,CAAC,mBAAmB,EAAE;oBACxB,OAAO;iBACR;gBAEO,IAAA,YAAY,GAAgB,mBAAmB,aAAnC,EAAE,SAAS,GAAK,mBAAmB,UAAxB,CAAyB;gBAClD,IAAA,KAAkD,kBAAkB,CAAC,OAAO,EAA5D,kBAAkB,kBAAA,EAAE,SAAS,eAA+B,CAAC;gBAEnF,IAAM,OAAO,GAAG,SAAS,GAAG,SAAS,CAAC;gBACtC,IAAM,OAAO,GAAG,SAAS,GAAG,YAAY,GAAG,SAAS,GAAG,kBAAkB,CAAC;gBAE1E,+CAA+C;gBAC/C,2FAA2F;gBAC3F,IAAM,MAAM,GAAG,CAAC,CAAC;gBAEjB,IAAI,OAAO,EAAE;oBACX,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,SAAS,GAAG,MAAM,CAAC,CAAC;iBAC5D;qBAAM,IAAI,OAAO,EAAE;oBAClB,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,SAAS,GAAG,kBAAkB,GAAG,YAAY,GAAG,MAAM,CAAC,CAAC;iBAChG;aACF;QACH,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;QAEnB,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IA/BD,4DA+BC","sourcesContent":["import * as React from 'react';\nimport { canUseDOM } from '@fluentui/react-utilities';\nimport { ListboxState } from '../Listbox';\n\nexport function useScrollOptionsIntoView(state: ListboxState): React.Ref<HTMLDivElement> {\n  const { activeOption } = state;\n  const scrollContainerRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    if (scrollContainerRef.current && activeOption && canUseDOM()) {\n      const activeOptionElement = scrollContainerRef.current.querySelector(`#${activeOption.id}`) as HTMLElement;\n\n      if (!activeOptionElement) {\n        return;\n      }\n\n      const { offsetHeight, offsetTop } = activeOptionElement;\n      const { offsetHeight: parentOffsetHeight, scrollTop } = scrollContainerRef.current;\n\n      const isAbove = offsetTop < scrollTop;\n      const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n      // add a small buffer for general visual nicety\n      // it looks slightly better if the option has some space from the top/bottom while arrowing\n      const buffer = 2;\n\n      if (isAbove) {\n        scrollContainerRef.current.scrollTo(0, offsetTop - buffer);\n      } else if (isBelow) {\n        scrollContainerRef.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight + buffer);\n      }\n    }\n  }, [activeOption]);\n\n  return scrollContainerRef;\n}\n"]}
{"version":3,"file":"useSelection.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-combobox/src/utils/useSelection.ts"],"names":[],"mappings":";;;;IAKO,IAAM,YAAY,GAAG,UAAC,KAAqB;QACxC,IAAA,sBAAsB,GAAkC,KAAK,uBAAvC,EAAE,WAAW,GAAqB,KAAK,YAA1B,EAAE,cAAc,GAAK,KAAK,eAAV,CAAW;QAEhE,IAAA,KAAwC,sCAAoB,CAAC;YACjE,KAAK,EAAE,KAAK,CAAC,eAAe;YAC5B,YAAY,EAAE,sBAAsB;YACpC,YAAY,EAAE,EAAE;SACjB,CAAC,EAJK,eAAe,QAAA,EAAE,kBAAkB,QAIxC,CAAC;QAEH,IAAM,YAAY,GAAG,mBAAW,CAC9B,UAAC,KAAsB,EAAE,MAAmB;YAC1C,wCAAwC;YACxC,IAAI,MAAM,CAAC,QAAQ,EAAE;gBACnB,OAAO;aACR;YAED,uDAAuD;YACvD,IAAI,YAAY,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAElC,sDAAsD;YACtD,IAAI,WAAW,EAAE;gBACf,IAAM,aAAa,GAAG,eAAe,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,MAAM,CAAC,KAAK,EAAlB,CAAkB,CAAC,CAAC;gBACzE,IAAI,aAAa,GAAG,CAAC,CAAC,EAAE;oBACtB,kBAAkB;oBAClB,YAAY,mDAAO,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,GAAK,eAAe,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC1G;qBAAM;oBACL,gBAAgB;oBAChB,YAAY,mDAAO,eAAe,IAAE,MAAM,CAAC,KAAK,EAAC,CAAC;iBACnD;aACF;YAED,kBAAkB,CAAC,YAAY,CAAC,CAAC;YACjC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAG,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,IAAI,EAAE,eAAe,EAAE,YAAY,EAAE,CAAC,CAAC;QACjH,CAAC,EACD,CAAC,cAAc,EAAE,WAAW,EAAE,eAAe,EAAE,kBAAkB,CAAC,CACnE,CAAC;QAEF,IAAM,cAAc,GAAG,UAAC,KAAsB;YAC5C,kBAAkB,CAAC,EAAE,CAAC,CAAC;YACvB,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAG,KAAK,EAAE,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,EAAE,EAAE,CAAC,CAAC;QAClG,CAAC,CAAC;QAEF,OAAO,EAAE,cAAc,gBAAA,EAAE,YAAY,cAAA,EAAE,eAAe,iBAAA,EAAE,CAAC;IAC3D,CAAC,CAAC;IA3CW,QAAA,YAAY,gBA2CvB","sourcesContent":["import { useCallback } from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nimport { OptionValue } from './OptionCollection.types';\nimport { SelectionEvents, SelectionProps, SelectionState } from './Selection.types';\n\nexport const useSelection = (props: SelectionProps): SelectionState => {\n  const { defaultSelectedOptions, multiselect, onOptionSelect } = props;\n\n  const [selectedOptions, setSelectedOptions] = useControllableState({\n    state: props.selectedOptions,\n    defaultState: defaultSelectedOptions,\n    initialState: [],\n  });\n\n  const selectOption = useCallback(\n    (event: SelectionEvents, option: OptionValue) => {\n      // if the option is disabled, do nothing\n      if (option.disabled) {\n        return;\n      }\n\n      // for single-select, always return the selected option\n      let newSelection = [option.value];\n\n      // toggle selected state of the option for multiselect\n      if (multiselect) {\n        const selectedIndex = selectedOptions.findIndex(o => o === option.value);\n        if (selectedIndex > -1) {\n          // deselect option\n          newSelection = [...selectedOptions.slice(0, selectedIndex), ...selectedOptions.slice(selectedIndex + 1)];\n        } else {\n          // select option\n          newSelection = [...selectedOptions, option.value];\n        }\n      }\n\n      setSelectedOptions(newSelection);\n      onOptionSelect?.(event, { optionValue: option.value, optionText: option.text, selectedOptions: newSelection });\n    },\n    [onOptionSelect, multiselect, selectedOptions, setSelectedOptions],\n  );\n\n  const clearSelection = (event: SelectionEvents) => {\n    setSelectedOptions([]);\n    onOptionSelect?.(event, { optionValue: undefined, optionText: undefined, selectedOptions: [] });\n  };\n\n  return { clearSelection, selectOption, selectedOptions };\n};\n"]}
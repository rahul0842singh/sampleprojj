{"version":3,"file":"useComboboxBaseState.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-combobox/src/utils/useComboboxBaseState.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useControllableState, useFirstMount } from '@fluentui/react-utilities';\nimport { useOptionCollection } from '../utils/useOptionCollection';\nimport { OptionValue } from '../utils/OptionCollection.types';\nimport { useSelection } from '../utils/useSelection';\nimport type { ComboboxBaseProps, ComboboxBaseOpenEvents, ComboboxBaseState } from './ComboboxBase.types';\n\n/**\n * State shared between Combobox and Dropdown components\n */\nexport const useComboboxBaseState = (\n  props: ComboboxBaseProps & { children?: React.ReactNode; editable?: boolean },\n): ComboboxBaseState => {\n  const {\n    appearance = 'outline',\n    children,\n    editable = false,\n    inlinePopup = false,\n    multiselect,\n    onOpenChange,\n    size = 'medium',\n  } = props;\n\n  const optionCollection = useOptionCollection();\n  const { getOptionAtIndex, getOptionsMatchingValue } = optionCollection;\n\n  const [activeOption, setActiveOption] = React.useState<OptionValue | undefined>();\n\n  // track whether keyboard focus outline should be shown\n  // tabster/keyborg doesn't work here, since the actual keyboard focus target doesn't move\n  const [focusVisible, setFocusVisible] = React.useState(false);\n\n  // track focused state to conditionally render collapsed listbox\n  const [hasFocus, setHasFocus] = React.useState(false);\n\n  const ignoreNextBlur = React.useRef(false);\n\n  const selectionState = useSelection(props);\n  const { selectedOptions } = selectionState;\n\n  // calculate value based on props, internal value changes, and selected options\n  const isFirstMount = useFirstMount();\n  const [controllableValue, setValue] = useControllableState({\n    state: props.value,\n    initialState: undefined,\n  });\n\n  const value = React.useMemo(() => {\n    // don't compute the value if it is defined through props or setValue,\n    if (controllableValue !== undefined) {\n      return controllableValue;\n    }\n\n    // handle defaultValue here, so it is overridden by selection\n    if (isFirstMount && props.defaultValue !== undefined) {\n      return props.defaultValue;\n    }\n\n    const selectedOptionsText = getOptionsMatchingValue(optionValue => {\n      return selectedOptions.includes(optionValue);\n    }).map(option => option.text);\n\n    if (multiselect) {\n      // editable inputs should not display multiple selected options in the input as text\n      return editable ? '' : selectedOptionsText.join(', ');\n    }\n\n    return selectedOptionsText[0];\n\n    // do not change value after isFirstMount changes,\n    // we do not want to accidentally override defaultValue on a second render\n    // unless another value is intentionally set\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controllableValue, editable, getOptionsMatchingValue, multiselect, props.defaultValue, selectedOptions]);\n\n  // Handle open state, which is shared with options in context\n  const [open, setOpenState] = useControllableState({\n    state: props.open,\n    defaultState: props.defaultOpen,\n    initialState: false,\n  });\n\n  const setOpen = React.useCallback(\n    (event: ComboboxBaseOpenEvents, newState: boolean) => {\n      onOpenChange?.(event, { open: newState });\n      setOpenState(newState);\n    },\n    [onOpenChange, setOpenState],\n  );\n\n  // update active option based on change in open state or children\n  React.useEffect(() => {\n    if (open && !activeOption) {\n      // if it is single-select and there is a selected option, start at the selected option\n      if (!multiselect && selectedOptions.length > 0) {\n        const selectedOption = getOptionsMatchingValue(v => v === selectedOptions[0]).pop();\n        selectedOption && setActiveOption(selectedOption);\n      }\n      // default to starting at the first option\n      else {\n        setActiveOption(getOptionAtIndex(0));\n      }\n    } else if (!open) {\n      // reset the active option when closing\n      setActiveOption(undefined);\n    }\n    // this should only be run in response to changes in the open state or children\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, children]);\n\n  return {\n    ...optionCollection,\n    ...selectionState,\n    activeOption,\n    appearance,\n    focusVisible,\n    hasFocus,\n    ignoreNextBlur,\n    inlinePopup,\n    open,\n    setActiveOption,\n    setFocusVisible,\n    setHasFocus,\n    setOpen,\n    setValue,\n    size,\n    value,\n  };\n};\n"]}
{"version":3,"file":"dropdownKeyActions.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-combobox/src/utils/dropdownKeyActions.ts"],"names":[],"mappings":"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","sourcesContent":["import * as keys from '@fluentui/keyboard-keys';\nimport * as React from 'react';\n\n/**\n * enum of actions available in any type of managed dropdown control\n * e.g. combobox, select, datepicker, menu\n */\nexport type DropdownActions =\n  | 'Close'\n  | 'CloseSelect'\n  | 'First'\n  | 'Last'\n  | 'Next'\n  | 'None'\n  | 'Open'\n  | 'PageDown'\n  | 'PageUp'\n  | 'Previous'\n  | 'Select'\n  | 'Tab'\n  | 'Type';\n\nexport interface DropdownActionOptions {\n  open?: boolean;\n  multiselect?: boolean;\n}\n\n/**\n * Converts a keyboard interaction into a defined action\n */\nexport function getDropdownActionFromKey(\n  e: KeyboardEvent | React.KeyboardEvent,\n  options: DropdownActionOptions = {},\n): DropdownActions {\n  const { open = true, multiselect = false } = options;\n  const code = e.key;\n  const { altKey, ctrlKey, key, metaKey } = e;\n\n  // typing action occurs whether open or closed\n  if (key.length === 1 && code !== keys.Space && !altKey && !ctrlKey && !metaKey) {\n    return 'Type';\n  }\n\n  // handle opening the dropdown if closed\n  if (!open) {\n    if (code === keys.ArrowDown || code === keys.ArrowUp || code === keys.Enter || code === keys.Space) {\n      return 'Open';\n    }\n\n    // if the dropdown is closed and an action did not match the above, do nothing\n    return 'None';\n  }\n\n  // select or close actions\n  if ((code === keys.ArrowUp && altKey) || code === keys.Enter || (!multiselect && code === keys.Space)) {\n    return 'CloseSelect';\n  }\n  if (multiselect && code === keys.Space) {\n    return 'Select';\n  }\n  if (code === keys.Escape) {\n    return 'Close';\n  }\n\n  // navigation interactions\n  if (code === keys.ArrowDown) {\n    return 'Next';\n  }\n  if (code === keys.ArrowUp) {\n    return 'Previous';\n  }\n  if (code === keys.Home) {\n    return 'First';\n  }\n  if (code === keys.End) {\n    return 'Last';\n  }\n  if (code === keys.PageUp) {\n    return 'PageUp';\n  }\n  if (code === keys.PageDown) {\n    return 'PageDown';\n  }\n  if (code === keys.Tab) {\n    return 'Tab';\n  }\n\n  // if nothing matched, return none\n  return 'None';\n}\n\n/**\n * Returns the requested option index from an action\n */\nexport function getIndexFromAction(action: DropdownActions, currentIndex: number, maxIndex: number): number {\n  switch (action) {\n    case 'Next':\n      return Math.min(maxIndex, currentIndex + 1);\n      break;\n    case 'Previous':\n      return Math.max(0, currentIndex - 1);\n    case 'First':\n      return 0;\n    case 'Last':\n      return maxIndex;\n    case 'PageDown':\n      return Math.min(maxIndex, currentIndex + 10);\n    case 'PageUp':\n      return Math.max(0, currentIndex - 10);\n    default:\n      return currentIndex;\n  }\n}\n"]}
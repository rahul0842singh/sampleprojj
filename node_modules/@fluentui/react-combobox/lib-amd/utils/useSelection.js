define(["require", "exports", "tslib", "react", "@fluentui/react-utilities"], function (require, exports, tslib_1, react_1, react_utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSelection = void 0;
    var useSelection = function (props) {
        var defaultSelectedOptions = props.defaultSelectedOptions, multiselect = props.multiselect, onOptionSelect = props.onOptionSelect;
        var _a = react_utilities_1.useControllableState({
            state: props.selectedOptions,
            defaultState: defaultSelectedOptions,
            initialState: [],
        }), selectedOptions = _a[0], setSelectedOptions = _a[1];
        var selectOption = react_1.useCallback(function (event, option) {
            // if the option is disabled, do nothing
            if (option.disabled) {
                return;
            }
            // for single-select, always return the selected option
            var newSelection = [option.value];
            // toggle selected state of the option for multiselect
            if (multiselect) {
                var selectedIndex = selectedOptions.findIndex(function (o) { return o === option.value; });
                if (selectedIndex > -1) {
                    // deselect option
                    newSelection = tslib_1.__spreadArray(tslib_1.__spreadArray([], selectedOptions.slice(0, selectedIndex)), selectedOptions.slice(selectedIndex + 1));
                }
                else {
                    // select option
                    newSelection = tslib_1.__spreadArray(tslib_1.__spreadArray([], selectedOptions), [option.value]);
                }
            }
            setSelectedOptions(newSelection);
            onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, { optionValue: option.value, optionText: option.text, selectedOptions: newSelection });
        }, [onOptionSelect, multiselect, selectedOptions, setSelectedOptions]);
        var clearSelection = function (event) {
            setSelectedOptions([]);
            onOptionSelect === null || onOptionSelect === void 0 ? void 0 : onOptionSelect(event, { optionValue: undefined, optionText: undefined, selectedOptions: [] });
        };
        return { clearSelection: clearSelection, selectOption: selectOption, selectedOptions: selectedOptions };
    };
    exports.useSelection = useSelection;
});
//# sourceMappingURL=useSelection.js.map
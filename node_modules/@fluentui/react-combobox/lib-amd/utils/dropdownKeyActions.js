define(["require", "exports", "@fluentui/keyboard-keys"], function (require, exports, keys) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIndexFromAction = exports.getDropdownActionFromKey = void 0;
    /**
     * Converts a keyboard interaction into a defined action
     */
    function getDropdownActionFromKey(e, options) {
        if (options === void 0) { options = {}; }
        var _a = options.open, open = _a === void 0 ? true : _a, _b = options.multiselect, multiselect = _b === void 0 ? false : _b;
        var code = e.key;
        var altKey = e.altKey, ctrlKey = e.ctrlKey, key = e.key, metaKey = e.metaKey;
        // typing action occurs whether open or closed
        if (key.length === 1 && code !== keys.Space && !altKey && !ctrlKey && !metaKey) {
            return 'Type';
        }
        // handle opening the dropdown if closed
        if (!open) {
            if (code === keys.ArrowDown || code === keys.ArrowUp || code === keys.Enter || code === keys.Space) {
                return 'Open';
            }
            // if the dropdown is closed and an action did not match the above, do nothing
            return 'None';
        }
        // select or close actions
        if ((code === keys.ArrowUp && altKey) || code === keys.Enter || (!multiselect && code === keys.Space)) {
            return 'CloseSelect';
        }
        if (multiselect && code === keys.Space) {
            return 'Select';
        }
        if (code === keys.Escape) {
            return 'Close';
        }
        // navigation interactions
        if (code === keys.ArrowDown) {
            return 'Next';
        }
        if (code === keys.ArrowUp) {
            return 'Previous';
        }
        if (code === keys.Home) {
            return 'First';
        }
        if (code === keys.End) {
            return 'Last';
        }
        if (code === keys.PageUp) {
            return 'PageUp';
        }
        if (code === keys.PageDown) {
            return 'PageDown';
        }
        if (code === keys.Tab) {
            return 'Tab';
        }
        // if nothing matched, return none
        return 'None';
    }
    exports.getDropdownActionFromKey = getDropdownActionFromKey;
    /**
     * Returns the requested option index from an action
     */
    function getIndexFromAction(action, currentIndex, maxIndex) {
        switch (action) {
            case 'Next':
                return Math.min(maxIndex, currentIndex + 1);
                break;
            case 'Previous':
                return Math.max(0, currentIndex - 1);
            case 'First':
                return 0;
            case 'Last':
                return maxIndex;
            case 'PageDown':
                return Math.min(maxIndex, currentIndex + 10);
            case 'PageUp':
                return Math.max(0, currentIndex - 10);
            default:
                return currentIndex;
        }
    }
    exports.getIndexFromAction = getIndexFromAction;
});
//# sourceMappingURL=dropdownKeyActions.js.map
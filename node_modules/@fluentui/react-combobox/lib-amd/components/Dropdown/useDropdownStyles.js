define(["require", "exports", "tslib", "@fluentui/react-theme", "@griffel/react", "../../utils/internalTokens"], function (require, exports, tslib_1, react_theme_1, react_1, internalTokens_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useDropdownStyles_unstable = exports.dropdownClassNames = void 0;
    exports.dropdownClassNames = {
        root: 'fui-Dropdown',
        button: 'fui-Dropdown__button',
        expandIcon: 'fui-Dropdown__expandIcon',
        listbox: 'fui-Dropdown__listbox',
    };
    /**
     * Styles for Dropdown
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { boxSizing: 'border-box', display: 'inline-block', minWidth: '250px', position: 'relative', 
            // windows high contrast mode focus indicator
            ':focus-within': {
                outlineWidth: '2px',
                outlineStyle: 'solid',
                outlineColor: 'transparent',
            }, 
            // bottom focus border, shared with Input, Select, and SpinButton
            '::after': tslib_1.__assign(tslib_1.__assign({ boxSizing: 'border-box', content: '""', position: 'absolute', left: '-1px', bottom: '-1px', right: '-1px', height: "max(" + react_theme_1.tokens.strokeWidthThick + ", " + react_theme_1.tokens.borderRadiusMedium + ")", borderBottomLeftRadius: react_theme_1.tokens.borderRadiusMedium, borderBottomRightRadius: react_theme_1.tokens.borderRadiusMedium }, react_1.shorthands.borderBottom(react_theme_1.tokens.strokeWidthThick, 'solid', react_theme_1.tokens.colorCompoundBrandStroke)), { clipPath: 'inset(calc(100% - 2px) 0 0 0)', transform: 'scaleX(0)', transitionProperty: 'transform', transitionDuration: react_theme_1.tokens.durationUltraFast, transitionDelay: react_theme_1.tokens.curveAccelerateMid, '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                } }), ':focus-within::after': {
                transform: 'scaleX(1)',
                transitionProperty: 'transform',
                transitionDuration: react_theme_1.tokens.durationNormal,
                transitionDelay: react_theme_1.tokens.curveDecelerateMid,
                '@media screen and (prefers-reduced-motion: reduce)': {
                    transitionDuration: '0.01ms',
                    transitionDelay: '0.01ms',
                },
            }, ':focus-within:active::after': {
                borderBottomColor: react_theme_1.tokens.colorCompoundBrandStrokePressed,
            } }),
        listbox: tslib_1.__assign(tslib_1.__assign({ boxShadow: "" + react_theme_1.tokens.shadow16 }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { maxHeight: '80vh' }),
        listboxCollapsed: {
            display: 'none',
        },
        button: tslib_1.__assign(tslib_1.__assign({ alignItems: 'center', backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.border('0')), { boxSizing: 'border-box', color: react_theme_1.tokens.colorNeutralForeground1, columnGap: react_theme_1.tokens.spacingHorizontalXXS, cursor: 'pointer', display: 'grid', fontFamily: react_theme_1.tokens.fontFamilyBase, gridTemplateColumns: '[content] 1fr [icon] auto [end]', justifyContent: 'space-between', textAlign: 'left', width: '100%', '&:focus': {
                outlineStyle: 'none',
            } }),
        placeholder: {
            color: react_theme_1.tokens.colorNeutralForeground4,
        },
        // size variants
        small: tslib_1.__assign(tslib_1.__assign({}, react_theme_1.typographyStyles.caption1), react_1.shorthands.padding('3px', react_theme_1.tokens.spacingHorizontalSNudge, '3px', "calc(" + react_theme_1.tokens.spacingHorizontalSNudge + " + " + react_theme_1.tokens.spacingHorizontalXXS + ")")),
        medium: tslib_1.__assign(tslib_1.__assign({}, react_theme_1.typographyStyles.body1), react_1.shorthands.padding('5px', react_theme_1.tokens.spacingHorizontalMNudge, '5px', "calc(" + react_theme_1.tokens.spacingHorizontalMNudge + " + " + react_theme_1.tokens.spacingHorizontalXXS + ")")),
        large: tslib_1.__assign(tslib_1.__assign({ columnGap: react_theme_1.tokens.spacingHorizontalSNudge }, react_theme_1.typographyStyles.body2), react_1.shorthands.padding('7px', react_theme_1.tokens.spacingHorizontalM, '7px', "calc(" + react_theme_1.tokens.spacingHorizontalM + " + " + react_theme_1.tokens.spacingHorizontalSNudge + ")")),
        // appearance variants
        outline: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground1 }, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStroke1)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible }),
        outlineInteractive: {
            '&:hover': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Hover)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible }),
            '&:active': tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStroke1Pressed)), { borderBottomColor: react_theme_1.tokens.colorNeutralStrokeAccessible }),
        },
        underline: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderBottom(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStrokeAccessible)), react_1.shorthands.borderRadius(0)),
        'filled-lighter': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground1 }, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', 'transparent')),
        'filled-darker': tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorNeutralBackground3 }, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', 'transparent')),
        invalid: {
            ':not(:focus-within),:hover:not(:focus-within)': tslib_1.__assign({}, react_1.shorthands.borderColor(react_theme_1.tokens.colorPaletteRedBorder2)),
        },
        invalidUnderline: {
            ':not(:focus-within),:hover:not(:focus-within)': {
                borderBottomColor: react_theme_1.tokens.colorPaletteRedBorder2,
            },
        },
        disabled: tslib_1.__assign(tslib_1.__assign({ cursor: 'not-allowed', backgroundColor: react_theme_1.tokens.colorTransparentBackground }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeDisabled)), { '@media (forced-colors: active)': tslib_1.__assign({}, react_1.shorthands.borderColor('GrayText')) }),
        disabledText: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            cursor: 'not-allowed',
        },
    });
    var useIconStyles = react_1.makeStyles({
        icon: {
            boxSizing: 'border-box',
            color: react_theme_1.tokens.colorNeutralStrokeAccessible,
            display: 'block',
            fontSize: react_theme_1.tokens.fontSizeBase500,
            gridColumnStart: 'icon',
            gridColumnEnd: 'end',
            // the SVG must have display: block for accurate positioning
            // otherwise an extra inline space is inserted after the svg element
            '& svg': {
                display: 'block',
            },
        },
        // icon size variants
        small: {
            fontSize: internalTokens_1.iconSizes.small,
            marginLeft: react_theme_1.tokens.spacingHorizontalXXS,
        },
        medium: {
            fontSize: internalTokens_1.iconSizes.medium,
            marginLeft: react_theme_1.tokens.spacingHorizontalXXS,
        },
        large: {
            fontSize: internalTokens_1.iconSizes.large,
            marginLeft: react_theme_1.tokens.spacingHorizontalSNudge,
        },
        disabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
        },
    });
    /**
     * Apply styling to the Dropdown slots based on the state
     */
    var useDropdownStyles_unstable = function (state) {
        var appearance = state.appearance, open = state.open, placeholderVisible = state.placeholderVisible, size = state.size;
        var invalid = "" + state.button['aria-invalid'] === 'true';
        var disabled = state.button.disabled;
        var styles = useStyles();
        var iconStyles = useIconStyles();
        state.root.className = react_1.mergeClasses(exports.dropdownClassNames.root, styles.root, styles[appearance], !disabled && appearance === 'outline' && styles.outlineInteractive, invalid && appearance !== 'underline' && styles.invalid, invalid && appearance === 'underline' && styles.invalidUnderline, disabled && styles.disabled, state.root.className);
        state.button.className = react_1.mergeClasses(exports.dropdownClassNames.button, styles.button, styles[size], placeholderVisible && styles.placeholder, disabled && styles.disabledText, state.button.className);
        if (state.listbox) {
            state.listbox.className = react_1.mergeClasses(exports.dropdownClassNames.listbox, styles.listbox, !open && styles.listboxCollapsed, state.listbox.className);
        }
        if (state.expandIcon) {
            state.expandIcon.className = react_1.mergeClasses(exports.dropdownClassNames.expandIcon, iconStyles.icon, iconStyles[size], disabled && iconStyles.disabled, state.expandIcon.className);
        }
        return state;
    };
    exports.useDropdownStyles_unstable = useDropdownStyles_unstable;
});
//# sourceMappingURL=useDropdownStyles.js.map
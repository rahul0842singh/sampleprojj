define(["require", "exports", "tslib", "react", "@fluentui/react-utilities", "@fluentui/react-context-selector", "@fluentui/react-icons", "../../contexts/ComboboxContext", "../../contexts/ListboxContext"], function (require, exports, tslib_1, React, react_utilities_1, react_context_selector_1, react_icons_1, ComboboxContext_1, ListboxContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useOption_unstable = void 0;
    function getTextString(text, children) {
        if (text !== undefined) {
            return text;
        }
        var textString = '';
        var hasNonStringChild = false;
        React.Children.forEach(children, function (child) {
            if (typeof child === 'string') {
                textString += child;
            }
            else {
                hasNonStringChild = true;
            }
        });
        // warn if an Option has non-string children and no text prop
        if (hasNonStringChild) {
            // eslint-disable-next-line no-console
            console.warn('Provide a `text` prop to Option components when they contain non-string children.');
        }
        return textString;
    }
    /**
     * Create the state required to render Option.
     *
     * The returned state can be modified with hooks such as useOptionStyles_unstable,
     * before being passed to renderOption_unstable.
     *
     * @param props - props from this instance of Option
     * @param ref - reference to root HTMLElement of Option
     */
    var useOption_unstable = function (props, ref) {
        var children = props.children, disabled = props.disabled, text = props.text, value = props.value;
        var optionRef = React.useRef(null);
        var optionText = getTextString(text, children);
        var optionValue = value !== null && value !== void 0 ? value : optionText;
        // use the id if provided, otherwise use a generated id
        var id = react_utilities_1.useId('fluent-option', props.id);
        // data used for context registration & events
        var optionData = React.useMemo(function () { return ({ id: id, disabled: disabled, text: optionText, value: optionValue }); }, [
            id,
            disabled,
            optionText,
            optionValue,
        ]);
        // context values
        var focusVisible = react_context_selector_1.useContextSelector(ListboxContext_1.ListboxContext, function (ctx) { return ctx.focusVisible; });
        var multiselect = react_context_selector_1.useContextSelector(ListboxContext_1.ListboxContext, function (ctx) { return ctx.multiselect; });
        var registerOption = react_context_selector_1.useContextSelector(ListboxContext_1.ListboxContext, function (ctx) { return ctx.registerOption; });
        var selected = react_context_selector_1.useContextSelector(ListboxContext_1.ListboxContext, function (ctx) {
            var selectedOptions = ctx.selectedOptions;
            return !!optionValue && !!selectedOptions.find(function (o) { return o === optionValue; });
        });
        var selectOption = react_context_selector_1.useContextSelector(ListboxContext_1.ListboxContext, function (ctx) { return ctx.selectOption; });
        var setActiveOption = react_context_selector_1.useContextSelector(ListboxContext_1.ListboxContext, function (ctx) { return ctx.setActiveOption; });
        var setOpen = react_context_selector_1.useContextSelector(ComboboxContext_1.ComboboxContext, function (ctx) { return ctx.setOpen; });
        // current active option?
        var active = react_context_selector_1.useContextSelector(ListboxContext_1.ListboxContext, function (ctx) {
            var _a, _b;
            return ((_a = ctx.activeOption) === null || _a === void 0 ? void 0 : _a.id) !== undefined && ((_b = ctx.activeOption) === null || _b === void 0 ? void 0 : _b.id) === id;
        });
        // check icon
        var CheckIcon = React.createElement(react_icons_1.CheckmarkFilled, null);
        if (multiselect) {
            CheckIcon = selected ? React.createElement(react_icons_1.Checkmark12Filled, null) : '';
        }
        var onClick = function (event) {
            var _a;
            if (disabled) {
                event.preventDefault();
                return;
            }
            // clicked option should always become active option
            setActiveOption(optionData);
            // close on option click for single-select options in a combobox
            if (!multiselect) {
                setOpen === null || setOpen === void 0 ? void 0 : setOpen(event, false);
            }
            // handle selection change
            selectOption(event, optionData);
            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, event);
        };
        // register option data with context
        React.useEffect(function () {
            if (id && optionRef.current) {
                return registerOption(optionData, optionRef.current);
            }
        }, [id, optionData, registerOption]);
        var semanticProps = multiselect
            ? { role: 'menuitemcheckbox', 'aria-checked': selected }
            : { role: 'option', 'aria-selected': selected };
        return {
            components: {
                root: 'div',
                checkIcon: 'span',
            },
            root: react_utilities_1.getNativeElementProps('div', tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ ref: react_utilities_1.useMergedRefs(ref, optionRef), 'aria-disabled': disabled ? 'true' : undefined, id: id }, semanticProps), props), { onClick: onClick })),
            checkIcon: react_utilities_1.resolveShorthand(props.checkIcon, {
                required: true,
                defaultProps: {
                    'aria-hidden': 'true',
                    children: CheckIcon,
                },
            }),
            active: active,
            disabled: disabled,
            focusVisible: focusVisible,
            multiselect: multiselect,
            selected: selected,
        };
    };
    exports.useOption_unstable = useOption_unstable;
});
//# sourceMappingURL=useOption.js.map
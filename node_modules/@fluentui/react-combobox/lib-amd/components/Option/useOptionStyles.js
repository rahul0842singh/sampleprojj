define(["require", "exports", "tslib", "@fluentui/react-theme", "@griffel/react"], function (require, exports, tslib_1, react_theme_1, react_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useOptionStyles_unstable = exports.optionClassNames = void 0;
    exports.optionClassNames = {
        root: 'fui-Option',
        checkIcon: 'fui-Option__checkIcon',
    };
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ alignItems: 'center' }, react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { color: react_theme_1.tokens.colorNeutralForeground1, columnGap: react_theme_1.tokens.spacingHorizontalXS, cursor: 'pointer', display: 'flex', fontFamily: react_theme_1.tokens.fontFamilyBase, fontSize: react_theme_1.tokens.fontSizeBase300, lineHeight: react_theme_1.tokens.lineHeightBase300 }), react_1.shorthands.padding(react_theme_1.tokens.spacingVerticalSNudge, react_theme_1.tokens.spacingHorizontalS)), { position: 'relative', '&:hover': {
                backgroundColor: react_theme_1.tokens.colorNeutralBackground1Hover,
            }, '&:active': {
                backgroundColor: react_theme_1.tokens.colorNeutralBackground1Pressed,
            } }),
        active: {
            // taken from @fluentui/react-tabster
            // cannot use createFocusIndicatorStyle() directly, since we aren't using the :focus selector
            '::after': tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ content: '""', position: 'absolute', pointerEvents: 'none', zIndex: 1 }, react_1.shorthands.borderStyle('solid')), react_1.shorthands.borderWidth('2px')), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), react_1.shorthands.borderColor(react_theme_1.tokens.colorStrokeFocus2)), { top: '-2px', bottom: '-2px', left: '-2px', right: '-2px' }),
        },
        disabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            '&:hover': {
                backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            },
            '&:active': {
                backgroundColor: react_theme_1.tokens.colorTransparentBackground,
            },
            '@media (forced-colors: active)': {
                color: 'GrayText',
            },
        },
        selected: {},
        checkIcon: {
            fontSize: react_theme_1.tokens.fontSizeBase400,
            // Shift icon(s) to the left to give text content extra spacing without needing an extra node
            // This is done instead of gap since the extra space only exists between icon > content, not icon > icon
            marginLeft: "calc(" + react_theme_1.tokens.spacingHorizontalXXS + " * -1)",
            marginRight: react_theme_1.tokens.spacingHorizontalXXS,
            visibility: 'hidden',
            '& svg': {
                display: 'block',
            },
        },
        selectedCheck: {
            visibility: 'visible',
        },
        multiselectCheck: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.border(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStrokeAccessible)), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusSmall)), { boxSizing: 'border-box', display: 'flex', alignItems: 'center', justifyContent: 'center', fill: 'currentColor', fontSize: '12px', height: '16px', width: '16px', visibility: 'visible' }),
        selectedMultiselectCheck: tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorCompoundBrandBackground, color: react_theme_1.tokens.colorNeutralForegroundInverted }, react_1.shorthands.borderColor(react_theme_1.tokens.colorCompoundBrandBackground)),
        checkDisabled: {
            color: react_theme_1.tokens.colorNeutralForegroundDisabled,
            '@media (forced-colors: active)': {
                color: 'GrayText',
            },
        },
    });
    /**
     * Apply styling to the Option slots based on the state
     */
    var useOptionStyles_unstable = function (state) {
        var active = state.active, disabled = state.disabled, focusVisible = state.focusVisible, multiselect = state.multiselect, selected = state.selected;
        var styles = useStyles();
        state.root.className = react_1.mergeClasses(exports.optionClassNames.root, styles.root, active && focusVisible && styles.active, disabled && styles.disabled, selected && styles.selected, state.root.className);
        if (state.checkIcon) {
            state.checkIcon.className = react_1.mergeClasses(exports.optionClassNames.checkIcon, styles.checkIcon, state.checkIcon.className, multiselect && styles.multiselectCheck, selected && styles.selectedCheck, selected && multiselect && styles.selectedMultiselectCheck, disabled && styles.checkDisabled);
        }
        return state;
    };
    exports.useOptionStyles_unstable = useOptionStyles_unstable;
});
//# sourceMappingURL=useOptionStyles.js.map
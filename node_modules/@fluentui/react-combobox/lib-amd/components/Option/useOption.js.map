{"version":3,"file":"useOption.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-combobox/src/components/Option/useOption.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, resolveShorthand, useId, useMergedRefs } from '@fluentui/react-utilities';\nimport { useContextSelector } from '@fluentui/react-context-selector';\nimport { CheckmarkFilled, Checkmark12Filled } from '@fluentui/react-icons';\nimport { ComboboxContext } from '../../contexts/ComboboxContext';\nimport { ListboxContext } from '../../contexts/ListboxContext';\nimport type { OptionValue } from '../../utils/OptionCollection.types';\nimport type { OptionProps, OptionState } from './Option.types';\n\nfunction getTextString(text: string | undefined, children: React.ReactNode) {\n  if (text !== undefined) {\n    return text;\n  }\n\n  let textString = '';\n  let hasNonStringChild = false;\n  React.Children.forEach(children, child => {\n    if (typeof child === 'string') {\n      textString += child;\n    } else {\n      hasNonStringChild = true;\n    }\n  });\n\n  // warn if an Option has non-string children and no text prop\n  if (hasNonStringChild) {\n    // eslint-disable-next-line no-console\n    console.warn('Provide a `text` prop to Option components when they contain non-string children.');\n  }\n\n  return textString;\n}\n\n/**\n * Create the state required to render Option.\n *\n * The returned state can be modified with hooks such as useOptionStyles_unstable,\n * before being passed to renderOption_unstable.\n *\n * @param props - props from this instance of Option\n * @param ref - reference to root HTMLElement of Option\n */\nexport const useOption_unstable = (props: OptionProps, ref: React.Ref<HTMLElement>): OptionState => {\n  const { children, disabled, text, value } = props;\n  const optionRef = React.useRef<HTMLElement>(null);\n  const optionText = getTextString(text, children);\n  const optionValue = value ?? optionText;\n\n  // use the id if provided, otherwise use a generated id\n  const id = useId('fluent-option', props.id);\n\n  // data used for context registration & events\n  const optionData = React.useMemo<OptionValue>(() => ({ id, disabled, text: optionText, value: optionValue }), [\n    id,\n    disabled,\n    optionText,\n    optionValue,\n  ]);\n\n  // context values\n  const focusVisible = useContextSelector(ListboxContext, ctx => ctx.focusVisible);\n  const multiselect = useContextSelector(ListboxContext, ctx => ctx.multiselect);\n  const registerOption = useContextSelector(ListboxContext, ctx => ctx.registerOption);\n  const selected = useContextSelector(ListboxContext, ctx => {\n    const selectedOptions = ctx.selectedOptions;\n\n    return !!optionValue && !!selectedOptions.find(o => o === optionValue);\n  });\n  const selectOption = useContextSelector(ListboxContext, ctx => ctx.selectOption);\n  const setActiveOption = useContextSelector(ListboxContext, ctx => ctx.setActiveOption);\n  const setOpen = useContextSelector(ComboboxContext, ctx => ctx.setOpen);\n\n  // current active option?\n  const active = useContextSelector(ListboxContext, ctx => {\n    return ctx.activeOption?.id !== undefined && ctx.activeOption?.id === id;\n  });\n\n  // check icon\n  let CheckIcon: React.ReactNode = <CheckmarkFilled />;\n  if (multiselect) {\n    CheckIcon = selected ? <Checkmark12Filled /> : '';\n  }\n\n  const onClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (disabled) {\n      event.preventDefault();\n      return;\n    }\n\n    // clicked option should always become active option\n    setActiveOption(optionData);\n\n    // close on option click for single-select options in a combobox\n    if (!multiselect) {\n      setOpen?.(event, false);\n    }\n\n    // handle selection change\n    selectOption(event, optionData);\n\n    props.onClick?.(event);\n  };\n\n  // register option data with context\n  React.useEffect(() => {\n    if (id && optionRef.current) {\n      return registerOption(optionData, optionRef.current);\n    }\n  }, [id, optionData, registerOption]);\n\n  const semanticProps = multiselect\n    ? { role: 'menuitemcheckbox', 'aria-checked': selected }\n    : { role: 'option', 'aria-selected': selected };\n\n  return {\n    components: {\n      root: 'div',\n      checkIcon: 'span',\n    },\n    root: getNativeElementProps('div', {\n      ref: useMergedRefs(ref, optionRef),\n      'aria-disabled': disabled ? 'true' : undefined,\n      id,\n      ...semanticProps,\n      ...props,\n      onClick,\n    }),\n    checkIcon: resolveShorthand(props.checkIcon, {\n      required: true,\n      defaultProps: {\n        'aria-hidden': 'true',\n        children: CheckIcon,\n      },\n    }),\n    active,\n    disabled,\n    focusVisible,\n    multiselect,\n    selected,\n  };\n};\n"]}
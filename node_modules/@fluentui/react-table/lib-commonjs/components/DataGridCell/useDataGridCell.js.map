{"version":3,"mappings":";;;;;;AAEA;AACA;AACA;AAEA;;;;;;;;;AASO,MAAMA,wBAAwB,GAAG,CAACC,KAAwB,EAAEC,GAA2B,KAAuB;EACnH,MAAMC,QAAQ,GAAGC,oCAAkB,EAAE;EACrC,MAAMC,QAAQ,GAAGC,6CAA2B,CAACC,GAAG,IAAIA,GAAG,CAACC,SAAS,KAAK,MAAM,CAAC;EAC7E,MAAMC,gBAAgB,GAAGH,6CAA2B,CAACC,GAAG,IAAIA,GAAG,CAACE,gBAAgB,CAAC;EACjF,MAAMC,YAAY,GAAGJ,6CAA2B,CAACC,GAAG,IAAIA,GAAG,CAACI,qBAAqB,CAAC;EAClF,OAAOC,oCAAqB,CAC1B;IACEC,EAAE,EAAE,KAAK;IACTC,IAAI,EAAE,UAAU;IAChBC,QAAQ,EAAEV,QAAQ,GAAG,CAAC,GAAGW,SAAS;IAClC,IAAIP,gBAAgB,GAAGC,YAAY,CAACO,iBAAiB,CAACd,QAAQ,CAAC,GAAG,EAAE,CAAC;IACrE,GAAGF;GACJ,EACDC,GAAG,CACJ;AACH,CAAC;AAfYgB,gCAAwB","names":["useDataGridCell_unstable","props","ref","columnId","columnIdContext_1","tabbable","dataGridContext_1","ctx","focusMode","resizableColumns","columnSizing","columnSizing_unstable","useTableCell_1","as","role","tabIndex","undefined","getTableCellProps","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-table/src/components/DataGridCell/useDataGridCell.ts"],"sourcesContent":["import * as React from 'react';\nimport type { DataGridCellProps, DataGridCellState } from './DataGridCell.types';\nimport { useTableCell_unstable } from '../TableCell/useTableCell';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { useColumnIdContext } from '../../contexts/columnIdContext';\n\n/**\n * Create the state required to render DataGridCell.\n *\n * The returned state can be modified with hooks such as useDataGridCellStyles_unstable,\n * before being passed to renderDataGridCell_unstable.\n *\n * @param props - props from this instance of DataGridCell\n * @param ref - reference to root HTMLElement of DataGridCell\n */\nexport const useDataGridCell_unstable = (props: DataGridCellProps, ref: React.Ref<HTMLElement>): DataGridCellState => {\n  const columnId = useColumnIdContext();\n  const tabbable = useDataGridContext_unstable(ctx => ctx.focusMode === 'cell');\n  const resizableColumns = useDataGridContext_unstable(ctx => ctx.resizableColumns);\n  const columnSizing = useDataGridContext_unstable(ctx => ctx.columnSizing_unstable);\n  return useTableCell_unstable(\n    {\n      as: 'div',\n      role: 'gridcell',\n      tabIndex: tabbable ? 0 : undefined,\n      ...(resizableColumns ? columnSizing.getTableCellProps(columnId) : {}),\n      ...props,\n    },\n    ref,\n  );\n};\n"]}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDataGridCell_unstable = void 0;
const useTableCell_1 = /*#__PURE__*/require("../TableCell/useTableCell");
const dataGridContext_1 = /*#__PURE__*/require("../../contexts/dataGridContext");
const columnIdContext_1 = /*#__PURE__*/require("../../contexts/columnIdContext");
/**
 * Create the state required to render DataGridCell.
 *
 * The returned state can be modified with hooks such as useDataGridCellStyles_unstable,
 * before being passed to renderDataGridCell_unstable.
 *
 * @param props - props from this instance of DataGridCell
 * @param ref - reference to root HTMLElement of DataGridCell
 */
const useDataGridCell_unstable = (props, ref) => {
  const columnId = columnIdContext_1.useColumnIdContext();
  const tabbable = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.focusMode === 'cell');
  const resizableColumns = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.resizableColumns);
  const columnSizing = dataGridContext_1.useDataGridContext_unstable(ctx => ctx.columnSizing_unstable);
  return useTableCell_1.useTableCell_unstable({
    as: 'div',
    role: 'gridcell',
    tabIndex: tabbable ? 0 : undefined,
    ...(resizableColumns ? columnSizing.getTableCellProps(columnId) : {}),
    ...props
  }, ref);
};
exports.useDataGridCell_unstable = useDataGridCell_unstable;
//# sourceMappingURL=useDataGridCell.js.map
{"version":3,"mappings":";;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASO,MAAMA,uBAAuB,GAAG,CAACC,KAAuB,EAAEC,GAA2B,KAAsB;EAChH,MAAMC,KAAK,GAAGC,mCAAoB,EAAE;EACpC,MAAMC,QAAQ,GAAGC,uCAAkB,EAAE;EACrC,MAAMC,UAAU,GAAGC,6CAA2B,CAACC,GAAG,IAAIA,GAAG,CAACC,OAAO,CAAC;EAClE,MAAMC,UAAU,GAAGH,6CAA2B,CAACC,GAAG,IAAIA,GAAG,CAACG,cAAc,CAAC;EACzE,MAAMC,QAAQ,GAAGL,6CAA2B,CAACC,GAAG,IAAIA,GAAG,CAACK,SAAS,CAACC,aAAa,CAACZ,KAAK,CAAC,CAAC;EACvF,MAAMa,QAAQ,GAAGR,6CAA2B,CAACC,GAAG,IAAIA,GAAG,CAACQ,SAAS,KAAK,cAAc,CAAC;EACrF,MAAMC,UAAU,GAAGV,6CAA2B,CAACC,GAAG,IAAG;IACnD,IAAI,CAACJ,QAAQ,IAAIM,UAAU,IAAIF,GAAG,CAACK,SAAS,CAACC,aAAa,CAACZ,KAAK,CAAC,EAAE;MACjE,OAAOM,GAAG,CAACU,mBAAmB;;IAGhC,OAAO,MAAM;EACf,CAAC,CAAC;EACF,MAAMC,SAAS,GAAGZ,6CAA2B,CAACC,GAAG,IAAIA,GAAG,CAACK,SAAS,CAACM,SAAS,CAAC;EAE7E,MAAMC,OAAO,GAAGC,kCAAgB,CAAEC,CAAwC,IAAI;;IAC5E,IAAIZ,UAAU,IAAI,CAACN,QAAQ,EAAE;MAC3Be,SAAS,CAACG,CAAC,EAAEpB,KAAK,CAAC;;IAGrB,WAAK,CAACkB,OAAO,+CAAbpB,KAAK,EAAWsB,CAAC,CAAC;EACpB,CAAC,CAAC;EAEF,MAAMC,SAAS,GAAGF,kCAAgB,CAAEC,CAA2C,IAAI;;IACjF,IAAIZ,UAAU,IAAI,CAACN,QAAQ,IAAIkB,CAAC,CAACE,GAAG,KAAKC,qBAAK,IAAI,CAACJ,0CAAwB,CAACC,CAAC,CAACI,MAAqB,CAAC,EAAE;MACpG;MACAJ,CAAC,CAACK,cAAc,EAAE;MAClBR,SAAS,CAACG,CAAC,EAAEpB,KAAK,CAAC;;IAGrB,WAAK,CAACqB,SAAS,+CAAfvB,KAAK,EAAasB,CAAC,CAAC;EACtB,CAAC,CAAC;EAEF,MAAMM,SAAS,GAAGC,kCAAoB,CACpC;IACEZ,UAAU;IACV,eAAe,EAAEP,UAAU,GAAGE,QAAQ,GAAGkB,SAAS;IAClD,GAAG9B,KAAK;IACRoB,OAAO;IACPG,SAAS;IACTQ,QAAQ,EAAE,IAAI;IACdC,EAAE,EAAE,KAAK;IACTC,QAAQ,EAAElB,QAAQ,IAAI,CAACX,QAAQ,GAAG,CAAC,GAAG0B;GACvC,EACD7B,GAAG,CACJ;EAED,OAAO;IACL,GAAG2B,SAAS;IACZM,UAAU,EAAE;MACV,GAAGN,SAAS,CAACM,UAAU;MACvBC,aAAa,EAAEC;KAChB;IACDD,aAAa,EAAEd,kCAAgB,CAACrB,KAAK,CAACmC,aAAa,EAAE;MAAEE,QAAQ,EAAE3B;IAAU,CAAE,CAAC;IAC9E4B,UAAU,EAAEtC,KAAK,CAAC+B,QAAQ;IAC1BzB;GACD;AACH,CAAC;AA1DYiC,+BAAuB","names":["useDataGridRow_unstable","props","ref","rowId","rowIdContext_1","isHeader","tableHeaderContext_1","columnDefs","dataGridContext_1","ctx","columns","selectable","selectableRows","selected","selection","isRowSelected","tabbable","focusMode","appearance","selectionAppearance","toggleRow","onClick","react_utilities_1","e","onKeyDown","key","keyboard_keys_1","target","preventDefault","baseState","useTableRow_1","undefined","children","as","tabIndex","components","selectionCell","DataGridSelectionCell_1","required","renderCell","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-table/src/components/DataGridRow/useDataGridRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isInteractiveHTMLElement, useEventCallback, resolveShorthand } from '@fluentui/react-utilities';\nimport { Space } from '@fluentui/keyboard-keys';\nimport type { DataGridRowProps, DataGridRowState } from './DataGridRow.types';\nimport { useTableRow_unstable } from '../TableRow/useTableRow';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { DataGridSelectionCell } from '../DataGridSelectionCell/DataGridSelectionCell';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n\n/**\n * Create the state required to render DataGridRow.\n *\n * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,\n * before being passed to renderDataGridRow_unstable.\n *\n * @param props - props from this instance of DataGridRow\n * @param ref - reference to root HTMLElement of DataGridRow\n */\nexport const useDataGridRow_unstable = (props: DataGridRowProps, ref: React.Ref<HTMLElement>): DataGridRowState => {\n  const rowId = useTableRowIdContext();\n  const isHeader = useIsInTableHeader();\n  const columnDefs = useDataGridContext_unstable(ctx => ctx.columns);\n  const selectable = useDataGridContext_unstable(ctx => ctx.selectableRows);\n  const selected = useDataGridContext_unstable(ctx => ctx.selection.isRowSelected(rowId));\n  const tabbable = useDataGridContext_unstable(ctx => ctx.focusMode === 'row_unstable');\n  const appearance = useDataGridContext_unstable(ctx => {\n    if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {\n      return ctx.selectionAppearance;\n    }\n\n    return 'none';\n  });\n  const toggleRow = useDataGridContext_unstable(ctx => ctx.selection.toggleRow);\n\n  const onClick = useEventCallback((e: React.MouseEvent<HTMLTableRowElement>) => {\n    if (selectable && !isHeader) {\n      toggleRow(e, rowId);\n    }\n\n    props.onClick?.(e);\n  });\n\n  const onKeyDown = useEventCallback((e: React.KeyboardEvent<HTMLTableRowElement>) => {\n    if (selectable && !isHeader && e.key === Space && !isInteractiveHTMLElement(e.target as HTMLElement)) {\n      // stop scrolling\n      e.preventDefault();\n      toggleRow(e, rowId);\n    }\n\n    props.onKeyDown?.(e);\n  });\n\n  const baseState = useTableRow_unstable(\n    {\n      appearance,\n      'aria-selected': selectable ? selected : undefined,\n      ...props,\n      onClick,\n      onKeyDown,\n      children: null,\n      as: 'div',\n      tabIndex: tabbable && !isHeader ? 0 : undefined,\n    },\n    ref,\n  );\n\n  return {\n    ...baseState,\n    components: {\n      ...baseState.components,\n      selectionCell: DataGridSelectionCell,\n    },\n    selectionCell: resolveShorthand(props.selectionCell, { required: selectable }),\n    renderCell: props.children,\n    columnDefs,\n  };\n};\n"]}
{"version":3,"mappings":";;;;;;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;AASO,MAAMA,oBAAoB,GAAG,CAACC,KAAoB,EAAEC,GAA2B,KAAmB;;EACvG,MAAM;IAAEC,gBAAgB;IAAEC;EAAI,CAAE,GAAGC,8BAAe,EAAE;EACpD,MAAMC,aAAa,GAAG,YAAK,CAACC,EAAE,mCAAIJ,gBAAgB,IAAG,KAAK,GAAG,IAAI;EACjE,MAAMK,eAAe,GAAGC,+BAAe,EAAE;EACzC,MAAMC,cAAc,GAAGD,8BAAc,EAAE;EACvC,MAAME,WAAW,GAAGC,uCAAkB,EAAE;EAExC,OAAO;IACLC,UAAU,EAAE;MACVC,IAAI,EAAER;KACP;IACDQ,IAAI,EAAEC,uCAAqB,CAACT,aAAa,EAAE;MACzCJ,GAAG,EAAEa,+BAAa,CAACb,GAAG,EAAEM,eAAe,EAAEE,cAAc,CAAC;MACxDM,IAAI,EAAEV,aAAa,KAAK,KAAK,GAAG,KAAK,GAAGW,SAAS;MACjD,GAAGhB;KACJ,CAAC;IACFG,IAAI;IACJD,gBAAgB;IAChBe,UAAU,EAAE,WAAK,CAACA,UAAU,mCAAI,MAAM;IACtCP;GACD;AACH,CAAC;AArBYQ,4BAAoB","names":["useTableRow_unstable","props","ref","noNativeElements","size","tableContext_1","rootComponent","as","focusVisibleRef","react_tabster_1","focusWithinRef","isHeaderRow","tableHeaderContext_1","components","root","react_utilities_1","role","undefined","appearance","exports"],"sourceRoot":"../src/","sources":["packages/react-components/react-table/src/components/TableRow/useTableRow.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, useMergedRefs } from '@fluentui/react-utilities';\nimport { useFocusVisible, useFocusWithin } from '@fluentui/react-tabster';\nimport type { TableRowProps, TableRowState } from './TableRow.types';\nimport { useTableContext } from '../../contexts/tableContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n\n/**\n * Create the state required to render TableRow.\n *\n * The returned state can be modified with hooks such as useTableRowStyles_unstable,\n * before being passed to renderTableRow_unstable.\n *\n * @param props - props from this instance of TableRow\n * @param ref - reference to root HTMLElement of TableRow\n */\nexport const useTableRow_unstable = (props: TableRowProps, ref: React.Ref<HTMLElement>): TableRowState => {\n  const { noNativeElements, size } = useTableContext();\n  const rootComponent = props.as ?? noNativeElements ? 'div' : 'tr';\n  const focusVisibleRef = useFocusVisible();\n  const focusWithinRef = useFocusWithin();\n  const isHeaderRow = useIsInTableHeader();\n\n  return {\n    components: {\n      root: rootComponent,\n    },\n    root: getNativeElementProps(rootComponent, {\n      ref: useMergedRefs(ref, focusVisibleRef, focusWithinRef),\n      role: rootComponent === 'div' ? 'row' : undefined,\n      ...props,\n    }),\n    size,\n    noNativeElements,\n    appearance: props.appearance ?? 'none',\n    isHeaderRow,\n  };\n};\n"]}
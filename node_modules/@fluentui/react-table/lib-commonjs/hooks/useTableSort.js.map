{"version":3,"mappings":"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","names":["noop","undefined","exports","getSortDirection","setColumnSort","sort","rows","sortColumn","sortDirection","toggleColumnSort","useTableSort","options","tableState","useTableSortState","columns","sortState","defaultSortState","onSortChange","sorted","setSorted","react_utilities_1","initialState","defaultState","state","e","columnId","s","newState","nextSortColumn","nextSortDirection","slice","a","b","sortColumnDef","find","column","compare","mod","item"],"sourceRoot":"../src/","sources":["packages/react-components/react-table/src/hooks/useTableSort.ts"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nimport type {\n  TableColumnId,\n  TableRowData,\n  SortState,\n  TableSortState,\n  TableFeaturesState,\n  UseTableSortOptions,\n} from './types';\n\nconst noop = () => undefined;\n\nexport const defaultTableSortState: TableSortState<unknown> = {\n  getSortDirection: () => 'ascending',\n  setColumnSort: noop,\n  sort: <TRowState extends TableRowData<unknown>>(rows: TRowState[]) => [...rows],\n  sortColumn: undefined,\n  sortDirection: 'ascending',\n  toggleColumnSort: noop,\n};\n\nexport function useTableSort<TItem>(options: UseTableSortOptions) {\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return (tableState: TableFeaturesState<TItem>) => useTableSortState(tableState, options);\n}\n\nexport function useTableSortState<TItem>(\n  tableState: TableFeaturesState<TItem>,\n  options: UseTableSortOptions,\n): TableFeaturesState<TItem> {\n  const { columns } = tableState;\n  const { sortState, defaultSortState, onSortChange } = options;\n\n  const [sorted, setSorted] = useControllableState<SortState>({\n    initialState: {\n      sortDirection: 'ascending' as const,\n      sortColumn: undefined,\n    },\n    defaultState: defaultSortState,\n    state: sortState,\n  });\n\n  const { sortColumn, sortDirection } = sorted;\n\n  const toggleColumnSort = (e: React.SyntheticEvent, columnId: TableColumnId | undefined) => {\n    setSorted(s => {\n      const newState = { ...s, sortColumn: columnId };\n      if (s.sortColumn === columnId) {\n        newState.sortDirection = s.sortDirection === 'ascending' ? 'descending' : 'ascending';\n      } else {\n        newState.sortDirection = 'ascending';\n      }\n\n      onSortChange?.(e, newState);\n      return newState;\n    });\n  };\n\n  const setColumnSort: TableSortState<TItem>['setColumnSort'] = (e, nextSortColumn, nextSortDirection) => {\n    const newState = { sortColumn: nextSortColumn, sortDirection: nextSortDirection };\n    onSortChange?.(e, newState);\n    setSorted(newState);\n  };\n\n  const sort = <TRowState extends TableRowData<TItem>>(rows: TRowState[]) => {\n    return rows.slice().sort((a, b) => {\n      const sortColumnDef = columns.find(column => column.columnId === sortColumn);\n      if (!sortColumnDef?.compare) {\n        return 0;\n      }\n\n      const mod = sortDirection === 'ascending' ? 1 : -1;\n      return sortColumnDef.compare(a.item, b.item) * mod;\n    });\n  };\n\n  const getSortDirection: TableSortState<TItem>['getSortDirection'] = (columnId: TableColumnId) => {\n    return sortColumn === columnId ? sortDirection : undefined;\n  };\n\n  return {\n    ...tableState,\n    sort: {\n      sort,\n      sortColumn,\n      sortDirection,\n      setColumnSort,\n      toggleColumnSort,\n      getSortDirection,\n    },\n  };\n}\n"]}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTableColumnResizeState = void 0;
const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
const React = /*#__PURE__*/require("react");
const columnResizeUtils_1 = /*#__PURE__*/require("../utils/columnResizeUtils");
const createReducer = () => (state, action) => {
  switch (action.type) {
    case 'CONTAINER_WIDTH_UPDATED':
      return {
        ...state,
        containerWidth: action.containerWidth,
        columnWidthState: columnResizeUtils_1.adjustColumnWidthsToFitContainer(state.columnWidthState, action.containerWidth)
      };
    case 'COLUMNS_UPDATED':
      const newS = columnResizeUtils_1.columnDefinitionsToState(action.columns, state.columnWidthState, state.columnSizingOptions);
      return {
        ...state,
        columns: action.columns,
        columnWidthState: columnResizeUtils_1.adjustColumnWidthsToFitContainer(newS, state.containerWidth)
      };
    case 'COLUMN_SIZING_OPTIONS_UPDATED':
      const newState = columnResizeUtils_1.columnDefinitionsToState(state.columns, state.columnWidthState, action.columnSizingOptions);
      return {
        ...state,
        columnSizingOptions: action.columnSizingOptions,
        columnWidthState: columnResizeUtils_1.adjustColumnWidthsToFitContainer(newState, state.containerWidth)
      };
    case 'SET_COLUMN_WIDTH':
      const {
        columnId,
        width
      } = action;
      const {
        containerWidth
      } = state;
      const column = columnResizeUtils_1.getColumnById(state.columnWidthState, columnId);
      let newColumnWidthState = [...state.columnWidthState];
      if (!column) {
        return state;
      }
      // Adjust the column width and measure the new total width
      newColumnWidthState = columnResizeUtils_1.setColumnProperty(newColumnWidthState, columnId, 'width', width);
      // Set this width as idealWidth, because its a deliberate change, not a recalculation because of container
      newColumnWidthState = columnResizeUtils_1.setColumnProperty(newColumnWidthState, columnId, 'idealWidth', width);
      // Adjust the widths to the container size
      newColumnWidthState = columnResizeUtils_1.adjustColumnWidthsToFitContainer(newColumnWidthState, containerWidth);
      return {
        ...state,
        columnWidthState: newColumnWidthState
      };
  }
};
function useTableColumnResizeState(columns, containerWidth, params = {}) {
  const {
    onColumnResize,
    columnSizingOptions
  } = params;
  const reducer = React.useMemo(() => createReducer(), []);
  const [state, dispatch] = React.useReducer(reducer, {
    columns,
    containerWidth: 0,
    columnWidthState: columnResizeUtils_1.columnDefinitionsToState(columns, undefined, columnSizingOptions),
    columnSizingOptions
  });
  react_utilities_1.useIsomorphicLayoutEffect(() => {
    dispatch({
      type: 'CONTAINER_WIDTH_UPDATED',
      containerWidth
    });
  }, [containerWidth]);
  react_utilities_1.useIsomorphicLayoutEffect(() => {
    dispatch({
      type: 'COLUMNS_UPDATED',
      columns
    });
  }, [columns]);
  react_utilities_1.useIsomorphicLayoutEffect(() => {
    dispatch({
      type: 'COLUMN_SIZING_OPTIONS_UPDATED',
      columnSizingOptions
    });
  }, [columnSizingOptions]);
  const setColumnWidth = react_utilities_1.useEventCallback((event, data) => {
    let {
      width
    } = data;
    const {
      columnId
    } = data;
    const col = columnResizeUtils_1.getColumnById(state.columnWidthState, columnId);
    if (!col) {
      return;
    }
    width = Math.max(col.minWidth || 0, width);
    if (onColumnResize) {
      onColumnResize(event, {
        columnId,
        width
      });
    }
    dispatch({
      type: 'SET_COLUMN_WIDTH',
      columnId,
      width
    });
  });
  return {
    getColumnById: colId => columnResizeUtils_1.getColumnById(state.columnWidthState, colId),
    getColumns: () => state.columnWidthState,
    getColumnWidth: colId => columnResizeUtils_1.getColumnWidth(state.columnWidthState, colId),
    setColumnWidth
  };
}
exports.useTableColumnResizeState = useTableColumnResizeState;
//# sourceMappingURL=useTableColumnResizeState.js.map
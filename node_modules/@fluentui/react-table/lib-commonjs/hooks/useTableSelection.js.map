{"version":3,"mappings":"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","names":["noop","undefined","exports","allRowsSelected","clearRows","deselectRow","isRowSelected","selectRow","selectedRows","Set","someRowsSelected","toggleAllRows","toggleRow","selectionMode","useTableSelection","options","tableState","useTableSelectionState","items","getRowId","defaultSelectedItems","selectedItems","onSelectionChange","selected","setSelected","react_utilities_1","initialState","defaultState","state","selectionManager","React","useMemo","selectionManager_1","e","newSelectedItems","toggleAllItems","map","item","i","rowId","toggleItem","deselectItem","selectItem","isSelected","selection","size","length","clearItems"],"sourceRoot":"../src/","sources":["packages/react-components/react-table/src/hooks/useTableSelection.ts"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport { createSelectionManager } from './selectionManager';\nimport type { TableRowId, TableSelectionState, TableFeaturesState, UseTableSelectionOptions } from './types';\n\nconst noop = () => undefined;\n\nexport const defaultTableSelectionState: TableSelectionState = {\n  allRowsSelected: false,\n  clearRows: noop,\n  deselectRow: noop,\n  isRowSelected: () => false,\n  selectRow: noop,\n  selectedRows: new Set(),\n  someRowsSelected: false,\n  toggleAllRows: noop,\n  toggleRow: noop,\n  selectionMode: 'multiselect',\n};\n\nexport function useTableSelection<TItem>(options: UseTableSelectionOptions) {\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return (tableState: TableFeaturesState<TItem>) => useTableSelectionState(tableState, options);\n}\n\nexport function useTableSelectionState<TItem>(\n  tableState: TableFeaturesState<TItem>,\n  options: UseTableSelectionOptions,\n): TableFeaturesState<TItem> {\n  const { items, getRowId } = tableState;\n  const { selectionMode, defaultSelectedItems, selectedItems, onSelectionChange } = options;\n\n  const [selected, setSelected] = useControllableState({\n    initialState: new Set<TableRowId>(),\n    defaultState: defaultSelectedItems,\n    state: selectedItems,\n  });\n\n  const selectionManager = React.useMemo(() => {\n    return createSelectionManager(selectionMode, (e, newSelectedItems) => {\n      setSelected(() => {\n        onSelectionChange?.(e as React.SyntheticEvent, { selectedItems: newSelectedItems });\n        return newSelectedItems;\n      });\n    });\n  }, [onSelectionChange, selectionMode, setSelected]);\n\n  const toggleAllRows: TableSelectionState['toggleAllRows'] = useEventCallback(e => {\n    selectionManager.toggleAllItems(\n      e,\n      items.map((item, i) => getRowId?.(item) ?? i),\n      selected,\n    );\n  });\n\n  const toggleRow: TableSelectionState['toggleRow'] = useEventCallback((e, rowId: TableRowId) =>\n    selectionManager.toggleItem(e, rowId, selected),\n  );\n\n  const deselectRow: TableSelectionState['deselectRow'] = useEventCallback((e, rowId: TableRowId) =>\n    selectionManager.deselectItem(e, rowId, selected),\n  );\n\n  const selectRow: TableSelectionState['selectRow'] = useEventCallback((e, rowId: TableRowId) =>\n    selectionManager.selectItem(e, rowId, selected),\n  );\n\n  const isRowSelected: TableSelectionState['isRowSelected'] = (rowId: TableRowId) =>\n    selectionManager.isSelected(rowId, selected);\n\n  return {\n    ...tableState,\n    selection: {\n      selectionMode,\n      someRowsSelected: selected.size > 0,\n      allRowsSelected: selectionMode === 'single' ? selected.size > 0 : selected.size === items.length,\n      selectedRows: selected,\n      toggleRow,\n      toggleAllRows,\n      clearRows: selectionManager.clearItems,\n      deselectRow,\n      selectRow,\n      isRowSelected,\n    },\n  };\n}\n"]}
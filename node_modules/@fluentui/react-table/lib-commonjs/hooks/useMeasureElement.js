"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMeasureElement = void 0;
const react_utilities_1 = /*#__PURE__*/require("@fluentui/react-utilities");
const React = /*#__PURE__*/require("react");
const react_shared_contexts_1 = /*#__PURE__*/require("@fluentui/react-shared-contexts");
/**
 * Provides a way of reporting element width.
 * Returns
 * `width` - current element width (0 by default),
 * `measureElementRef` - a ref function to be passed as `ref` to the element you want to measure
 */
function useMeasureElement() {
  const [width, setWidth] = React.useState(0);
  const container = React.useRef(undefined);
  const {
    targetDocument
  } = react_shared_contexts_1.useFluent_unstable();
  // the handler for resize observer
  const handleResize = React.useCallback(() => {
    var _a;
    const containerWidth = (_a = container.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width;
    setWidth(containerWidth || 0);
  }, []);
  // Keep the reference of ResizeObserver in the state, as it should live through renders
  const [resizeObserver] = React.useState(react_utilities_1.canUseDOM() ? new ResizeObserver(handleResize) : undefined);
  const measureElementRef = React.useCallback(el => {
    if (!targetDocument || !resizeObserver) {
      return;
    }
    // cleanup previous container
    if (container.current) {
      resizeObserver.unobserve(container.current);
      container.current.remove();
    }
    if (el) {
      container.current = targetDocument.createElement('div');
      el.insertAdjacentElement('beforebegin', container.current);
      resizeObserver.observe(container.current);
      handleResize();
    }
  }, [targetDocument, resizeObserver, handleResize]);
  React.useEffect(() => {
    return () => resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect();
  }, [resizeObserver]);
  return {
    width,
    measureElementRef
  };
}
exports.useMeasureElement = useMeasureElement;
//# sourceMappingURL=useMeasureElement.js.map
{"version":3,"mappings":"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","names":["createSelectionManager","mode","onSelectionChange","undefined","managerFactory","createMultipleSelectionManager","createSingleSelectionManager","toggleAllItems","e","itemIds","selectedItems","allItemsSelected","every","itemId","has","clear","forEach","add","Set","toggleItem","delete","selectItem","deselectItem","clearItems","isSelected","process","env","NODE_ENV","Error"],"sourceRoot":"../src/","sources":["packages/react-components/react-table/src/hooks/selectionManager.ts"],"sourcesContent":["import * as React from 'react';\nimport { SelectionMode } from './types';\n\ntype OnSelectionChangeCallback = (e: React.SyntheticEvent, selectedItems: Set<SelectionItemId>) => void;\n\nexport interface SelectionManager {\n  toggleItem(e: React.SyntheticEvent, id: SelectionItemId, selectedItems: Set<SelectionItemId>): void;\n  selectItem(e: React.SyntheticEvent, id: SelectionItemId, selectedItems: Set<SelectionItemId>): void;\n  deselectItem(e: React.SyntheticEvent, id: SelectionItemId, selectedItems: Set<SelectionItemId>): void;\n  clearItems(e: React.SyntheticEvent): void;\n  isSelected(id: SelectionItemId, selectedItems: Set<SelectionItemId>): boolean;\n  toggleAllItems(e: React.SyntheticEvent, itemIds: SelectionItemId[], selectedItems: Set<SelectionItemId>): void;\n}\n\nexport type SelectionItemId = string | number;\n\nexport function createSelectionManager(\n  mode: SelectionMode,\n  onSelectionChange: OnSelectionChangeCallback = () => undefined,\n): SelectionManager {\n  const managerFactory = mode === 'multiselect' ? createMultipleSelectionManager : createSingleSelectionManager;\n\n  return managerFactory(onSelectionChange);\n}\n\nfunction createMultipleSelectionManager(onSelectionChange: OnSelectionChangeCallback): SelectionManager {\n  const toggleAllItems: SelectionManager['toggleAllItems'] = (e, itemIds, selectedItems) => {\n    const allItemsSelected = itemIds.every(itemId => selectedItems.has(itemId));\n\n    if (allItemsSelected) {\n      selectedItems.clear();\n    } else {\n      itemIds.forEach(itemId => selectedItems.add(itemId));\n    }\n\n    onSelectionChange(e, new Set(selectedItems));\n  };\n\n  const toggleItem: SelectionManager['toggleItem'] = (e, itemId, selectedItems) => {\n    if (selectedItems.has(itemId)) {\n      selectedItems.delete(itemId);\n    } else {\n      selectedItems.add(itemId);\n    }\n\n    onSelectionChange(e, new Set(selectedItems));\n  };\n\n  const selectItem: SelectionManager['selectItem'] = (e, itemId, selectedItems) => {\n    selectedItems.add(itemId);\n    onSelectionChange(e, new Set(selectedItems));\n  };\n\n  const deselectItem: SelectionManager['deselectItem'] = (e, itemId, selectedItems) => {\n    selectedItems.delete(itemId);\n    onSelectionChange(e, new Set(selectedItems));\n  };\n\n  const clearItems: SelectionManager['clearItems'] = e => {\n    onSelectionChange(e, new Set());\n  };\n\n  const isSelected = (itemId: SelectionItemId, selectedItems: Set<SelectionItemId>) => {\n    return selectedItems.has(itemId);\n  };\n\n  return {\n    toggleItem,\n    selectItem,\n    deselectItem,\n    clearItems,\n    isSelected,\n    toggleAllItems,\n  };\n}\n\nfunction createSingleSelectionManager(onSelectionChange: OnSelectionChangeCallback): SelectionManager {\n  const toggleItem: SelectionManager['toggleItem'] = (e, itemId) => {\n    onSelectionChange(e, new Set([itemId]));\n  };\n\n  const clearItems: SelectionManager['clearItems'] = e => {\n    onSelectionChange(e, new Set<SelectionItemId>());\n  };\n\n  const isSelected = (itemId: SelectionItemId, selectedItems: Set<SelectionItemId>) => {\n    return selectedItems.has(itemId);\n  };\n\n  const selectItem: SelectionManager['selectItem'] = (e, itemId) => {\n    onSelectionChange(e, new Set([itemId]));\n  };\n\n  return {\n    deselectItem: clearItems,\n    selectItem,\n    toggleAllItems: () => {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error('[react-table]: `toggleAllItems` should not be used in single selection mode');\n      }\n\n      return undefined;\n    },\n    toggleItem,\n    clearItems,\n    isSelected,\n  };\n}\n"]}
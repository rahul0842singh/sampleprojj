{"version":3,"mappings":"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","names":["React","useFluent_unstable","useFluent","getEventClientCoords","isMouseEvent","isTouchEvent","useTableColumnResizeMouseHandler","columnResizeState","mouseX","useRef","currentWidth","colId","undefined","targetDocument","globalWin","defaultView","recalculatePosition","useCallback","e","clientX","dx","current","setColumnWidth","columnId","width","onDrag","requestAnimationFrame","onDragEnd","event","removeEventListener","getOnMouseDown","getColumnWidth","target","currentTarget","button","addEventListener"],"sourceRoot":"../src/","sources":["packages/react-components/react-table/src/hooks/useTableColumnResizeMouseHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport { TableColumnId, ColumnResizeState } from './types';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport {\n  NativeTouchOrMouseEvent,\n  ReactTouchOrMouseEvent,\n  getEventClientCoords,\n  isMouseEvent,\n  isTouchEvent,\n} from '@fluentui/react-utilities';\n\nexport function useTableColumnResizeMouseHandler(columnResizeState: ColumnResizeState) {\n  const mouseX = React.useRef(0);\n  const currentWidth = React.useRef(0);\n  const colId = React.useRef<TableColumnId | undefined>(undefined);\n\n  const { targetDocument } = useFluent();\n  const globalWin = targetDocument?.defaultView;\n\n  const recalculatePosition = React.useCallback(\n    (e: NativeTouchOrMouseEvent) => {\n      const { clientX } = getEventClientCoords(e);\n      const dx = clientX - mouseX.current;\n\n      // Update the local width for the column and set it\n      currentWidth.current += dx;\n      colId.current && columnResizeState.setColumnWidth(e, { columnId: colId.current, width: currentWidth.current });\n      mouseX.current = clientX;\n    },\n    [columnResizeState],\n  );\n\n  const onDrag = React.useCallback(\n    (e: NativeTouchOrMouseEvent) => {\n      // Using requestAnimationFrame here drastically improves resizing experience on slower CPUs\n      if (typeof globalWin?.requestAnimationFrame === 'function') {\n        requestAnimationFrame(() => recalculatePosition(e));\n      } else {\n        recalculatePosition(e);\n      }\n    },\n    [globalWin?.requestAnimationFrame, recalculatePosition],\n  );\n\n  const onDragEnd = React.useCallback(\n    (event: NativeTouchOrMouseEvent) => {\n      if (isMouseEvent(event)) {\n        targetDocument?.removeEventListener('mouseup', onDragEnd);\n        targetDocument?.removeEventListener('mousemove', onDrag);\n      }\n      if (isTouchEvent(event)) {\n        targetDocument?.removeEventListener('touchend', onDragEnd);\n        targetDocument?.removeEventListener('touchmove', onDrag);\n      }\n    },\n    [onDrag, targetDocument],\n  );\n\n  const getOnMouseDown = (columnId: TableColumnId) => (event: ReactTouchOrMouseEvent) => {\n    // Keep the width locally so that we decouple the calculation of the next with from rendering.\n    // This makes the whole experience much faster and more precise\n    currentWidth.current = columnResizeState.getColumnWidth(columnId);\n    mouseX.current = getEventClientCoords(event).clientX;\n    colId.current = columnId;\n\n    if (isMouseEvent(event)) {\n      // ignore other buttons than primary mouse button\n      if (event.target !== event.currentTarget || event.button !== 0) {\n        return;\n      }\n      targetDocument?.addEventListener('mouseup', onDragEnd);\n      targetDocument?.addEventListener('mousemove', onDrag);\n    }\n\n    if (isTouchEvent(event)) {\n      targetDocument?.addEventListener('touchend', onDragEnd);\n      targetDocument?.addEventListener('touchmove', onDrag);\n    }\n  };\n\n  return {\n    getOnMouseDown: (columnId: TableColumnId) => getOnMouseDown(columnId),\n  };\n}\n"]}
{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,2BAA2B;AACrD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,kBAAkB,IAAIC,SAAS,QAAQ,iCAAiC;AAEjF;;;;;;AAMA,OAAM,SAAUC,iBAAiB;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,KAAK,CAACM,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAMC,SAAS,GAAGP,KAAK,CAACQ,MAAM,CAA0BC,SAAS,CAAC;EAElE,MAAM;IAAEC;EAAc,CAAE,GAAGR,SAAS,EAAE;EAEtC;EACA,MAAMS,YAAY,GAAGX,KAAK,CAACY,WAAW,CAAC,MAAK;;IAC1C,MAAMC,cAAc,GAAG,eAAS,CAACC,OAAO,0CAAEC,qBAAqB,GAAGX,KAAK;IACvEC,QAAQ,CAACQ,cAAc,IAAI,CAAC,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAEN;EACA,MAAM,CAACG,cAAc,CAAC,GAAGhB,KAAK,CAACM,QAAQ,CAACP,SAAS,EAAE,GAAG,IAAIkB,cAAc,CAACN,YAAY,CAAC,GAAGF,SAAS,CAAC;EACnG,MAAMS,iBAAiB,GAAGlB,KAAK,CAACY,WAAW,CACxCO,EAAmB,IAAI;IACtB,IAAI,CAACT,cAAc,IAAI,CAACM,cAAc,EAAE;MACtC;;IAGF;IACA,IAAIT,SAAS,CAACO,OAAO,EAAE;MACrBE,cAAc,CAACI,SAAS,CAACb,SAAS,CAACO,OAAO,CAAC;MAC3CP,SAAS,CAACO,OAAO,CAACO,MAAM,EAAE;;IAG5B,IAAIF,EAAE,EAAE;MACNZ,SAAS,CAACO,OAAO,GAAGJ,cAAc,CAACY,aAAa,CAAC,KAAK,CAAC;MACvDH,EAAE,CAACI,qBAAqB,CAAC,aAAa,EAAEhB,SAAS,CAACO,OAAO,CAAC;MAC1DE,cAAc,CAACQ,OAAO,CAACjB,SAAS,CAACO,OAAO,CAAC;MACzCH,YAAY,EAAE;;EAElB,CAAC,EACD,CAACD,cAAc,EAAEM,cAAc,EAAEL,YAAY,CAAC,CAC/C;EAEDX,KAAK,CAACyB,SAAS,CAAC,MAAK;IACnB,OAAO,MAAMT,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEU,UAAU,EAAE;EAC3C,CAAC,EAAE,CAACV,cAAc,CAAC,CAAC;EAEpB,OAAO;IAAEZ,KAAK;IAAEc;EAAiB,CAAE;AACrC","names":["canUseDOM","React","useFluent_unstable","useFluent","useMeasureElement","width","setWidth","useState","container","useRef","undefined","targetDocument","handleResize","useCallback","containerWidth","current","getBoundingClientRect","resizeObserver","ResizeObserver","measureElementRef","el","unobserve","remove","createElement","insertAdjacentElement","observe","useEffect","disconnect"],"sourceRoot":"../src/","sources":["packages/react-components/react-table/src/hooks/useMeasureElement.ts"],"sourcesContent":["import { canUseDOM } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n\n/**\n * Provides a way of reporting element width.\n * Returns\n * `width` - current element width (0 by default),\n * `measureElementRef` - a ref function to be passed as `ref` to the element you want to measure\n */\nexport function useMeasureElement<TElement extends HTMLElement = HTMLElement>() {\n  const [width, setWidth] = React.useState(0);\n  const container = React.useRef<HTMLElement | undefined>(undefined);\n\n  const { targetDocument } = useFluent();\n\n  // the handler for resize observer\n  const handleResize = React.useCallback(() => {\n    const containerWidth = container.current?.getBoundingClientRect().width;\n    setWidth(containerWidth || 0);\n  }, []);\n\n  // Keep the reference of ResizeObserver in the state, as it should live through renders\n  const [resizeObserver] = React.useState(canUseDOM() ? new ResizeObserver(handleResize) : undefined);\n  const measureElementRef = React.useCallback(\n    (el: TElement | null) => {\n      if (!targetDocument || !resizeObserver) {\n        return;\n      }\n\n      // cleanup previous container\n      if (container.current) {\n        resizeObserver.unobserve(container.current);\n        container.current.remove();\n      }\n\n      if (el) {\n        container.current = targetDocument.createElement('div');\n        el.insertAdjacentElement('beforebegin', container.current);\n        resizeObserver.observe(container.current);\n        handleResize();\n      }\n    },\n    [targetDocument, resizeObserver, handleResize],\n  );\n\n  React.useEffect(() => {\n    return () => resizeObserver?.disconnect();\n  }, [resizeObserver]);\n\n  return { width, measureElementRef };\n}\n"]}
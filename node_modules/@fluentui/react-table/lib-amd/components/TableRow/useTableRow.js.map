{"version":3,"file":"useTableRow.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-table/src/components/TableRow/useTableRow.ts"],"names":[],"mappings":";;;;IAOA;;;;;;;;OAQG;IACI,IAAM,oBAAoB,GAAG,UAAC,KAAoB,EAAE,GAA2B;;QAC9E,IAAA,KAA6B,8BAAe,EAAE,EAA5C,gBAAgB,sBAAA,EAAE,IAAI,UAAsB,CAAC;QACrD,IAAM,aAAa,GAAG,CAAA,MAAA,KAAK,CAAC,EAAE,mCAAI,gBAAgB,EAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAClE,IAAM,eAAe,GAAG,+BAAe,EAAE,CAAC;QAC1C,IAAM,cAAc,GAAG,8BAAc,EAAE,CAAC;QACxC,IAAM,WAAW,GAAG,uCAAkB,EAAE,CAAC;QAEzC,OAAO;YACL,UAAU,EAAE;gBACV,IAAI,EAAE,aAAa;aACpB;YACD,IAAI,EAAE,uCAAqB,CAAC,aAAa,qBACvC,GAAG,EAAE,+BAAa,CAAC,GAAG,EAAE,eAAe,EAAE,cAAc,CAAC,EACxD,IAAI,EAAE,aAAa,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,IAC9C,KAAK,EACR;YACF,IAAI,MAAA;YACJ,gBAAgB,kBAAA;YAChB,UAAU,EAAE,MAAA,KAAK,CAAC,UAAU,mCAAI,MAAM;YACtC,WAAW,aAAA;SACZ,CAAC;IACJ,CAAC,CAAC;IArBW,QAAA,oBAAoB,wBAqB/B","sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, useMergedRefs } from '@fluentui/react-utilities';\nimport { useFocusVisible, useFocusWithin } from '@fluentui/react-tabster';\nimport type { TableRowProps, TableRowState } from './TableRow.types';\nimport { useTableContext } from '../../contexts/tableContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n\n/**\n * Create the state required to render TableRow.\n *\n * The returned state can be modified with hooks such as useTableRowStyles_unstable,\n * before being passed to renderTableRow_unstable.\n *\n * @param props - props from this instance of TableRow\n * @param ref - reference to root HTMLElement of TableRow\n */\nexport const useTableRow_unstable = (props: TableRowProps, ref: React.Ref<HTMLElement>): TableRowState => {\n  const { noNativeElements, size } = useTableContext();\n  const rootComponent = props.as ?? noNativeElements ? 'div' : 'tr';\n  const focusVisibleRef = useFocusVisible();\n  const focusWithinRef = useFocusWithin();\n  const isHeaderRow = useIsInTableHeader();\n\n  return {\n    components: {\n      root: rootComponent,\n    },\n    root: getNativeElementProps(rootComponent, {\n      ref: useMergedRefs(ref, focusVisibleRef, focusWithinRef),\n      role: rootComponent === 'div' ? 'row' : undefined,\n      ...props,\n    }),\n    size,\n    noNativeElements,\n    appearance: props.appearance ?? 'none',\n    isHeaderRow,\n  };\n};\n"]}
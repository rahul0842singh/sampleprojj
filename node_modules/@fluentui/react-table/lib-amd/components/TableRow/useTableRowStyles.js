define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme", "../TableCellActions/useTableCellActionsStyles", "../TableSelectionCell/useTableSelectionCellStyles", "@fluentui/react-tabster"], function (require, exports, tslib_1, react_1, react_theme_1, useTableCellActionsStyles_1, useTableSelectionCellStyles_1, react_tabster_1) {
    "use strict";
    var _a, _b, _c;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableRowStyles_unstable = exports.tableRowClassNames = exports.tableRowClassName = void 0;
    exports.tableRowClassName = 'fui-TableRow';
    exports.tableRowClassNames = {
        root: exports.tableRowClassName,
    };
    var useTableLayoutStyles = react_1.makeStyles({
        root: {
            display: 'table-row',
        },
    });
    var useFlexLayoutStyles = react_1.makeStyles({
        root: {
            display: 'flex',
            alignItems: 'center',
        },
    });
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralForeground1, boxSizing: 'border-box' }, react_tabster_1.createCustomFocusIndicatorStyle((_a = {},
            _a["& ." + useTableSelectionCellStyles_1.tableSelectionCellClassNames.root] = {
                opacity: 1,
            },
            _a["& ." + useTableCellActionsStyles_1.tableCellActionsClassNames.root] = {
                opacity: 1,
            },
            _a), { selector: 'focus-within', enableOutline: true })), react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.outline('2px', 'solid', react_theme_1.tokens.colorStrokeFocus2)), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { selector: 'focus', enableOutline: true })),
        // When focus is within the row the background colour
        // should be the same as hover, except when there is a brand
        // or neutral appearance applied on the row
        noAppearanceFocusWithin: tslib_1.__assign({}, react_tabster_1.createCustomFocusIndicatorStyle({
            backgroundColor: react_theme_1.tokens.colorSubtleBackgroundHover,
        }, { selector: 'focus-within', enableOutline: true })),
        rootInteractive: {
            ':active': (_b = {
                    backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
                    color: react_theme_1.tokens.colorNeutralForeground1Pressed
                },
                _b["& ." + useTableCellActionsStyles_1.tableCellActionsClassNames.root] = {
                    opacity: 1,
                },
                _b["& ." + useTableSelectionCellStyles_1.tableSelectionCellClassNames.root] = {
                    opacity: 1,
                },
                _b),
            ':hover': (_c = {
                    backgroundColor: react_theme_1.tokens.colorSubtleBackgroundHover,
                    color: react_theme_1.tokens.colorNeutralForeground1Hover
                },
                _c["& ." + useTableCellActionsStyles_1.tableCellActionsClassNames.root] = {
                    opacity: 1,
                },
                _c["& ." + useTableSelectionCellStyles_1.tableSelectionCellClassNames.root] = {
                    opacity: 1,
                },
                _c),
        },
        medium: tslib_1.__assign({}, react_1.shorthands.borderBottom(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStroke2)),
        small: tslib_1.__assign({}, react_1.shorthands.borderBottom(react_theme_1.tokens.strokeWidthThin, 'solid', react_theme_1.tokens.colorNeutralStroke2)),
        'extra-small': {
            fontSize: react_theme_1.tokens.fontSizeBase200,
        },
        brand: tslib_1.__assign(tslib_1.__assign({ backgroundColor: react_theme_1.tokens.colorBrandBackground2, color: react_theme_1.tokens.colorNeutralForeground1Hover }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeOnBrand)), { ':hover': {
                backgroundColor: react_theme_1.tokens.colorBrandBackground2,
            }, ':active': {
                backgroundColor: react_theme_1.tokens.colorBrandBackgroundInvertedSelected,
            }, '@media(forced-colors: active)': tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.border('2px', 'solid', 'transparent')), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { boxSizing: 'border-box', ':focus-visible': {
                    outlineOffset: '-4px',
                } }) }),
        neutral: tslib_1.__assign({ '@media(forced-colors: active)': tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.border('2px', 'solid', 'transparent')), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { boxSizing: 'border-box', ':focus-visible': {
                    outlineOffset: '-4px',
                } }), backgroundColor: react_theme_1.tokens.colorSubtleBackgroundSelected, color: react_theme_1.tokens.colorNeutralForeground1Hover, ':hover': {
                backgroundColor: react_theme_1.tokens.colorSubtleBackgroundSelected,
            }, ':active': {
                backgroundColor: react_theme_1.tokens.colorSubtleBackgroundSelected,
            } }, react_1.shorthands.borderColor(react_theme_1.tokens.colorNeutralStrokeOnBrand)),
        none: {},
    });
    /**
     * Apply styling to the TableRow slots based on the state
     */
    var useTableRowStyles_unstable = function (state) {
        var styles = useStyles();
        var layoutStyles = {
            table: useTableLayoutStyles(),
            flex: useFlexLayoutStyles(),
        };
        state.root.className = react_1.mergeClasses(exports.tableRowClassNames.root, styles.root, !state.isHeaderRow && styles.rootInteractive, styles[state.size], state.noNativeElements ? layoutStyles.flex.root : layoutStyles.table.root, styles[state.appearance], state.appearance === 'none' && !state.isHeaderRow && styles.noAppearanceFocusWithin, state.root.className);
        return state;
    };
    exports.useTableRowStyles_unstable = useTableRowStyles_unstable;
});
//# sourceMappingURL=useTableRowStyles.js.map
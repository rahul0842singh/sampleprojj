{"version":3,"file":"useDataGridHeaderCell.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-table/src/components/DataGridHeaderCell/useDataGridHeaderCell.ts"],"names":[],"mappings":";;;;IAQA;;;;;;;;OAQG;IACI,IAAM,8BAA8B,GAAG,UAC5C,KAA8B,EAC9B,GAA2B;QAE3B,IAAM,QAAQ,GAAG,oCAAkB,EAAE,CAAC;QAC9B,IAAA,QAAQ,GAAK,8BAAe,EAAE,SAAtB,CAAuB;QACvC,IAAM,gBAAgB,GAAG,6CAA2B,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,CAAC,gBAAgB,EAAzB,CAAyB,CAAC,CAAC;QACvF,IAAM,aAAa,GAAG,6CAA2B,CAAC,UAAA,GAAG;YACnD,OAAA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS;QAA1D,CAA0D,CAC3D,CAAC;QAEF,IAAM,gBAAgB,GAAG,6CAA2B,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,gBAAgB,EAApB,CAAoB,CAAC,CAAC;QAClF,IAAM,YAAY,GAAG,6CAA2B,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,qBAAqB,EAAzB,CAAyB,CAAC,CAAC;QAEnF,IAAM,OAAO,GAAG,kCAAgB,CAAC,UAAC,CAA+C;;YAC/E,IAAI,QAAQ,EAAE;gBACZ,gBAAgB,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;aAC/B;YACD,MAAA,KAAK,CAAC,OAAO,+CAAb,KAAK,EAAW,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,OAAO,gDAA2B,sDAE9B,aAAa,eAAA,EACb,EAAE,EAAE,KAAK,EACT,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAC/B,CAAC,gBAAgB,CAAC,CAAC,CAAC,YAAY,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GACxE,KAAK,KACR,OAAO,SAAA,KAET,GAAG,CACJ,CAAC;IACJ,CAAC,CAAC;IAhCW,QAAA,8BAA8B,kCAgCzC","sourcesContent":["import * as React from 'react';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport type { DataGridHeaderCellProps, DataGridHeaderCellState } from './DataGridHeaderCell.types';\nimport { useTableHeaderCell_unstable } from '../TableHeaderCell/useTableHeaderCell';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { useColumnIdContext } from '../../contexts/columnIdContext';\nimport { useTableContext } from '../../contexts/tableContext';\n\n/**\n * Create the state required to render DataGridHeaderCell.\n *\n * The returned state can be modified with hooks such as useDataGridHeaderCellStyles_unstable,\n * before being passed to renderDataGridHeaderCell_unstable.\n *\n * @param props - props from this instance of DataGridHeaderCell\n * @param ref - reference to root HTMLElement of DataGridHeaderCell\n */\nexport const useDataGridHeaderCell_unstable = (\n  props: DataGridHeaderCellProps,\n  ref: React.Ref<HTMLElement>,\n): DataGridHeaderCellState => {\n  const columnId = useColumnIdContext();\n  const { sortable } = useTableContext();\n  const toggleColumnSort = useDataGridContext_unstable(ctx => ctx.sort.toggleColumnSort);\n  const sortDirection = useDataGridContext_unstable(ctx =>\n    sortable ? ctx.sort.getSortDirection(columnId) : undefined,\n  );\n\n  const resizableColumns = useDataGridContext_unstable(ctx => ctx.resizableColumns);\n  const columnSizing = useDataGridContext_unstable(ctx => ctx.columnSizing_unstable);\n\n  const onClick = useEventCallback((e: React.MouseEvent<HTMLTableHeaderCellElement>) => {\n    if (sortable) {\n      toggleColumnSort(e, columnId);\n    }\n    props.onClick?.(e);\n  });\n\n  return useTableHeaderCell_unstable(\n    {\n      sortDirection,\n      as: 'div',\n      tabIndex: sortable ? undefined : 0,\n      ...(resizableColumns ? columnSizing.getTableHeaderCellProps(columnId) : {}),\n      ...props,\n      onClick,\n    },\n    ref,\n  );\n};\n"]}
define(["require", "exports", "tslib", "@fluentui/react-utilities", "../TableHeaderCell/useTableHeaderCell", "../../contexts/dataGridContext", "../../contexts/columnIdContext", "../../contexts/tableContext"], function (require, exports, tslib_1, react_utilities_1, useTableHeaderCell_1, dataGridContext_1, columnIdContext_1, tableContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useDataGridHeaderCell_unstable = void 0;
    /**
     * Create the state required to render DataGridHeaderCell.
     *
     * The returned state can be modified with hooks such as useDataGridHeaderCellStyles_unstable,
     * before being passed to renderDataGridHeaderCell_unstable.
     *
     * @param props - props from this instance of DataGridHeaderCell
     * @param ref - reference to root HTMLElement of DataGridHeaderCell
     */
    var useDataGridHeaderCell_unstable = function (props, ref) {
        var columnId = columnIdContext_1.useColumnIdContext();
        var sortable = tableContext_1.useTableContext().sortable;
        var toggleColumnSort = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.sort.toggleColumnSort; });
        var sortDirection = dataGridContext_1.useDataGridContext_unstable(function (ctx) {
            return sortable ? ctx.sort.getSortDirection(columnId) : undefined;
        });
        var resizableColumns = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.resizableColumns; });
        var columnSizing = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.columnSizing_unstable; });
        var onClick = react_utilities_1.useEventCallback(function (e) {
            var _a;
            if (sortable) {
                toggleColumnSort(e, columnId);
            }
            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
        });
        return useTableHeaderCell_1.useTableHeaderCell_unstable(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ sortDirection: sortDirection, as: 'div', tabIndex: sortable ? undefined : 0 }, (resizableColumns ? columnSizing.getTableHeaderCellProps(columnId) : {})), props), { onClick: onClick }), ref);
    };
    exports.useDataGridHeaderCell_unstable = useDataGridHeaderCell_unstable;
});
//# sourceMappingURL=useDataGridHeaderCell.js.map
{"version":3,"file":"useDataGridSelectionCell.js","sourceRoot":"","sources":["../../../../../../../../../packages/react-components/react-table/src/components/DataGridSelectionCell/useDataGridSelectionCell.ts"],"names":[],"mappings":";;;;IAQA;;;;;;;;OAQG;IACI,IAAM,iCAAiC,GAAG,UAC/C,KAAiC,EACjC,GAA2B;QAE3B,IAAM,QAAQ,GAAG,uCAAkB,EAAE,CAAC;QACtC,IAAM,KAAK,GAAG,mCAAoB,EAAE,CAAC;QACrC,IAAM,MAAM,GAAG,6CAA2B,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,eAAe,EAAnB,CAAmB,CAAC,CAAC;QACvE,IAAM,OAAO,GAAG,6CAA2B,CAAC,UAAA,GAAG;YAC7C,IAAI,QAAQ,IAAI,GAAG,CAAC,SAAS,CAAC,aAAa,KAAK,aAAa,EAAE;gBAC7D,OAAO,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;aAChG;YAED,OAAO,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAM,aAAa,GAAG,6CAA2B,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,SAAS,CAAC,aAAa,EAA3B,CAA2B,CAAC,CAAC;QACtF,IAAM,IAAI,GAAG,6CAA2B,CAAC,UAAA,GAAG;YAC1C,OAAA,GAAG,CAAC,SAAS,CAAC,aAAa,KAAK,aAAa,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO;QAApE,CAAoE,CACrE,CAAC;QAEF,IAAM,OAAO,GAAG,kCAAgB,CAAC,UAAC,CAAyC;;YACzE,IAAI,QAAQ,EAAE;gBACZ,aAAa,CAAC,CAAC,CAAC,CAAC;aAClB;YAED,MAAA,KAAK,CAAC,OAAO,+CAAb,KAAK,EAAW,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,OAAO,sDAA8B,qCAEjC,EAAE,EAAE,KAAK,EACT,IAAI,EAAE,UAAU,EAChB,OAAO,SAAA,EACP,IAAI,MAAA,EACJ,MAAM,EAAE,QAAQ,IAAI,IAAI,KAAK,OAAO,EACpC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,EAC9C,eAAe,EAAE,QAAQ,IAAI,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EACtE,MAAM,QAAA,IACH,KAAK,KACR,OAAO,SAAA,KAET,GAAG,CACJ,CAAC;IACJ,CAAC,CAAC;IA3CW,QAAA,iCAAiC,qCA2C5C","sourcesContent":["import * as React from 'react';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\nimport { useTableSelectionCell_unstable } from '../TableSelectionCell/useTableSelectionCell';\nimport type { DataGridSelectionCellProps, DataGridSelectionCellState } from './DataGridSelectionCell.types';\n\n/**\n * Create the state required to render DataGridSelectionCell.\n *\n * The returned state can be modified with hooks such as useDataGridSelectionCellStyles_unstable,\n * before being passed to renderDataGridSelectionCell_unstable.\n *\n * @param props - props from this instance of DataGridSelectionCell\n * @param ref - reference to root HTMLElement of DataGridSelectionCell\n */\nexport const useDataGridSelectionCell_unstable = (\n  props: DataGridSelectionCellProps,\n  ref: React.Ref<HTMLElement>,\n): DataGridSelectionCellState => {\n  const isHeader = useIsInTableHeader();\n  const rowId = useTableRowIdContext();\n  const subtle = useDataGridContext_unstable(ctx => ctx.subtleSelection);\n  const checked = useDataGridContext_unstable(ctx => {\n    if (isHeader && ctx.selection.selectionMode === 'multiselect') {\n      return ctx.selection.allRowsSelected ? true : ctx.selection.someRowsSelected ? 'mixed' : false;\n    }\n\n    return ctx.selection.isRowSelected(rowId);\n  });\n\n  const toggleAllRows = useDataGridContext_unstable(ctx => ctx.selection.toggleAllRows);\n  const type = useDataGridContext_unstable(ctx =>\n    ctx.selection.selectionMode === 'multiselect' ? 'checkbox' : 'radio',\n  );\n\n  const onClick = useEventCallback((e: React.MouseEvent<HTMLTableCellElement>) => {\n    if (isHeader) {\n      toggleAllRows(e);\n    }\n\n    props.onClick?.(e);\n  });\n\n  return useTableSelectionCell_unstable(\n    {\n      as: 'div',\n      role: 'gridcell',\n      checked,\n      type,\n      hidden: isHeader && type === 'radio',\n      'aria-checked': isHeader ? checked : undefined,\n      'aria-selected': isHeader || checked === 'mixed' ? undefined : checked,\n      subtle,\n      ...props,\n      onClick,\n    },\n    ref,\n  );\n};\n"]}
define(["require", "exports", "tslib", "@fluentui/react-utilities", "../../contexts/dataGridContext", "../../contexts/rowIdContext", "../../contexts/tableHeaderContext", "../TableSelectionCell/useTableSelectionCell"], function (require, exports, tslib_1, react_utilities_1, dataGridContext_1, rowIdContext_1, tableHeaderContext_1, useTableSelectionCell_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useDataGridSelectionCell_unstable = void 0;
    /**
     * Create the state required to render DataGridSelectionCell.
     *
     * The returned state can be modified with hooks such as useDataGridSelectionCellStyles_unstable,
     * before being passed to renderDataGridSelectionCell_unstable.
     *
     * @param props - props from this instance of DataGridSelectionCell
     * @param ref - reference to root HTMLElement of DataGridSelectionCell
     */
    var useDataGridSelectionCell_unstable = function (props, ref) {
        var isHeader = tableHeaderContext_1.useIsInTableHeader();
        var rowId = rowIdContext_1.useTableRowIdContext();
        var subtle = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.subtleSelection; });
        var checked = dataGridContext_1.useDataGridContext_unstable(function (ctx) {
            if (isHeader && ctx.selection.selectionMode === 'multiselect') {
                return ctx.selection.allRowsSelected ? true : ctx.selection.someRowsSelected ? 'mixed' : false;
            }
            return ctx.selection.isRowSelected(rowId);
        });
        var toggleAllRows = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.selection.toggleAllRows; });
        var type = dataGridContext_1.useDataGridContext_unstable(function (ctx) {
            return ctx.selection.selectionMode === 'multiselect' ? 'checkbox' : 'radio';
        });
        var onClick = react_utilities_1.useEventCallback(function (e) {
            var _a;
            if (isHeader) {
                toggleAllRows(e);
            }
            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
        });
        return useTableSelectionCell_1.useTableSelectionCell_unstable(tslib_1.__assign(tslib_1.__assign({ as: 'div', role: 'gridcell', checked: checked, type: type, hidden: isHeader && type === 'radio', 'aria-checked': isHeader ? checked : undefined, 'aria-selected': isHeader || checked === 'mixed' ? undefined : checked, subtle: subtle }, props), { onClick: onClick }), ref);
    };
    exports.useDataGridSelectionCell_unstable = useDataGridSelectionCell_unstable;
});
//# sourceMappingURL=useDataGridSelectionCell.js.map
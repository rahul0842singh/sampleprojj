define(["require", "exports", "tslib", "@fluentui/react-utilities", "@fluentui/react-checkbox", "@fluentui/react-radio", "../TableCell/useTableCell", "../../contexts/tableContext"], function (require, exports, tslib_1, react_utilities_1, react_checkbox_1, react_radio_1, useTableCell_1, tableContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableSelectionCell_unstable = void 0;
    /**
     * Create the state required to render TableSelectionCell.
     *
     * The returned state can be modified with hooks such as useTableSelectionCellStyles_unstable,
     * before being passed to renderTableSelectionCell_unstable.
     *
     * @param props - props from this instance of TableSelectionCell
     * @param ref - reference to root HTMLElement of TableSelectionCell
     */
    var useTableSelectionCell_unstable = function (props, ref) {
        var tableCellState = useTableCell_1.useTableCell_unstable(props, ref);
        var noNativeElements = tableContext_1.useTableContext().noNativeElements;
        var _a = props.type, type = _a === void 0 ? 'checkbox' : _a, _b = props.checked, checked = _b === void 0 ? false : _b, _c = props.subtle, subtle = _c === void 0 ? false : _c, _d = props.hidden, hidden = _d === void 0 ? false : _d;
        return tslib_1.__assign(tslib_1.__assign({}, tableCellState), { components: tslib_1.__assign(tslib_1.__assign({}, tableCellState.components), { checkboxIndicator: react_checkbox_1.Checkbox, radioIndicator: react_radio_1.Radio }), checkboxIndicator: react_utilities_1.resolveShorthand(props.checkboxIndicator, {
                required: type === 'checkbox',
                defaultProps: { checked: props.checked },
            }), radioIndicator: react_utilities_1.resolveShorthand(props.radioIndicator, {
                required: type === 'radio',
                defaultProps: { checked: !!checked, input: { name: react_utilities_1.useId('table-selection-radio') } },
            }), type: type, checked: checked, noNativeElements: noNativeElements, subtle: subtle, hidden: hidden });
    };
    exports.useTableSelectionCell_unstable = useTableSelectionCell_unstable;
});
//# sourceMappingURL=useTableSelectionCell.js.map
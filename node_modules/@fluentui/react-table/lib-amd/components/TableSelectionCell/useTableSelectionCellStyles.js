define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-tabster", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_tabster_1, react_theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableSelectionCellStyles_unstable = exports.tableSelectionCellClassNames = exports.CELL_WIDTH = void 0;
    exports.CELL_WIDTH = 44;
    exports.tableSelectionCellClassNames = {
        root: 'fui-TableSelectionCell',
        checkboxIndicator: 'fui-TableSelectionCell__checkboxIndicator',
        radioIndicator: 'fui-TableSelectionCell__radioIndicator',
    };
    var useTableLayoutStyles = react_1.makeStyles({
        root: {
            display: 'table-cell',
            width: exports.CELL_WIDTH + "px",
        },
    });
    var useFlexLayoutStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({ display: 'flex' }, react_1.shorthands.flex(1, 1, '0px')), { minWidth: exports.CELL_WIDTH + "px", maxWidth: exports.CELL_WIDTH + "px", justifyContent: 'center' }),
    });
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({ textAlign: 'center', whiteSpace: 'nowrap' }, react_1.shorthands.padding(0)), react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.outline('2px', 'solid', react_theme_1.tokens.colorStrokeFocus2)), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { selector: 'focus', enableOutline: true })),
        radioIndicator: {
            display: 'flex',
            flexGrow: 1,
            alignItems: 'center',
            justifyContent: 'center',
        },
        subtle: tslib_1.__assign({ opacity: 0 }, react_tabster_1.createCustomFocusIndicatorStyle({
            opacity: 1,
        }, { selector: 'focus-within' })),
        hidden: {
            visibility: 'hidden',
        },
    });
    /**
     * Apply styling to the TableSelectionCell slots based on the state
     */
    var useTableSelectionCellStyles_unstable = function (state) {
        var styles = useStyles();
        var layoutStyles = {
            table: useTableLayoutStyles(),
            flex: useFlexLayoutStyles(),
        };
        state.root.className = react_1.mergeClasses(exports.tableSelectionCellClassNames.root, styles.root, state.noNativeElements ? layoutStyles.flex.root : layoutStyles.table.root, state.subtle && state.checked === false && styles.subtle, state.hidden && styles.hidden, state.root.className);
        if (state.checkboxIndicator) {
            state.checkboxIndicator.className = react_1.mergeClasses(exports.tableSelectionCellClassNames.checkboxIndicator, state.checkboxIndicator.className);
        }
        if (state.radioIndicator) {
            state.radioIndicator.className = react_1.mergeClasses(exports.tableSelectionCellClassNames.radioIndicator, styles.radioIndicator, state.radioIndicator.className);
        }
        return state;
    };
    exports.useTableSelectionCellStyles_unstable = useTableSelectionCellStyles_unstable;
});
//# sourceMappingURL=useTableSelectionCellStyles.js.map
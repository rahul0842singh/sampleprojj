define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme", "@fluentui/react-tabster"], function (require, exports, tslib_1, react_1, react_theme_1, react_tabster_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableCellStyles_unstable = exports.tableCellClassNames = exports.tableCellClassName = void 0;
    exports.tableCellClassName = 'fui-TableCell';
    exports.tableCellClassNames = {
        root: exports.tableCellClassName,
    };
    var useTableLayoutStyles = react_1.makeStyles({
        root: {
            display: 'table-cell',
            verticalAlign: 'middle',
        },
        medium: {
            height: '44px',
        },
        small: {
            height: '34px',
        },
        'extra-small': {
            height: '24px',
        },
    });
    var useFlexLayoutStyles = react_1.makeStyles({
        root: tslib_1.__assign({ display: 'flex', minWidth: '0px', alignItems: 'center' }, react_1.shorthands.flex(1, 1, '0px')),
        medium: {
            minHeight: '44px',
        },
        small: {
            minHeight: '34px',
        },
        'extra-small': {
            minHeight: '24px',
        },
    });
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({ backgroundColor: 'inherit', position: 'relative' }, react_1.shorthands.padding('0px', react_theme_1.tokens.spacingHorizontalS)), react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.outline('2px', 'solid', react_theme_1.tokens.colorStrokeFocus2)), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { selector: 'focus', enableOutline: true })),
    });
    /**
     * Apply styling to the TableCell slots based on the state
     */
    var useTableCellStyles_unstable = function (state) {
        var styles = useStyles();
        var layoutStyles = {
            table: useTableLayoutStyles(),
            flex: useFlexLayoutStyles(),
        };
        state.root.className = react_1.mergeClasses(exports.tableCellClassNames.root, styles.root, state.noNativeElements ? layoutStyles.flex.root : layoutStyles.table.root, state.noNativeElements ? layoutStyles.flex[state.size] : layoutStyles.table[state.size], state.root.className);
        return state;
    };
    exports.useTableCellStyles_unstable = useTableCellStyles_unstable;
});
//# sourceMappingURL=useTableCellStyles.js.map
define(["require", "exports", "tslib", "../TableCell/useTableCell", "../../contexts/dataGridContext", "../../contexts/columnIdContext"], function (require, exports, tslib_1, useTableCell_1, dataGridContext_1, columnIdContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useDataGridCell_unstable = void 0;
    /**
     * Create the state required to render DataGridCell.
     *
     * The returned state can be modified with hooks such as useDataGridCellStyles_unstable,
     * before being passed to renderDataGridCell_unstable.
     *
     * @param props - props from this instance of DataGridCell
     * @param ref - reference to root HTMLElement of DataGridCell
     */
    var useDataGridCell_unstable = function (props, ref) {
        var columnId = columnIdContext_1.useColumnIdContext();
        var tabbable = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.focusMode === 'cell'; });
        var resizableColumns = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.resizableColumns; });
        var columnSizing = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.columnSizing_unstable; });
        return useTableCell_1.useTableCell_unstable(tslib_1.__assign(tslib_1.__assign({ as: 'div', role: 'gridcell', tabIndex: tabbable ? 0 : undefined }, (resizableColumns ? columnSizing.getTableCellProps(columnId) : {})), props), ref);
    };
    exports.useDataGridCell_unstable = useDataGridCell_unstable;
});
//# sourceMappingURL=useDataGridCell.js.map
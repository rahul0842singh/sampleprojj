define(["require", "exports", "tslib", "@fluentui/react-utilities", "@fluentui/keyboard-keys", "../TableRow/useTableRow", "../../contexts/dataGridContext", "../DataGridSelectionCell/DataGridSelectionCell", "../../contexts/rowIdContext", "../../contexts/tableHeaderContext"], function (require, exports, tslib_1, react_utilities_1, keyboard_keys_1, useTableRow_1, dataGridContext_1, DataGridSelectionCell_1, rowIdContext_1, tableHeaderContext_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useDataGridRow_unstable = void 0;
    /**
     * Create the state required to render DataGridRow.
     *
     * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,
     * before being passed to renderDataGridRow_unstable.
     *
     * @param props - props from this instance of DataGridRow
     * @param ref - reference to root HTMLElement of DataGridRow
     */
    var useDataGridRow_unstable = function (props, ref) {
        var rowId = rowIdContext_1.useTableRowIdContext();
        var isHeader = tableHeaderContext_1.useIsInTableHeader();
        var columnDefs = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.columns; });
        var selectable = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.selectableRows; });
        var selected = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.selection.isRowSelected(rowId); });
        var tabbable = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.focusMode === 'row_unstable'; });
        var appearance = dataGridContext_1.useDataGridContext_unstable(function (ctx) {
            if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {
                return ctx.selectionAppearance;
            }
            return 'none';
        });
        var toggleRow = dataGridContext_1.useDataGridContext_unstable(function (ctx) { return ctx.selection.toggleRow; });
        var onClick = react_utilities_1.useEventCallback(function (e) {
            var _a;
            if (selectable && !isHeader) {
                toggleRow(e, rowId);
            }
            (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
        });
        var onKeyDown = react_utilities_1.useEventCallback(function (e) {
            var _a;
            if (selectable && !isHeader && e.key === keyboard_keys_1.Space && !react_utilities_1.isInteractiveHTMLElement(e.target)) {
                // stop scrolling
                e.preventDefault();
                toggleRow(e, rowId);
            }
            (_a = props.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, e);
        });
        var baseState = useTableRow_1.useTableRow_unstable(tslib_1.__assign(tslib_1.__assign({ appearance: appearance, 'aria-selected': selectable ? selected : undefined }, props), { onClick: onClick, onKeyDown: onKeyDown, children: null, as: 'div', tabIndex: tabbable && !isHeader ? 0 : undefined }), ref);
        return tslib_1.__assign(tslib_1.__assign({}, baseState), { components: tslib_1.__assign(tslib_1.__assign({}, baseState.components), { selectionCell: DataGridSelectionCell_1.DataGridSelectionCell }), selectionCell: react_utilities_1.resolveShorthand(props.selectionCell, { required: selectable }), renderCell: props.children, columnDefs: columnDefs });
    };
    exports.useDataGridRow_unstable = useDataGridRow_unstable;
});
//# sourceMappingURL=useDataGridRow.js.map
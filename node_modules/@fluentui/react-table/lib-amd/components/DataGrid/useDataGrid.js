define(["require", "exports", "tslib", "@fluentui/react-tabster", "../Table/useTable", "../../hooks", "../TableSelectionCell", "@fluentui/react-utilities"], function (require, exports, tslib_1, react_tabster_1, useTable_1, hooks_1, TableSelectionCell_1, react_utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useDataGrid_unstable = void 0;
    /**
     * Create the state required to render DataGrid.
     *
     * The returned state can be modified with hooks such as useDataGridStyles_unstable,
     * before being passed to renderDataGrid_unstable.
     *
     * @param props - props from this instance of DataGrid
     * @param ref - reference to root HTMLElement of DataGrid
     */
    var useDataGrid_unstable = function (props, ref) {
        var items = props.items, columns = props.columns, _a = props.focusMode, focusMode = _a === void 0 ? 'cell' : _a, selectionMode = props.selectionMode, onSortChange = props.onSortChange, onSelectionChange = props.onSelectionChange, defaultSortState = props.defaultSortState, sortState = props.sortState, selectedItems = props.selectedItems, defaultSelectedItems = props.defaultSelectedItems, _b = props.subtleSelection, subtleSelection = _b === void 0 ? false : _b, _c = props.selectionAppearance, selectionAppearance = _c === void 0 ? 'brand' : _c, getRowId = props.getRowId, resizableColumns = props.resizableColumns, columnSizingOptions = props.columnSizingOptions, onColumnResize = props.onColumnResize;
        var navigable = focusMode !== 'none';
        var keyboardNavAttr = react_tabster_1.useArrowNavigationGroup({ axis: 'grid' });
        var tableState = hooks_1.useTableFeatures({ items: items, columns: columns, getRowId: getRowId }, [
            hooks_1.useTableSort({
                defaultSortState: defaultSortState,
                sortState: sortState,
                onSortChange: onSortChange,
            }),
            hooks_1.useTableSelection({
                defaultSelectedItems: defaultSelectedItems,
                selectedItems: selectedItems,
                onSelectionChange: onSelectionChange,
                selectionMode: selectionMode !== null && selectionMode !== void 0 ? selectionMode : 'multiselect',
            }),
            hooks_1.useTableColumnSizing_unstable({
                onColumnResize: onColumnResize,
                columnSizingOptions: columnSizingOptions,
                // The selection cell is not part of the columns, therefore its width needs to be subtracted
                // from the container to make sure the columns don't overflow the table.
                containerWidthOffset: selectionMode ? -TableSelectionCell_1.CELL_WIDTH : 0,
            }),
        ]);
        var baseTableState = useTable_1.useTable_unstable(tslib_1.__assign(tslib_1.__assign({ role: 'grid', as: 'div', noNativeElements: true }, (navigable && keyboardNavAttr)), props), react_utilities_1.useMergedRefs(ref, tableState.tableRef));
        return tslib_1.__assign(tslib_1.__assign({}, baseTableState), { focusMode: focusMode, tableState: tableState, selectableRows: !!selectionMode, subtleSelection: subtleSelection, selectionAppearance: selectionAppearance, resizableColumns: resizableColumns });
    };
    exports.useDataGrid_unstable = useDataGrid_unstable;
});
//# sourceMappingURL=useDataGrid.js.map
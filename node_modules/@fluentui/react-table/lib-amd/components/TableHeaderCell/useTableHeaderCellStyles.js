define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme", "@fluentui/react-tabster"], function (require, exports, tslib_1, react_1, react_theme_1, react_tabster_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableHeaderCellStyles_unstable = exports.tableHeaderCellClassNames = exports.tableHeaderCellClassName = void 0;
    exports.tableHeaderCellClassName = 'fui-TableHeaderCell';
    exports.tableHeaderCellClassNames = {
        root: 'fui-TableHeaderCell',
        button: 'fui-TableHeaderCell__button',
        sortIcon: 'fui-TableHeaderCell__sortIcon',
        aside: 'fui-TableHeaderCell__aside',
    };
    var useTableLayoutStyles = react_1.makeStyles({
        root: {
            display: 'table-cell',
            verticalAlign: 'middle',
        },
    });
    var useFlexLayoutStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({ display: 'flex' }, react_1.shorthands.flex(1, 1, '0px')), { minWidth: '0px' }),
    });
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.padding('0px', react_theme_1.tokens.spacingHorizontalS)), react_tabster_1.createCustomFocusIndicatorStyle(tslib_1.__assign(tslib_1.__assign({}, react_1.shorthands.outline('2px', 'solid', react_theme_1.tokens.colorStrokeFocus2)), react_1.shorthands.borderRadius(react_theme_1.tokens.borderRadiusMedium)), { selector: 'focus-within', enableOutline: true })), { position: 'relative' }),
        rootInteractive: {
            ':hover': {
                backgroundColor: react_theme_1.tokens.colorSubtleBackgroundHover,
            },
            ':active': {
                backgroundColor: react_theme_1.tokens.colorSubtleBackgroundPressed,
            },
        },
        resetButton: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ resize: 'horizontal', boxSizing: 'content-box', backgroundColor: 'inherit', color: 'inherit', fontFamily: 'inherit', fontSize: 'inherit', lineHeight: 'normal' }, react_1.shorthands.overflow('visible')), react_1.shorthands.padding(0)), react_1.shorthands.borderStyle('none')), { WebkitAppearance: 'button', textAlign: 'unset' }),
        button: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ position: 'relative', width: '100%', display: 'flex', flexGrow: 1, height: '100%', alignItems: 'center' }, react_1.shorthands.gap(react_theme_1.tokens.spacingHorizontalXS)), { minHeight: '32px' }), react_1.shorthands.flex(1, 1, '0px')), { outlineStyle: 'none' }),
        sortable: {
            cursor: 'pointer',
        },
        sortIcon: {
            display: 'flex',
            alignItems: 'center',
            paddingTop: react_theme_1.tokens.spacingVerticalXXS,
        },
        resizeHandle: {},
    });
    /**
     * Apply styling to the TableHeaderCell slots based on the state
     */
    var useTableHeaderCellStyles_unstable = function (state) {
        var styles = useStyles();
        var layoutStyles = {
            table: useTableLayoutStyles(),
            flex: useFlexLayoutStyles(),
        };
        state.root.className = react_1.mergeClasses(exports.tableHeaderCellClassNames.root, styles.root, state.sortable && styles.rootInteractive, state.noNativeElements ? layoutStyles.flex.root : layoutStyles.table.root, state.root.className);
        state.button.className = react_1.mergeClasses(exports.tableHeaderCellClassNames.button, styles.resetButton, styles.button, state.sortable && styles.sortable, state.button.className);
        if (state.sortIcon) {
            state.sortIcon.className = react_1.mergeClasses(exports.tableHeaderCellClassNames.sortIcon, styles.sortIcon, state.sortIcon.className);
        }
        if (state.aside) {
            state.aside.className = react_1.mergeClasses(exports.tableHeaderCellClassNames.aside, styles.resizeHandle, state.aside.className);
        }
        return state;
    };
    exports.useTableHeaderCellStyles_unstable = useTableHeaderCellStyles_unstable;
});
//# sourceMappingURL=useTableHeaderCellStyles.js.map
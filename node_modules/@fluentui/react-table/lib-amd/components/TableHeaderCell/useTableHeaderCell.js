define(["require", "exports", "tslib", "react", "@fluentui/react-utilities", "@fluentui/react-tabster", "@fluentui/react-icons", "../../contexts/tableContext", "@fluentui/react-aria"], function (require, exports, tslib_1, React, react_utilities_1, react_tabster_1, react_icons_1, tableContext_1, react_aria_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableHeaderCell_unstable = void 0;
    var sortIcons = {
        ascending: React.createElement(react_icons_1.ArrowUpRegular, { fontSize: 12 }),
        descending: React.createElement(react_icons_1.ArrowDownRegular, { fontSize: 12 }),
    };
    /**
     * Create the state required to render TableHeaderCell.
     *
     * The returned state can be modified with hooks such as useTableHeaderCellStyles_unstable,
     * before being passed to renderTableHeaderCell_unstable.
     *
     * @param props - props from this instance of TableHeaderCell
     * @param ref - reference to root HTMLElement of TableHeaderCell
     */
    var useTableHeaderCell_unstable = function (props, ref) {
        var _a, _b;
        var _c = tableContext_1.useTableContext(), noNativeElements = _c.noNativeElements, sortable = _c.sortable;
        var rootComponent = ((_a = props.as) !== null && _a !== void 0 ? _a : noNativeElements) ? 'div' : 'th';
        return {
            components: {
                root: rootComponent,
                button: 'button',
                sortIcon: 'span',
                aside: 'span',
            },
            root: react_utilities_1.getNativeElementProps(rootComponent, tslib_1.__assign({ ref: react_utilities_1.useMergedRefs(ref, react_tabster_1.useFocusWithin()), role: rootComponent === 'div' ? 'columnheader' : undefined, 'aria-sort': sortable ? (_b = props.sortDirection) !== null && _b !== void 0 ? _b : 'none' : undefined }, props)),
            aside: react_utilities_1.resolveShorthand(props.aside),
            sortIcon: react_utilities_1.resolveShorthand(props.sortIcon, {
                required: !!props.sortDirection,
                defaultProps: { children: props.sortDirection ? sortIcons[props.sortDirection] : undefined },
            }),
            button: react_aria_1.useARIAButtonShorthand(props.button, {
                required: true,
                defaultProps: tslib_1.__assign({ role: 'presentation', tabIndex: -1, type: 'button' }, (sortable && {
                    role: undefined,
                    tabIndex: undefined,
                })),
            }),
            sortable: sortable,
            noNativeElements: noNativeElements,
        };
    };
    exports.useTableHeaderCell_unstable = useTableHeaderCell_unstable;
});
//# sourceMappingURL=useTableHeaderCell.js.map
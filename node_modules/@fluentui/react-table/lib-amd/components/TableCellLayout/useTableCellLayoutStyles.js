define(["require", "exports", "tslib", "@griffel/react", "@fluentui/react-theme", "@fluentui/react-theme"], function (require, exports, tslib_1, react_1, react_theme_1, react_theme_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableCellLayoutStyles_unstable = exports.tableCellLayoutClassNames = void 0;
    exports.tableCellLayoutClassNames = {
        root: 'fui-TableCellLayout',
        media: 'fui-TableCellLayout__media',
        main: 'fui-TableCellLayout__main',
        description: 'fui-TableCellLayout__description',
        content: 'fui-TableCellLayout__content',
    };
    /**
     * Styles for the root slot
     */
    var useStyles = react_1.makeStyles({
        root: tslib_1.__assign(tslib_1.__assign({ display: 'flex', alignItems: 'center' }, react_1.shorthands.gap(react_theme_1.tokens.spacingHorizontalS)), react_1.shorthands.flex(1, 1, '0px')),
        rootTruncate: {
            overflowX: 'hidden',
        },
        content: {
            display: 'flex',
            flexDirection: 'column',
        },
        contentTruncate: {
            overflowX: 'hidden',
        },
        media: {
            display: 'flex',
            alignItems: 'center',
        },
        mediaExtraSmall: {
            fontSize: '16px',
        },
        mediaSmallAndMedium: {
            fontSize: '20px',
        },
        mediaPrimary: {
            fontSize: '24px',
        },
        mainPrimary: {
            fontWeight: react_theme_1.tokens.fontWeightSemibold,
        },
        mainTruncate: {
            overflowX: 'hidden',
            whiteSpace: 'nowrap',
            textOverflow: 'ellipsis',
        },
        description: tslib_1.__assign({ color: react_theme_1.tokens.colorNeutralForeground2 }, react_theme_2.typographyStyles.caption1),
    });
    /**
     * Apply styling to the TableCellLayout slots based on the state
     */
    var useTableCellLayoutStyles_unstable = function (state) {
        var styles = useStyles();
        var truncate = state.truncate;
        state.root.className = react_1.mergeClasses(exports.tableCellLayoutClassNames.root, styles.root, truncate && styles.rootTruncate, state.root.className);
        var primary = state.appearance === 'primary';
        if (state.media) {
            var mediaSizedStyles = {
                small: styles.mediaSmallAndMedium,
                medium: styles.mediaSmallAndMedium,
                'extra-small': styles.mediaExtraSmall,
            };
            state.media.className = react_1.mergeClasses(exports.tableCellLayoutClassNames.media, styles.media, mediaSizedStyles[state.size], primary && styles.mediaPrimary, state.media.className);
        }
        if (state.main) {
            state.main.className = react_1.mergeClasses(exports.tableCellLayoutClassNames.main, truncate && styles.mainTruncate, primary && styles.mainPrimary, state.main.className);
        }
        if (state.description) {
            state.description.className = react_1.mergeClasses(exports.tableCellLayoutClassNames.description, styles.description, state.description.className);
        }
        if (state.content) {
            state.content.className = react_1.mergeClasses(exports.tableCellLayoutClassNames.content, styles.content, truncate && styles.contentTruncate, state.content.className);
        }
        return state;
    };
    exports.useTableCellLayoutStyles_unstable = useTableCellLayoutStyles_unstable;
});
//# sourceMappingURL=useTableCellLayoutStyles.js.map
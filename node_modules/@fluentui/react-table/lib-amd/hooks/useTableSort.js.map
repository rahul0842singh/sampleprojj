{"version":3,"file":"useTableSort.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-table/src/hooks/useTableSort.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nimport type {\n  TableColumnId,\n  TableRowData,\n  SortState,\n  TableSortState,\n  TableFeaturesState,\n  UseTableSortOptions,\n} from './types';\n\nconst noop = () => undefined;\n\nexport const defaultTableSortState: TableSortState<unknown> = {\n  getSortDirection: () => 'ascending',\n  setColumnSort: noop,\n  sort: <TRowState extends TableRowData<unknown>>(rows: TRowState[]) => [...rows],\n  sortColumn: undefined,\n  sortDirection: 'ascending',\n  toggleColumnSort: noop,\n};\n\nexport function useTableSort<TItem>(options: UseTableSortOptions) {\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return (tableState: TableFeaturesState<TItem>) => useTableSortState(tableState, options);\n}\n\nexport function useTableSortState<TItem>(\n  tableState: TableFeaturesState<TItem>,\n  options: UseTableSortOptions,\n): TableFeaturesState<TItem> {\n  const { columns } = tableState;\n  const { sortState, defaultSortState, onSortChange } = options;\n\n  const [sorted, setSorted] = useControllableState<SortState>({\n    initialState: {\n      sortDirection: 'ascending' as const,\n      sortColumn: undefined,\n    },\n    defaultState: defaultSortState,\n    state: sortState,\n  });\n\n  const { sortColumn, sortDirection } = sorted;\n\n  const toggleColumnSort = (e: React.SyntheticEvent, columnId: TableColumnId | undefined) => {\n    setSorted(s => {\n      const newState = { ...s, sortColumn: columnId };\n      if (s.sortColumn === columnId) {\n        newState.sortDirection = s.sortDirection === 'ascending' ? 'descending' : 'ascending';\n      } else {\n        newState.sortDirection = 'ascending';\n      }\n\n      onSortChange?.(e, newState);\n      return newState;\n    });\n  };\n\n  const setColumnSort: TableSortState<TItem>['setColumnSort'] = (e, nextSortColumn, nextSortDirection) => {\n    const newState = { sortColumn: nextSortColumn, sortDirection: nextSortDirection };\n    onSortChange?.(e, newState);\n    setSorted(newState);\n  };\n\n  const sort = <TRowState extends TableRowData<TItem>>(rows: TRowState[]) => {\n    return rows.slice().sort((a, b) => {\n      const sortColumnDef = columns.find(column => column.columnId === sortColumn);\n      if (!sortColumnDef?.compare) {\n        return 0;\n      }\n\n      const mod = sortDirection === 'ascending' ? 1 : -1;\n      return sortColumnDef.compare(a.item, b.item) * mod;\n    });\n  };\n\n  const getSortDirection: TableSortState<TItem>['getSortDirection'] = (columnId: TableColumnId) => {\n    return sortColumn === columnId ? sortDirection : undefined;\n  };\n\n  return {\n    ...tableState,\n    sort: {\n      sort,\n      sortColumn,\n      sortDirection,\n      setColumnSort,\n      toggleColumnSort,\n      getSortDirection,\n    },\n  };\n}\n"]}
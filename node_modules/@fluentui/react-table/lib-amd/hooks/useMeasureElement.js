define(["require", "exports", "@fluentui/react-utilities", "react", "@fluentui/react-shared-contexts"], function (require, exports, react_utilities_1, React, react_shared_contexts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useMeasureElement = void 0;
    /**
     * Provides a way of reporting element width.
     * Returns
     * `width` - current element width (0 by default),
     * `measureElementRef` - a ref function to be passed as `ref` to the element you want to measure
     */
    function useMeasureElement() {
        var _a = React.useState(0), width = _a[0], setWidth = _a[1];
        var container = React.useRef(undefined);
        var targetDocument = react_shared_contexts_1.useFluent_unstable().targetDocument;
        // the handler for resize observer
        var handleResize = React.useCallback(function () {
            var _a;
            var containerWidth = (_a = container.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width;
            setWidth(containerWidth || 0);
        }, []);
        // Keep the reference of ResizeObserver in the state, as it should live through renders
        var resizeObserver = React.useState(react_utilities_1.canUseDOM() ? new ResizeObserver(handleResize) : undefined)[0];
        var measureElementRef = React.useCallback(function (el) {
            if (!targetDocument || !resizeObserver) {
                return;
            }
            // cleanup previous container
            if (container.current) {
                resizeObserver.unobserve(container.current);
                container.current.remove();
            }
            if (el) {
                container.current = targetDocument.createElement('div');
                el.insertAdjacentElement('beforebegin', container.current);
                resizeObserver.observe(container.current);
                handleResize();
            }
        }, [targetDocument, resizeObserver, handleResize]);
        React.useEffect(function () {
            return function () { return resizeObserver === null || resizeObserver === void 0 ? void 0 : resizeObserver.disconnect(); };
        }, [resizeObserver]);
        return { width: width, measureElementRef: measureElementRef };
    }
    exports.useMeasureElement = useMeasureElement;
});
//# sourceMappingURL=useMeasureElement.js.map
define(["require", "exports", "tslib", "@fluentui/react-utilities", "react", "../utils/columnResizeUtils"], function (require, exports, tslib_1, react_utilities_1, React, columnResizeUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableColumnResizeState = void 0;
    var createReducer = function () { return function (state, action) {
        switch (action.type) {
            case 'CONTAINER_WIDTH_UPDATED':
                return tslib_1.__assign(tslib_1.__assign({}, state), { containerWidth: action.containerWidth, columnWidthState: columnResizeUtils_1.adjustColumnWidthsToFitContainer(state.columnWidthState, action.containerWidth) });
            case 'COLUMNS_UPDATED':
                var newS = columnResizeUtils_1.columnDefinitionsToState(action.columns, state.columnWidthState, state.columnSizingOptions);
                return tslib_1.__assign(tslib_1.__assign({}, state), { columns: action.columns, columnWidthState: columnResizeUtils_1.adjustColumnWidthsToFitContainer(newS, state.containerWidth) });
            case 'COLUMN_SIZING_OPTIONS_UPDATED':
                var newState = columnResizeUtils_1.columnDefinitionsToState(state.columns, state.columnWidthState, action.columnSizingOptions);
                return tslib_1.__assign(tslib_1.__assign({}, state), { columnSizingOptions: action.columnSizingOptions, columnWidthState: columnResizeUtils_1.adjustColumnWidthsToFitContainer(newState, state.containerWidth) });
            case 'SET_COLUMN_WIDTH':
                var columnId = action.columnId, width = action.width;
                var containerWidth = state.containerWidth;
                var column = columnResizeUtils_1.getColumnById(state.columnWidthState, columnId);
                var newColumnWidthState = tslib_1.__spreadArray([], state.columnWidthState);
                if (!column) {
                    return state;
                }
                // Adjust the column width and measure the new total width
                newColumnWidthState = columnResizeUtils_1.setColumnProperty(newColumnWidthState, columnId, 'width', width);
                // Set this width as idealWidth, because its a deliberate change, not a recalculation because of container
                newColumnWidthState = columnResizeUtils_1.setColumnProperty(newColumnWidthState, columnId, 'idealWidth', width);
                // Adjust the widths to the container size
                newColumnWidthState = columnResizeUtils_1.adjustColumnWidthsToFitContainer(newColumnWidthState, containerWidth);
                return tslib_1.__assign(tslib_1.__assign({}, state), { columnWidthState: newColumnWidthState });
        }
    }; };
    function useTableColumnResizeState(columns, containerWidth, params) {
        if (params === void 0) { params = {}; }
        var onColumnResize = params.onColumnResize, columnSizingOptions = params.columnSizingOptions;
        var reducer = React.useMemo(function () { return createReducer(); }, []);
        var _a = React.useReducer(reducer, {
            columns: columns,
            containerWidth: 0,
            columnWidthState: columnResizeUtils_1.columnDefinitionsToState(columns, undefined, columnSizingOptions),
            columnSizingOptions: columnSizingOptions,
        }), state = _a[0], dispatch = _a[1];
        react_utilities_1.useIsomorphicLayoutEffect(function () {
            dispatch({ type: 'CONTAINER_WIDTH_UPDATED', containerWidth: containerWidth });
        }, [containerWidth]);
        react_utilities_1.useIsomorphicLayoutEffect(function () {
            dispatch({ type: 'COLUMNS_UPDATED', columns: columns });
        }, [columns]);
        react_utilities_1.useIsomorphicLayoutEffect(function () {
            dispatch({ type: 'COLUMN_SIZING_OPTIONS_UPDATED', columnSizingOptions: columnSizingOptions });
        }, [columnSizingOptions]);
        var setColumnWidth = react_utilities_1.useEventCallback(function (event, data) {
            var width = data.width;
            var columnId = data.columnId;
            var col = columnResizeUtils_1.getColumnById(state.columnWidthState, columnId);
            if (!col) {
                return;
            }
            width = Math.max(col.minWidth || 0, width);
            if (onColumnResize) {
                onColumnResize(event, { columnId: columnId, width: width });
            }
            dispatch({ type: 'SET_COLUMN_WIDTH', columnId: columnId, width: width });
        });
        return {
            getColumnById: function (colId) { return columnResizeUtils_1.getColumnById(state.columnWidthState, colId); },
            getColumns: function () { return state.columnWidthState; },
            getColumnWidth: function (colId) { return columnResizeUtils_1.getColumnWidth(state.columnWidthState, colId); },
            setColumnWidth: setColumnWidth,
        };
    }
    exports.useTableColumnResizeState = useTableColumnResizeState;
});
//# sourceMappingURL=useTableColumnResizeState.js.map
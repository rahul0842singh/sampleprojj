define(["require", "exports", "tslib", "react", "./useTableColumnResizeState", "./useTableColumnResizeMouseHandler", "./useMeasureElement", "../TableResizeHandle"], function (require, exports, tslib_1, React, useTableColumnResizeState_1, useTableColumnResizeMouseHandler_1, useMeasureElement_1, TableResizeHandle_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableColumnSizing_unstable = exports.defaultColumnSizingState = void 0;
    exports.defaultColumnSizingState = {
        getColumnWidths: function () { return []; },
        getOnMouseDown: function () { return function () { return null; }; },
        setColumnWidth: function () { return null; },
        getTableHeaderCellProps: function () { return ({ style: {}, columnId: '' }); },
        getTableCellProps: function () { return ({ style: {}, columnId: '' }); },
    };
    function useTableColumnSizing_unstable(params) {
        // False positive, these plugin hooks are intended to be run on every render
        // eslint-disable-next-line react-hooks/rules-of-hooks
        return function (tableState) { return useTableColumnSizingState(tableState, params); };
    }
    exports.useTableColumnSizing_unstable = useTableColumnSizing_unstable;
    function getColumnStyles(column) {
        var width = column.width;
        return {
            // native styles
            width: width,
            // non-native element styles (flex layout)
            minWidth: width,
            maxWidth: width,
        };
    }
    function useTableColumnSizingState(tableState, params) {
        var columns = tableState.columns;
        // Gets the container width
        var _a = useMeasureElement_1.useMeasureElement(), width = _a.width, measureElementRef = _a.measureElementRef;
        // Creates the state based on columns and available containerWidth
        var columnResizeState = useTableColumnResizeState_1.useTableColumnResizeState(columns, width + ((params === null || params === void 0 ? void 0 : params.containerWidthOffset) || 0), params);
        // Creates the mouse handler and attaches the state to it
        var mouseHandler = useTableColumnResizeMouseHandler_1.useTableColumnResizeMouseHandler(columnResizeState);
        return tslib_1.__assign(tslib_1.__assign({}, tableState), { tableRef: measureElementRef, 
            // eslint-disable-next-line @typescript-eslint/naming-convention
            columnSizing_unstable: {
                getOnMouseDown: mouseHandler.getOnMouseDown,
                setColumnWidth: function (columnId, w) {
                    return columnResizeState.setColumnWidth(undefined, { columnId: columnId, width: w });
                },
                getColumnWidths: columnResizeState.getColumns,
                getTableHeaderCellProps: function (columnId) {
                    var col = columnResizeState.getColumnById(columnId);
                    var aside = (React.createElement(TableResizeHandle_1.TableResizeHandle, { onMouseDown: mouseHandler.getOnMouseDown(columnId), onTouchStart: mouseHandler.getOnMouseDown(columnId) }));
                    return col ? { style: getColumnStyles(col), aside: aside } : {};
                },
                getTableCellProps: function (columnId) {
                    var col = columnResizeState.getColumnById(columnId);
                    return col ? { style: getColumnStyles(col) } : {};
                },
            } });
    }
});
//# sourceMappingURL=useTableColumnSizing.js.map
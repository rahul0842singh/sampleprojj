{"version":3,"file":"useTableColumnResizeMouseHandler.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-table/src/hooks/useTableColumnResizeMouseHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TableColumnId, ColumnResizeState } from './types';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport {\n  NativeTouchOrMouseEvent,\n  ReactTouchOrMouseEvent,\n  getEventClientCoords,\n  isMouseEvent,\n  isTouchEvent,\n} from '@fluentui/react-utilities';\n\nexport function useTableColumnResizeMouseHandler(columnResizeState: ColumnResizeState) {\n  const mouseX = React.useRef(0);\n  const currentWidth = React.useRef(0);\n  const colId = React.useRef<TableColumnId | undefined>(undefined);\n\n  const { targetDocument } = useFluent();\n  const globalWin = targetDocument?.defaultView;\n\n  const recalculatePosition = React.useCallback(\n    (e: NativeTouchOrMouseEvent) => {\n      const { clientX } = getEventClientCoords(e);\n      const dx = clientX - mouseX.current;\n\n      // Update the local width for the column and set it\n      currentWidth.current += dx;\n      colId.current && columnResizeState.setColumnWidth(e, { columnId: colId.current, width: currentWidth.current });\n      mouseX.current = clientX;\n    },\n    [columnResizeState],\n  );\n\n  const onDrag = React.useCallback(\n    (e: NativeTouchOrMouseEvent) => {\n      // Using requestAnimationFrame here drastically improves resizing experience on slower CPUs\n      if (typeof globalWin?.requestAnimationFrame === 'function') {\n        requestAnimationFrame(() => recalculatePosition(e));\n      } else {\n        recalculatePosition(e);\n      }\n    },\n    [globalWin?.requestAnimationFrame, recalculatePosition],\n  );\n\n  const onDragEnd = React.useCallback(\n    (event: NativeTouchOrMouseEvent) => {\n      if (isMouseEvent(event)) {\n        targetDocument?.removeEventListener('mouseup', onDragEnd);\n        targetDocument?.removeEventListener('mousemove', onDrag);\n      }\n      if (isTouchEvent(event)) {\n        targetDocument?.removeEventListener('touchend', onDragEnd);\n        targetDocument?.removeEventListener('touchmove', onDrag);\n      }\n    },\n    [onDrag, targetDocument],\n  );\n\n  const getOnMouseDown = (columnId: TableColumnId) => (event: ReactTouchOrMouseEvent) => {\n    // Keep the width locally so that we decouple the calculation of the next with from rendering.\n    // This makes the whole experience much faster and more precise\n    currentWidth.current = columnResizeState.getColumnWidth(columnId);\n    mouseX.current = getEventClientCoords(event).clientX;\n    colId.current = columnId;\n\n    if (isMouseEvent(event)) {\n      // ignore other buttons than primary mouse button\n      if (event.target !== event.currentTarget || event.button !== 0) {\n        return;\n      }\n      targetDocument?.addEventListener('mouseup', onDragEnd);\n      targetDocument?.addEventListener('mousemove', onDrag);\n    }\n\n    if (isTouchEvent(event)) {\n      targetDocument?.addEventListener('touchend', onDragEnd);\n      targetDocument?.addEventListener('touchmove', onDrag);\n    }\n  };\n\n  return {\n    getOnMouseDown: (columnId: TableColumnId) => getOnMouseDown(columnId),\n  };\n}\n"]}
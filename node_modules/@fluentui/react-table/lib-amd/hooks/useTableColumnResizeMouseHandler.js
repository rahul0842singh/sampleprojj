define(["require", "exports", "react", "@fluentui/react-shared-contexts", "@fluentui/react-utilities"], function (require, exports, React, react_shared_contexts_1, react_utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTableColumnResizeMouseHandler = void 0;
    function useTableColumnResizeMouseHandler(columnResizeState) {
        var mouseX = React.useRef(0);
        var currentWidth = React.useRef(0);
        var colId = React.useRef(undefined);
        var targetDocument = react_shared_contexts_1.useFluent_unstable().targetDocument;
        var globalWin = targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.defaultView;
        var recalculatePosition = React.useCallback(function (e) {
            var clientX = react_utilities_1.getEventClientCoords(e).clientX;
            var dx = clientX - mouseX.current;
            // Update the local width for the column and set it
            currentWidth.current += dx;
            colId.current && columnResizeState.setColumnWidth(e, { columnId: colId.current, width: currentWidth.current });
            mouseX.current = clientX;
        }, [columnResizeState]);
        var onDrag = React.useCallback(function (e) {
            // Using requestAnimationFrame here drastically improves resizing experience on slower CPUs
            if (typeof (globalWin === null || globalWin === void 0 ? void 0 : globalWin.requestAnimationFrame) === 'function') {
                requestAnimationFrame(function () { return recalculatePosition(e); });
            }
            else {
                recalculatePosition(e);
            }
        }, [globalWin === null || globalWin === void 0 ? void 0 : globalWin.requestAnimationFrame, recalculatePosition]);
        var onDragEnd = React.useCallback(function (event) {
            if (react_utilities_1.isMouseEvent(event)) {
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.removeEventListener('mouseup', onDragEnd);
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.removeEventListener('mousemove', onDrag);
            }
            if (react_utilities_1.isTouchEvent(event)) {
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.removeEventListener('touchend', onDragEnd);
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.removeEventListener('touchmove', onDrag);
            }
        }, [onDrag, targetDocument]);
        var getOnMouseDown = function (columnId) { return function (event) {
            // Keep the width locally so that we decouple the calculation of the next with from rendering.
            // This makes the whole experience much faster and more precise
            currentWidth.current = columnResizeState.getColumnWidth(columnId);
            mouseX.current = react_utilities_1.getEventClientCoords(event).clientX;
            colId.current = columnId;
            if (react_utilities_1.isMouseEvent(event)) {
                // ignore other buttons than primary mouse button
                if (event.target !== event.currentTarget || event.button !== 0) {
                    return;
                }
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.addEventListener('mouseup', onDragEnd);
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.addEventListener('mousemove', onDrag);
            }
            if (react_utilities_1.isTouchEvent(event)) {
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.addEventListener('touchend', onDragEnd);
                targetDocument === null || targetDocument === void 0 ? void 0 : targetDocument.addEventListener('touchmove', onDrag);
            }
        }; };
        return {
            getOnMouseDown: function (columnId) { return getOnMouseDown(columnId); },
        };
    }
    exports.useTableColumnResizeMouseHandler = useTableColumnResizeMouseHandler;
});
//# sourceMappingURL=useTableColumnResizeMouseHandler.js.map
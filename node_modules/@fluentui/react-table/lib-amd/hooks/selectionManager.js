define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSelectionManager = void 0;
    function createSelectionManager(mode, onSelectionChange) {
        if (onSelectionChange === void 0) { onSelectionChange = function () { return undefined; }; }
        var managerFactory = mode === 'multiselect' ? createMultipleSelectionManager : createSingleSelectionManager;
        return managerFactory(onSelectionChange);
    }
    exports.createSelectionManager = createSelectionManager;
    function createMultipleSelectionManager(onSelectionChange) {
        var toggleAllItems = function (e, itemIds, selectedItems) {
            var allItemsSelected = itemIds.every(function (itemId) { return selectedItems.has(itemId); });
            if (allItemsSelected) {
                selectedItems.clear();
            }
            else {
                itemIds.forEach(function (itemId) { return selectedItems.add(itemId); });
            }
            onSelectionChange(e, new Set(selectedItems));
        };
        var toggleItem = function (e, itemId, selectedItems) {
            if (selectedItems.has(itemId)) {
                selectedItems.delete(itemId);
            }
            else {
                selectedItems.add(itemId);
            }
            onSelectionChange(e, new Set(selectedItems));
        };
        var selectItem = function (e, itemId, selectedItems) {
            selectedItems.add(itemId);
            onSelectionChange(e, new Set(selectedItems));
        };
        var deselectItem = function (e, itemId, selectedItems) {
            selectedItems.delete(itemId);
            onSelectionChange(e, new Set(selectedItems));
        };
        var clearItems = function (e) {
            onSelectionChange(e, new Set());
        };
        var isSelected = function (itemId, selectedItems) {
            return selectedItems.has(itemId);
        };
        return {
            toggleItem: toggleItem,
            selectItem: selectItem,
            deselectItem: deselectItem,
            clearItems: clearItems,
            isSelected: isSelected,
            toggleAllItems: toggleAllItems,
        };
    }
    function createSingleSelectionManager(onSelectionChange) {
        var toggleItem = function (e, itemId) {
            onSelectionChange(e, new Set([itemId]));
        };
        var clearItems = function (e) {
            onSelectionChange(e, new Set());
        };
        var isSelected = function (itemId, selectedItems) {
            return selectedItems.has(itemId);
        };
        var selectItem = function (e, itemId) {
            onSelectionChange(e, new Set([itemId]));
        };
        return {
            deselectItem: clearItems,
            selectItem: selectItem,
            toggleAllItems: function () {
                if (process.env.NODE_ENV !== 'production') {
                    throw new Error('[react-table]: `toggleAllItems` should not be used in single selection mode');
                }
                return undefined;
            },
            toggleItem: toggleItem,
            clearItems: clearItems,
            isSelected: isSelected,
        };
    }
});
//# sourceMappingURL=selectionManager.js.map
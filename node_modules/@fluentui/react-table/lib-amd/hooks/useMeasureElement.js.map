{"version":3,"file":"useMeasureElement.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-table/src/hooks/useMeasureElement.ts"],"names":[],"mappings":";;;;IAIA;;;;;OAKG;IACH,SAAgB,iBAAiB;QACzB,IAAA,KAAoB,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAApC,KAAK,QAAA,EAAE,QAAQ,QAAqB,CAAC;QAC5C,IAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAA0B,SAAS,CAAC,CAAC;QAE3D,IAAA,cAAc,GAAK,0CAAS,EAAE,eAAhB,CAAiB;QAEvC,kCAAkC;QAClC,IAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CAAC;;YACrC,IAAM,cAAc,GAAG,MAAA,SAAS,CAAC,OAAO,0CAAE,qBAAqB,GAAG,KAAK,CAAC;YACxE,QAAQ,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC;QAChC,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,uFAAuF;QAChF,IAAA,cAAc,GAAI,KAAK,CAAC,QAAQ,CAAC,2BAAS,EAAE,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAA9E,CAA+E;QACpG,IAAM,iBAAiB,GAAG,KAAK,CAAC,WAAW,CACzC,UAAC,EAAmB;YAClB,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,EAAE;gBACtC,OAAO;aACR;YAED,6BAA6B;YAC7B,IAAI,SAAS,CAAC,OAAO,EAAE;gBACrB,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAC5C,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;aAC5B;YAED,IAAI,EAAE,EAAE;gBACN,SAAS,CAAC,OAAO,GAAG,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBACxD,EAAE,CAAC,qBAAqB,CAAC,aAAa,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;gBAC3D,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAC1C,YAAY,EAAE,CAAC;aAChB;QACH,CAAC,EACD,CAAC,cAAc,EAAE,cAAc,EAAE,YAAY,CAAC,CAC/C,CAAC;QAEF,KAAK,CAAC,SAAS,CAAC;YACd,OAAO,cAAM,OAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,UAAU,EAAE,EAA5B,CAA4B,CAAC;QAC5C,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QAErB,OAAO,EAAE,KAAK,OAAA,EAAE,iBAAiB,mBAAA,EAAE,CAAC;IACtC,CAAC;IAzCD,8CAyCC","sourcesContent":["import { canUseDOM } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n\n/**\n * Provides a way of reporting element width.\n * Returns\n * `width` - current element width (0 by default),\n * `measureElementRef` - a ref function to be passed as `ref` to the element you want to measure\n */\nexport function useMeasureElement<TElement extends HTMLElement = HTMLElement>() {\n  const [width, setWidth] = React.useState(0);\n  const container = React.useRef<HTMLElement | undefined>(undefined);\n\n  const { targetDocument } = useFluent();\n\n  // the handler for resize observer\n  const handleResize = React.useCallback(() => {\n    const containerWidth = container.current?.getBoundingClientRect().width;\n    setWidth(containerWidth || 0);\n  }, []);\n\n  // Keep the reference of ResizeObserver in the state, as it should live through renders\n  const [resizeObserver] = React.useState(canUseDOM() ? new ResizeObserver(handleResize) : undefined);\n  const measureElementRef = React.useCallback(\n    (el: TElement | null) => {\n      if (!targetDocument || !resizeObserver) {\n        return;\n      }\n\n      // cleanup previous container\n      if (container.current) {\n        resizeObserver.unobserve(container.current);\n        container.current.remove();\n      }\n\n      if (el) {\n        container.current = targetDocument.createElement('div');\n        el.insertAdjacentElement('beforebegin', container.current);\n        resizeObserver.observe(container.current);\n        handleResize();\n      }\n    },\n    [targetDocument, resizeObserver, handleResize],\n  );\n\n  React.useEffect(() => {\n    return () => resizeObserver?.disconnect();\n  }, [resizeObserver]);\n\n  return { width, measureElementRef };\n}\n"]}
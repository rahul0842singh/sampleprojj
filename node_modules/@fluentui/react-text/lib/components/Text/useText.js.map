{"version":3,"mappings":"AACA,SAASA,qBAAqB,QAAQ,2BAA2B;AAGjE;;;;;;;;;AASA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,KAAgB,EAAEC,GAA2B,KAAe;;EAC3F,MAAM;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,KAAK;IAAEC,MAAM;IAAEC,SAAS;IAAEC,aAAa;IAAEC,IAAI;IAAEC,IAAI;IAAEC,MAAM;IAAEC;EAAK,CAAE,GAAGX,KAAK;EACpG,MAAMY,EAAE,GAAG,WAAK,CAACA,EAAE,mCAAI,MAAM;EAE7B,MAAMC,KAAK,GAAc;IACvBF,KAAK,EAAEA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,OAAO;IACvBP,KAAK,EAAEA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,KAAK;IACrBK,IAAI,EAAEA,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,MAAM;IACpBJ,MAAM,EAAEA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,KAAK;IACvBG,IAAI,EAAEA,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,GAAG;IACjBD,aAAa,EAAEA,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAI,KAAK;IACrCJ,QAAQ,EAAEA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,KAAK;IAC3BG,SAAS,EAAEA,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,KAAK;IAC7BI,MAAM,EAAEA,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,SAAS;IAC3BR,IAAI,EAAEA,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,IAAI;IAElBY,UAAU,EAAE;MAAEC,IAAI,EAAE;IAAM,CAAE;IAE5BA,IAAI,EAAEjB,qBAAqB,CAACc,EAAE,EAAE;MAC9BX,GAAG;MACH,GAAGD,KAAK;MACRY;KACD;GACF;EAED,OAAOC,KAAK;AACd,CAAC","names":["getNativeElementProps","useText_unstable","props","ref","wrap","truncate","block","italic","underline","strikethrough","size","font","weight","align","as","state","components","root"],"sourceRoot":"../src/","sources":["packages/react-components/react-text/src/components/Text/useText.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps } from '@fluentui/react-utilities';\nimport type { TextProps, TextState } from './Text.types';\n\n/**\n * Create the state required to render Text.\n *\n * The returned state can be modified with hooks such as useTextStyles_unstable,\n * before being passed to renderText_unstable.\n *\n * @param props - props from this instance of Text\n * @param ref - reference to root HTMLElement of Text\n */\nexport const useText_unstable = (props: TextProps, ref: React.Ref<HTMLElement>): TextState => {\n  const { wrap, truncate, block, italic, underline, strikethrough, size, font, weight, align } = props;\n  const as = props.as ?? 'span';\n\n  const state: TextState = {\n    align: align ?? 'start',\n    block: block ?? false,\n    font: font ?? 'base',\n    italic: italic ?? false,\n    size: size ?? 300,\n    strikethrough: strikethrough ?? false,\n    truncate: truncate ?? false,\n    underline: underline ?? false,\n    weight: weight ?? 'regular',\n    wrap: wrap ?? true,\n\n    components: { root: 'span' },\n\n    root: getNativeElementProps(as, {\n      ref,\n      ...props,\n      as,\n    }),\n  };\n\n  return state;\n};\n"]}
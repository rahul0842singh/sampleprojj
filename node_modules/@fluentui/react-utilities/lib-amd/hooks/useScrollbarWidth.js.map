{"version":3,"file":"useScrollbarWidth.js","sourceRoot":"","sources":["../../../../../../../../packages/react-components/react-utilities/src/hooks/useScrollbarWidth.ts"],"names":[],"mappings":";;;;IAEA,IAAM,KAAK,GAAG,IAAI,OAAO,EAAoB,CAAC;IAc9C;;OAEG;IACH,SAAgB,iBAAiB,CAAC,OAAiC;QACzD,IAAA,cAAc,GAAY,OAAO,eAAnB,EAAE,KAAK,GAAK,OAAO,MAAZ,CAAa;QAC1C,OAAO,KAAK,CAAC,OAAO,CAAC;YACnB,IAAI,CAAC,cAAc,EAAE;gBACnB,OAAO,CAAC,CAAC;aACV;YAED,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;gBACvC,OAAO,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;aAClC;YAED,IAAM,KAAK,GAAG,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAClD,KAAK,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;YAClC,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAEhC,IAAM,KAAK,GAAG,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAClD,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAEzB,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACvC,IAAM,cAAc,GAAG,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;YAC7D,KAAK,CAAC,MAAM,EAAE,CAAC;YACf,KAAK,CAAC,GAAG,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;YAC1C,OAAO,cAAc,CAAC;QACxB,CAAC,EAAE,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC;IAC9B,CAAC;IAxBD,8CAwBC","sourcesContent":["import * as React from 'react';\n\nconst cache = new WeakMap<Document, number>();\n\ninterface UseScrollbarWidthOptions {\n  /**\n   * Reference document to measure the scrollbar width\n   */\n  targetDocument: Document | null | undefined;\n\n  /**\n   * Does not use the cache and recalculates the scrollbar width\n   */\n  force?: boolean;\n}\n\n/**\n * @returns The width in pixels of the scrollbar in the user agent\n */\nexport function useScrollbarWidth(options: UseScrollbarWidthOptions) {\n  const { targetDocument, force } = options;\n  return React.useMemo(() => {\n    if (!targetDocument) {\n      return 0;\n    }\n\n    if (!force && cache.has(targetDocument)) {\n      return cache.get(targetDocument);\n    }\n\n    const outer = targetDocument.createElement('div');\n    outer.style.visibility = 'hidden';\n    outer.style.overflow = 'scroll';\n\n    const inner = targetDocument.createElement('div');\n    outer.appendChild(inner);\n\n    targetDocument.body.appendChild(outer);\n    const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;\n    outer.remove();\n    cache.set(targetDocument, scrollbarWidth);\n    return scrollbarWidth;\n  }, [targetDocument, force]);\n}\n"]}
define(["require", "exports", "react", "../ssr/index"], function (require, exports, React, index_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useId = exports.resetIdsForTests = exports.IdPrefixProvider = void 0;
    var IdPrefixContext = React.createContext(undefined);
    /**
     * Allows to define a prefix that will be used for all IDs generated by useId() hook. It's useful to avoid collisions
     * between different bundles.
     */
    exports.IdPrefixProvider = IdPrefixContext.Provider;
    function useIdPrefix() {
        return React.useContext(IdPrefixContext) || '';
    }
    /**
     * Resets generated IDs, should be used only in tests.
     */
    function resetIdsForTests() {
        index_1.defaultSSRContextValue.current = 0;
    }
    exports.resetIdsForTests = resetIdsForTests;
    /**
     * Hook to generate a unique ID.
     *
     * @param prefix - Optional prefix for the ID. Defaults to 'fui-'.
     * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,
     *  without conditioning the hook call
     * @returns The ID
     */
    function useId(prefix, providedId) {
        if (prefix === void 0) { prefix = 'fui-'; }
        var contextValue = index_1.useSSRContext();
        var idPrefix = useIdPrefix();
        // Checking if useId is available on React, if it is, we use it to generate the id. String concatenation is used to
        // prevent bundlers from complaining with older versions of React.
        var _useId = React['use' + 'Id'];
        if (_useId) {
            var generatedId_1 = _useId();
            // eslint-disable-next-line react-hooks/rules-of-hooks
            var escapedId = React.useMemo(function () { return generatedId_1.replace(/:/g, ''); }, [generatedId_1]);
            return providedId || "" + idPrefix + prefix + escapedId;
        }
        // Hooks appear to be running conditionally, but they will always run in the same order since it's based on
        // the version of React being used. This is safe to ignore.
        // eslint-disable-next-line react-hooks/rules-of-hooks
        return React.useMemo(function () {
            if (providedId) {
                return providedId;
            }
            return "" + idPrefix + prefix + ++contextValue.current;
        }, [idPrefix, prefix, providedId, contextValue]);
    }
    exports.useId = useId;
});
//# sourceMappingURL=useId.js.map
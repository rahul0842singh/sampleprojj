{"version":3,"mappings":";;;;;;AACA;AA4BA,MAAMA,gBAAgB,GAA2C;EAC/DC,KAAK,EAAEC,4BAAe;EACtBC,KAAK,EAAED,4BAAe;EACtBE,KAAK,EAAEF,4BAAe;EACtBG,EAAE,EAAEH,yBAAY;EAChBI,EAAE,EAAEJ,yBAAY;EAChBK,CAAC,EAAEL,6BAAgB;EACnBM,MAAM,EAAEN,6BAAgB;EACxBO,KAAK,EAAEP,4BAAe;EACtBQ,QAAQ,EAAER,+BAAkB;EAC5BS,MAAM,EAAET,6BAAgB;EACxBU,MAAM,EAAEV,6BAAgB;EACxBW,KAAK,EAAEX,4BAAe;EACtBY,EAAE,EAAEZ,yBAAY;EAChBa,EAAE,EAAEb,yBAAY;EAChBc,EAAE,EAAEd,yBAAY;EAChBe,QAAQ,EAAEf,+BAAkB;EAC5BgB,GAAG,EAAEhB,0BAAa;EAClBiB,QAAQ,EAAEjB,+BAAkB;EAC5BkB,IAAI,EAAElB,2BAAc;EACpBmB,MAAM,EAAEnB,6BAAgB;EACxBoB,GAAG,EAAEpB,0BAAa;EAClBqB,IAAI,EAAErB,2BAAc;EACpBsB,MAAM,EAAEtB;CACT;AAED;;;;;;;AAOA;AACA,SAAgBuB,qBAAqB,CACnCC,OAAe,EACfC,KAAS,EACTC,iBAA4B;EAE5B,MAAMC,gBAAgB,GAAIH,OAAO,IAAI1B,gBAAgB,CAAC0B,OAAO,CAAC,IAAKxB,kCAAqB;EACxF2B,gBAAgB,CAACC,EAAE,GAAG,CAAC;EAEvB,OAAO5B,2BAAc,CAACyB,KAAK,EAAEE,gBAAgB,EAAED,iBAAiB,CAAC;AACnE;AATAG;AAWA;;;;;;;;AAQO,MAAMC,yBAAyB,GAAG,CAGvC;EACAC,kBAAkB;EAClBN,KAAK;EACLC;AAAiB,CAUlB,KAAI;EACH,OAAO;IACLM,IAAI,EAAE;MAAEC,KAAK,EAAER,KAAK,CAACQ,KAAK;MAAEC,SAAS,EAAET,KAAK,CAACS;IAAS,CAAE;IACxDC,OAAO,EAAEZ,qBAAqB,CAAgCQ,kBAAkB,EAAEN,KAAK,EAAE,CACvF,IAAIC,iBAAiB,IAAI,EAAE,CAAC,EAC5B,OAAO,EACP,WAAW,CACZ;GACF;AACH,CAAC;AAzBYG,iCAAyB","names":["nativeElementMap","label","properties_1","audio","video","ol","li","a","button","input","textarea","select","option","table","tr","th","td","colGroup","col","fieldset","form","iframe","img","time","dialog","getNativeElementProps","tagName","props","excludedPropNames","allowedPropNames","as","exports","getPartitionedNativeProps","primarySlotTagName","root","style","className","primary"],"sourceRoot":"../src/","sources":["packages/react-components/react-utilities/src/utils/getNativeElementProps.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  labelProperties,\n  audioProperties,\n  videoProperties,\n  olProperties,\n  liProperties,\n  anchorProperties,\n  buttonProperties,\n  inputProperties,\n  textAreaProperties,\n  selectProperties,\n  optionProperties,\n  tableProperties,\n  trProperties,\n  thProperties,\n  tdProperties,\n  colGroupProperties,\n  colProperties,\n  fieldsetProperties,\n  formProperties,\n  iframeProperties,\n  imgProperties,\n  htmlElementProperties,\n  getNativeProps,\n  timeProperties,\n  dialogProperties,\n} from './properties';\n\nconst nativeElementMap: Record<string, Record<string, number>> = {\n  label: labelProperties,\n  audio: audioProperties,\n  video: videoProperties,\n  ol: olProperties,\n  li: liProperties,\n  a: anchorProperties,\n  button: buttonProperties,\n  input: inputProperties,\n  textarea: textAreaProperties,\n  select: selectProperties,\n  option: optionProperties,\n  table: tableProperties,\n  tr: trProperties,\n  th: thProperties,\n  td: tdProperties,\n  colGroup: colGroupProperties,\n  col: colProperties,\n  fieldset: fieldsetProperties,\n  form: formProperties,\n  iframe: iframeProperties,\n  img: imgProperties,\n  time: timeProperties,\n  dialog: dialogProperties,\n};\n\n/**\n * Given an element tagname and user props, filters the props to only allowed props for the given\n * element type.\n * @param tagName - Tag name (e.g. \"div\")\n * @param props - Props object\n * @param excludedPropNames - List of props to disallow\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getNativeElementProps<TAttributes extends React.HTMLAttributes<any>>(\n  tagName: string,\n  props: {},\n  excludedPropNames?: string[],\n): TAttributes {\n  const allowedPropNames = (tagName && nativeElementMap[tagName]) || htmlElementProperties;\n  allowedPropNames.as = 1;\n\n  return getNativeProps(props, allowedPropNames, excludedPropNames);\n}\n\n/**\n * Splits the native props into ones that go to the `root` slot, and ones that go to the primary slot.\n *\n * This function is only for use with components that have a primary slot other than `root`.\n * Most components should use {@link getNativeElementProps} for their root slot if it is the primary slot.\n *\n * @returns An object containing the native props for the `root` and primary slots.\n */\nexport const getPartitionedNativeProps = <\n  Props extends Pick<React.HTMLAttributes<HTMLElement>, 'style' | 'className'>,\n  ExcludedPropKeys extends Extract<keyof Props, string> = never\n>({\n  primarySlotTagName,\n  props,\n  excludedPropNames,\n}: {\n  /** The primary slot's element type (e.g. 'div') */\n  primarySlotTagName: keyof JSX.IntrinsicElements;\n\n  /** The component's props object */\n  props: Props;\n\n  /** List of native props to exclude from the returned value */\n  excludedPropNames?: ExcludedPropKeys[];\n}) => {\n  return {\n    root: { style: props.style, className: props.className },\n    primary: getNativeElementProps<Omit<Props, ExcludedPropKeys>>(primarySlotTagName, props, [\n      ...(excludedPropNames || []),\n      'style',\n      'className',\n    ]),\n  };\n};\n"]}